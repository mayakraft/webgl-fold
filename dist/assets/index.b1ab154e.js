(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))o(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const c of s.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&o(c)}).observe(document,{childList:!0,subtree:!0});function t(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerpolicy&&(s.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?s.credentials="include":r.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function o(r){if(r.ep)return;r.ep=!0;const s=t(r);fetch(r.href,s)}})();function xe(){}function Ts(n){return n()}function Cr(){return Object.create(null)}function Se(n){n.forEach(Ts)}function h3(n){return typeof n=="function"}function $1(n,e){return n!=n?e==e:n!==e||n&&typeof n=="object"||typeof n=="function"}function p3(n){return Object.keys(n).length===0}function V(n,e){n.appendChild(e)}function kn(n,e,t){n.insertBefore(e,t||null)}function _n(n){n.parentNode.removeChild(n)}function S(n){return document.createElement(n)}function ve(n){return document.createTextNode(n)}function B(){return ve(" ")}function K(n,e,t,o){return n.addEventListener(e,t,o),()=>n.removeEventListener(e,t,o)}function F(n,e,t){t==null?n.removeAttribute(e):n.getAttribute(e)!==t&&n.setAttribute(e,t)}function Br(n){return n===""?null:+n}function g3(n){return Array.from(n.childNodes)}function r1(n,e){e=""+e,n.wholeText!==e&&(n.data=e)}function Ge(n,e){n.value=e==null?"":e}let pt;function mt(n){pt=n}function Ns(){if(!pt)throw new Error("Function called outside component initialization");return pt}function Rs(n){Ns().$$.on_mount.push(n)}function _3(n){Ns().$$.on_destroy.push(n)}const dt=[],ye=[],o0=[],p1=[],v3=Promise.resolve();let g1=!1;function M3(){g1||(g1=!0,v3.then(Ds))}function u0(n){o0.push(n)}function ut(n){p1.push(n)}const s1=new Set;let Xt=0;function Ds(){const n=pt;do{for(;Xt<dt.length;){const e=dt[Xt];Xt++,mt(e),b3(e.$$)}for(mt(null),dt.length=0,Xt=0;ye.length;)ye.pop()();for(let e=0;e<o0.length;e+=1){const t=o0[e];s1.has(t)||(s1.add(t),t())}o0.length=0}while(dt.length);for(;p1.length;)p1.pop()();g1=!1,s1.clear(),mt(n)}function b3(n){if(n.fragment!==null){n.update(),Se(n.before_update);const e=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,e),n.after_update.forEach(u0)}}const r0=new Set;let y3;function _1(n,e){n&&n.i&&(r0.delete(n),n.i(e))}function Fr(n,e,t,o){if(n&&n.o){if(r0.has(n))return;r0.add(n),y3.c.push(()=>{r0.delete(n),o&&(t&&n.d(1),o())}),n.o(e)}else o&&o()}const V3=typeof window<"u"?window:typeof globalThis<"u"?globalThis:global;function ft(n,e,t){const o=n.$$.props[e];o!==void 0&&(n.$$.bound[o]=t,t(n.$$.ctx[o]))}function Lr(n){n&&n.c()}function v1(n,e,t,o){const{fragment:r,on_mount:s,on_destroy:c,after_update:i}=n.$$;r&&r.m(e,t),o||u0(()=>{const a=s.map(Ts).filter(h3);c?c.push(...a):Se(a),n.$$.on_mount=[]}),i.forEach(u0)}function M1(n,e){const t=n.$$;t.fragment!==null&&(Se(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function x3(n,e){n.$$.dirty[0]===-1&&(dt.push(n),M3(),n.$$.dirty.fill(0)),n.$$.dirty[e/31|0]|=1<<e%31}function W1(n,e,t,o,r,s,c,i=[-1]){const a=pt;mt(n);const l=n.$$={fragment:null,ctx:null,props:s,update:xe,not_equal:r,bound:Cr(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(a?a.$$.context:[])),callbacks:Cr(),dirty:i,skip_bound:!1,root:e.target||a.$$.root};c&&c(l.root);let f=!1;if(l.ctx=t?t(n,e.props||{},(d,m,..._)=>{const v=_.length?_[0]:m;return l.ctx&&r(l.ctx[d],l.ctx[d]=v)&&(!l.skip_bound&&l.bound[d]&&l.bound[d](v),f&&x3(n,d)),m}):[],l.update(),f=!0,Se(l.before_update),l.fragment=o?o(l.ctx):!1,e.target){if(e.hydrate){const d=g3(e.target);l.fragment&&l.fragment.l(d),d.forEach(_n)}else l.fragment&&l.fragment.c();e.intro&&_1(n.$$.fragment),v1(n,e.target,e.anchor,e.customElement),Ds()}mt(a)}class U1{$destroy(){M1(this,1),this.$destroy=xe}$on(e,t){const o=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return o.push(t),()=>{const r=o.indexOf(t);r!==-1&&o.splice(r,1)}}$set(e){this.$$set&&!p3(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const b1="undefined",y1="number",$s="object",Ws="index",Qn="vertices",An="edges",me="faces",Us="boundaries",V1="vertices_coords",f0="edges_vertices",E3="faces_vertices",x1="faces_edges",q1="edges_assignment",qs="edges_foldAngle",zr="faces_layer",Gs="boundary",Ir="front",Tr="back",Hs="foldedForm",k0="black",G1="white",w0="none",k3=typeof window!==b1&&typeof window.document!==b1;typeof process!==b1&&process.versions!=null&&process.versions.node!=null;const w3=typeof self===$s&&self.constructor&&self.constructor.name==="DedicatedWorkerGlobalScope",E1={window:void 0},A3=n=>new n.DOMParser().parseFromString("<!DOCTYPE html><title>.</title>","text/html"),P3=n=>(n.document||(n.document=A3(n)),E1.window=n,E1.window);k3&&(E1.window=window);var Z=Object.create(null);const gt=function(n){switch(n.constructor.name){case"vector":case"matrix":case"segment":case"ray":case"line":case"circle":case"ellipse":case"rect":case"polygon":return n.constructor.name}if(typeof n=="object"){if(n.radius!=null)return"circle";if(n.width!=null)return"rect";if(n.x!=null||typeof n[0]=="number")return"vector";if(n[0]!=null&&n[0].length&&(typeof n[0].x=="number"||typeof n[0][0]=="number"))return"segment";if(n.vector!=null&&n.origin!=null)return"line"}},T=(n,e)=>e.length===n?e:Array(n).fill(0).map((t,o)=>e[o]?e[o]:t),Zn=(n,e)=>{const t=n.length>e.length?n.length:e.length;return[n,e].map(o=>T(t,o))},O3=(n,e)=>{const t=n.length>e.length?e.length:n.length;return[n,e].map(o=>T(t,o))},Nr=function(n){const e=`${n}`.match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return e?Math.max(0,(e[1]?e[1].length:0)-(e[2]?+e[2]:0)):0},H1=function(n,e=15){if(typeof n!="number")return n;const t=parseFloat(n.toFixed(e));return Nr(t)===Math.min(e,Nr(n))?n:t},d0=n=>n!=null&&typeof n[Symbol.iterator]=="function",Jn=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return d0(arguments[0])&&typeof arguments[0]!="string"?Jn(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map(n=>d0(n)?[...Jn(n)]:n)}},ce=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return d0(arguments[0])&&typeof arguments[0]!="string"?ce(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map(n=>d0(n)?[...ce(n)]:n).reduce((n,e)=>n.concat(e),[])}};var S3=Object.freeze({__proto__:null,resize:T,resizeUp:Zn,resizeDown:O3,cleanNumber:H1,semiFlattenArrays:Jn,flattenArrays:ce}),A=Object.create(null);const C=1e-6,j3=180/Math.PI,Ys=Math.PI/180,U=Math.PI*2;var C3=Object.freeze({__proto__:null,EPSILON:C,R2D:j3,D2R:Ys,TWO_PI:U});const Y1=()=>!0,X1=n=>n*n,je=(n,e)=>n+(e||0),A0=n=>n!==void 0,B3=(n,e)=>n&&e,F3=(n,e)=>n.concat(e),wt=n=>Math.atan2(n[1],n[0]),At=n=>[Math.cos(n),Math.sin(n)],L3=(n,e)=>n===e,Ee=(n,e,t=C)=>Math.abs(n-e)<t,Z1=(n,e,t=C)=>Ee(n,e,t)?0:Math.sign(e-n),Pt=(n,e,t=C)=>{for(let o=0;o<Math.max(n.length,e.length);o+=1)if(!Ee(n[o]||0,e[o]||0,t))return!1;return!0},ie=(n,e=C)=>n>-e,X=(n,e=C)=>n>e,Nn=Y1,Pn=Y1,m0=ie,ae=X,tn=(n,e=C)=>n>-e&&n<1+e,ke=(n,e=C)=>n>e&&n<1-e,z3=n=>n,Xs=n=>n<-C?0:n,J1=n=>n<-C?0:n>1+C?1:n;var I3=Object.freeze({__proto__:null,fnTrue:Y1,fnSquare:X1,fnAdd:je,fnNotUndefined:A0,fnAnd:B3,fnCat:F3,fnVec2Angle:wt,fnToVec2:At,fnEqual:L3,fnEpsilonEqual:Ee,fnEpsilonSort:Z1,fnEpsilonEqualVectors:Pt,include:ie,exclude:X,includeL:Nn,excludeL:Pn,includeR:m0,excludeR:ae,includeS:tn,excludeS:ke,lineLimiter:z3,rayLimiter:Xs,segmentLimiter:J1});const mn=n=>Math.sqrt(n.map(X1).reduce(je,0)),Zs=n=>Math.sqrt(n[0]*n[0]+n[1]*n[1]),Js=n=>Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]),K1=n=>n.map(X1).reduce(je,0),on=n=>{const e=mn(n);return e===0?n:n.map(t=>t/e)},h0=n=>{const e=Zs(n);return e===0?n:[n[0]/e,n[1]/e]},s0=n=>{const e=Js(n);return e===0?n:[n[0]/e,n[1]/e,n[2]/e]},Rn=(n,e)=>n.map(t=>t*e),Ks=(n,e)=>[n[0]*e,n[1]*e],On=(n,e)=>n.map((t,o)=>t+(e[o]||0)),Qs=(n,e)=>[n[0]+e[0],n[1]+e[1]],T3=(n,e)=>[n[0]+e[0],n[1]+e[1],n[2]+e[2]],R=(n,e)=>n.map((t,o)=>t-(e[o]||0)),p0=(n,e)=>[n[0]-e[0],n[1]-e[1]],nc=(n,e)=>[n[0]-e[0],n[1]-e[1],n[2]-e[2]],dn=(n,e)=>n.map((t,o)=>n[o]*e[o]).reduce(je,0),ec=(n,e)=>n[0]*e[0]+n[1]*e[1],P0=(n,e)=>n.map((t,o)=>(t+e[o])/2),N3=(n,e)=>Ks(Qs(n,e),.5),Q1=function(){if(arguments.length===0)return[];const n=arguments[0].length>0?arguments[0].length:0,e=Array(n).fill(0);return Array.from(arguments).forEach(t=>e.forEach((o,r)=>{e[r]+=t[r]||0})),e.map(t=>t/arguments.length)},no=(n,e,t)=>{const o=1-t;return n.map((r,s)=>r*o+(e[s]||0)*t)},G=(n,e)=>n[0]*e[1]-n[1]*e[0],_t=(n,e)=>[n[1]*e[2]-n[2]*e[1],n[2]*e[0]-n[0]*e[2],n[0]*e[1]-n[1]*e[0]],Ot=(n,e)=>Math.sqrt(n.map((t,o)=>(n[o]-e[o])**2).reduce(je,0)),se=(n,e)=>{const t=n[0]-e[0],o=n[1]-e[1];return Math.sqrt(t*t+o*o)},R3=(n,e)=>{const t=n[0]-e[0],o=n[1]-e[1],r=n[2]-e[2];return Math.sqrt(t*t+o*o+r*r)},St=n=>n.map(e=>-e),Ce=n=>[-n[1],n[0]],O0=n=>[n[1],-n[0]],tc=(n,e=C)=>n.map(t=>Math.abs(t)).reduce(je,0)<e,He=(n,e,t=C)=>1-Math.abs(dn(on(n),on(e)))<t,D3=(n,e,t=C)=>Math.abs(G(n,e))<t;var $3=Object.freeze({__proto__:null,magnitude:mn,magnitude2:Zs,magnitude3:Js,magSquared:K1,normalize:on,normalize2:h0,normalize3:s0,scale:Rn,scale2:Ks,add:On,add2:Qs,add3:T3,subtract:R,subtract2:p0,subtract3:nc,dot:dn,dot2:ec,midpoint:P0,midpoint2:N3,average:Q1,lerp:no,cross2:G,cross3:_t,distance:Ot,distance2:se,distance3:R3,flip:St,rotate90:Ce,rotate270:O0,degenerate:tc,parallel:He,parallel2:D3});const Ye=Object.freeze([1,0,0,0,1,0,0,0,1]),eo=Object.freeze(Ye.concat(0,0,0)),oc=n=>eo.map((e,t)=>Math.abs(e-n[t])<C).reduce((e,t)=>e&&t,!0),we=(n,e)=>[n[0]*e[0]+n[3]*e[1]+n[6]*e[2]+n[9],n[1]*e[0]+n[4]*e[1]+n[7]*e[2]+n[10],n[2]*e[0]+n[5]*e[1]+n[8]*e[2]+n[11]],to=(n,e,t)=>({vector:[n[0]*e[0]+n[3]*e[1]+n[6]*e[2],n[1]*e[0]+n[4]*e[1]+n[7]*e[2],n[2]*e[0]+n[5]*e[1]+n[8]*e[2]],origin:[n[0]*t[0]+n[3]*t[1]+n[6]*t[2]+n[9],n[1]*t[0]+n[4]*t[1]+n[7]*t[2]+n[10],n[2]*t[0]+n[5]*t[1]+n[8]*t[2]+n[11]]}),xn=(n,e)=>[n[0]*e[0]+n[3]*e[1]+n[6]*e[2],n[1]*e[0]+n[4]*e[1]+n[7]*e[2],n[2]*e[0]+n[5]*e[1]+n[8]*e[2],n[0]*e[3]+n[3]*e[4]+n[6]*e[5],n[1]*e[3]+n[4]*e[4]+n[7]*e[5],n[2]*e[3]+n[5]*e[4]+n[8]*e[5],n[0]*e[6]+n[3]*e[7]+n[6]*e[8],n[1]*e[6]+n[4]*e[7]+n[7]*e[8],n[2]*e[6]+n[5]*e[7]+n[8]*e[8],n[0]*e[9]+n[3]*e[10]+n[6]*e[11]+n[9],n[1]*e[9]+n[4]*e[10]+n[7]*e[11]+n[10],n[2]*e[9]+n[5]*e[10]+n[8]*e[11]+n[11]],oo=n=>n[0]*n[4]*n[8]-n[0]*n[7]*n[5]-n[3]*n[1]*n[8]+n[3]*n[7]*n[2]+n[6]*n[1]*n[5]-n[6]*n[4]*n[2],rc=n=>{const e=oo(n);if(Math.abs(e)<1e-6||Number.isNaN(e)||!Number.isFinite(n[9])||!Number.isFinite(n[10])||!Number.isFinite(n[11]))return;const t=[n[4]*n[8]-n[7]*n[5],-n[1]*n[8]+n[7]*n[2],n[1]*n[5]-n[4]*n[2],-n[3]*n[8]+n[6]*n[5],n[0]*n[8]-n[6]*n[2],-n[0]*n[5]+n[3]*n[2],n[3]*n[7]-n[6]*n[4],-n[0]*n[7]+n[6]*n[1],n[0]*n[4]-n[3]*n[1],-n[3]*n[7]*n[11]+n[3]*n[8]*n[10]+n[6]*n[4]*n[11]-n[6]*n[5]*n[10]-n[9]*n[4]*n[8]+n[9]*n[5]*n[7],n[0]*n[7]*n[11]-n[0]*n[8]*n[10]-n[6]*n[1]*n[11]+n[6]*n[2]*n[10]+n[9]*n[1]*n[8]-n[9]*n[2]*n[7],-n[0]*n[4]*n[11]+n[0]*n[5]*n[10]+n[3]*n[1]*n[11]-n[3]*n[2]*n[10]-n[9]*n[1]*n[5]+n[9]*n[2]*n[4]],o=1/e;return t.map(r=>r*o)},sc=(n=0,e=0,t=0)=>Ye.concat(n,e,t),ro=(n,e,t,o,r)=>{const s=Ye.concat([0,1,2].map(a=>e[a]||0)),c=Math.cos(n),i=Math.sin(n);return s[t*3+t]=c,s[t*3+o]=(r?1:-1)*i,s[o*3+t]=(r?-1:1)*i,s[o*3+o]=c,s},cc=(n,e=[0,0,0])=>ro(n,e,1,2,!0),ic=(n,e=[0,0,0])=>ro(n,e,0,2,!1),ac=(n,e=[0,0,0])=>ro(n,e,0,1,!0),lc=(n,e=[0,0,1],t=[0,0,0])=>{const o=[0,1,2].map(m=>t[m]||0),[r,s,c]=T(3,on(e)),i=Math.cos(n),a=Math.sin(n),l=1-i,f=Ye.concat(-o[0],-o[1],-o[2]),d=Ye.concat(o[0],o[1],o[2]);return xn(d,xn([l*r*r+i,l*s*r+c*a,l*c*r-s*a,l*r*s-c*a,l*s*s+i,l*c*s+r*a,l*r*c+s*a,l*s*c-r*a,l*c*c+i,0,0,0],f))},uc=(n=[1,1,1],e=[0,0,0])=>[n[0],0,0,0,n[1],0,0,0,n[2],n[0]*-e[0]+e[0],n[1]*-e[1]+e[1],n[2]*-e[2]+e[2]],so=(n,e=[0,0])=>{const t=Math.atan2(n[1],n[0]),o=Math.cos(t),r=Math.sin(t),s=Math.cos(-t),c=Math.sin(-t),i=o*s+r*c,a=o*-c+r*s,l=r*s+-o*c,f=r*-c+-o*s,d=e[0]+i*-e[0]+-e[1]*l,m=e[1]+a*-e[0]+-e[1]*f;return[i,a,0,l,f,0,0,0,1,d,m,0]};var W3=Object.freeze({__proto__:null,identity3x3:Ye,identity3x4:eo,isIdentity3x4:oc,multiplyMatrix3Vector3:we,multiplyMatrix3Line3:to,multiplyMatrices3:xn,determinant3:oo,invertMatrix3:rc,makeMatrix3Translate:sc,makeMatrix3RotateX:cc,makeMatrix3RotateY:ic,makeMatrix3RotateZ:ac,makeMatrix3Rotate:lc,makeMatrix3Scale:uc,makeMatrix3ReflectZ:so});const Zt=(n,e)=>({vector:n||[],origin:e||[]}),D=function(){if(arguments[0]instanceof A.vector)return arguments[0];let n=ce(arguments);return n.length>0&&typeof n[0]=="object"&&n[0]!==null&&!Number.isNaN(n[0].x)&&(n=["x","y","z"].map(e=>n[0][e]).filter(A0)),n.filter(e=>typeof e=="number")},Xe=function(){return Jn(arguments).map(n=>D(n))},fc=function(){if(arguments[0]instanceof A.segment)return arguments[0];const n=Jn(arguments);return n.length===4?[[n[0],n[1]],[n[2],n[3]]]:n.map(e=>D(e))},wn=function(){const n=Jn(arguments);return n.length===0?Zt([],[]):n[0]instanceof A.line||n[0]instanceof A.ray||n[0]instanceof A.segment?n[0]:n[0].constructor===Object&&n[0].vector!==void 0?Zt(n[0].vector||[],n[0].origin||[]):typeof n[0]=="number"?Zt(D(n)):Zt(...n.map(e=>D(e)))},U3=wn,k1=(n=0,e=0,t=0,o=0)=>({x:n,y:e,width:t,height:o}),dc=function(){if(arguments[0]instanceof A.rect)return arguments[0];const n=ce(arguments);if(n.length>0&&typeof n[0]=="object"&&n[0]!==null&&!Number.isNaN(n[0].width))return k1(...["x","y","width","height"].map(o=>n[0][o]).filter(A0));const e=n.filter(o=>typeof o=="number"),t=e.length<4?[,,...e]:e;return k1(...t)},ge=(n=1,...e)=>({radius:n,origin:[...e]}),mc=function(){if(arguments[0]instanceof A.circle)return arguments[0];const n=Xe(arguments),e=ce(arguments).filter(t=>typeof t=="number");if(arguments.length===2){if(n[1].length===1)return ge(n[1][0],...n[0]);if(n[0].length===1)return ge(n[0][0],...n[1]);if(n[0].length>1&&n[1].length>1)return ge(se(...n),...n[0])}else switch(e.length){case 0:return ge(1,0,0,0);case 1:return ge(e[0],0,0,0);default:return ge(e.pop(),...e)}return ge(1,0,0,0)},hc=[[0,1,3,4,9,10],[0,1,2,3,4,5,6,7,8,9,10,11],[0,1,2,void 0,3,4,5,void 0,6,7,8,void 0,9,10,11]];[11,7,3].forEach(n=>delete hc[2][n]);const q3=n=>{let e;return n<8?e=0:n<13?e=1:e=2,hc[e]},le=function(){const n=ce(arguments),e=[...eo];return q3(n.length).forEach((t,o)=>{n[o]!=null&&(e[t]=n[o])}),e};var G3=Object.freeze({__proto__:null,getVector:D,getVectorOfVectors:Xe,getSegment:fc,getLine:wn,getRay:U3,getRectParams:k1,getRect:dc,getCircle:mc,getMatrix3x4:le});const pc=({vector:n,origin:e})=>{const t=mn(n),o=Ce(n),r=dn(e,o)/t;return{normal:Rn(o,1/t),distance:r}},gc=({normal:n,distance:e})=>({vector:O0(n),origin:Rn(n,e)});var H3=Object.freeze({__proto__:null,rayLineToUniqueLine:pc,uniqueLineToRayLine:gc});const co=(n,e,t)=>{const o=e.map((c,i)=>({o:c,i,d:t(n,c)}));let r,s=1/0;for(let c=0;c<o.length;c+=1)o[c].d<s&&(r=c,s=o[c].d);return r},Y3=(n,e=Z1,t=C)=>{let o=[0];for(let r=1;r<n.length;r+=1)switch(e(n[r][0],n[o[0]][0],t)){case 0:o.push(r);break;case 1:o=[r];break}return o},_c=(n,e=C)=>{const t=Y3(n,Z1,e);let o=0;for(let r=1;r<t.length;r+=1)n[t[r]][1]<n[t[o]][1]&&(o=r);return t[o]},X3=(n,e)=>{const t=co(n,e,se);return t===void 0?void 0:e[t]},Z3=(n,e)=>{const t=co(n,e,Ot);return t===void 0?void 0:e[t]},S0=(n,e,t,o,r=C)=>{e=T(n.length,e),t=T(n.length,t);const s=K1(n),c=R(t,e),a=dn(n,c)/s,l=o(a,r);return On(e,Rn(n,l))},vc=(n,e)=>{const t=n.map((o,r,s)=>R(s[(r+1)%s.length],o));return n.map((o,r)=>S0(t[r],o,e,J1)).map((o,r)=>({point:o,i:r,distance:Ot(o,e)})).sort((o,r)=>o.distance-r.distance).shift()},Mc=(n,e,t)=>On(e,Rn(on(R(t,e)),n));var J3=Object.freeze({__proto__:null,smallestComparisonSearch:co,minimum2DPointIndex:_c,nearestPoint2:X3,nearestPoint:Z3,nearestPointOnLine:S0,nearestPointOnPolygon:vc,nearestPointOnCircle:Mc});const K3=(n,e)=>n.map(t=>({point:t,d:t[0]*e[0]+t[1]*e[1]})).sort((t,o)=>t.d-o.d).map(t=>t.point),bc=(n,e=C)=>{const t=[[0]];let o=0;for(let r=1;r<n.length;r+=1)Ee(n[r],n[r-1],e)?t[o].push(r):(o=t.length,t.push([r]));return t},yc=(n=[],e=C)=>{const t=_c(n,e),o=n.map(s=>p0(s,n[t])).map(s=>h0(s)).map(s=>ec([0,1],s)),r=o.map((s,c)=>({a:s,i:c})).sort((s,c)=>s.a-c.a).map(s=>s.i).filter(s=>s!==t);return[[t]].concat(bc(r.map(s=>o[s]),e).map(s=>s.map(c=>r[c])).map(s=>s.length===1?s:s.map(c=>({i:c,len:se(n[c],n[t])})).sort((c,i)=>c.len-i.len).map(c=>c.i)))};var Q3=Object.freeze({__proto__:null,sortPointsAlongVector2:K3,clusterIndicesOfSortedNumbers:bc,radialSortPointIndices:yc});const io=[1,0,0,1],na=io.concat(0,0),ea=(n,e)=>[n[0]*e[0]+n[2]*e[1]+n[4],n[1]*e[0]+n[3]*e[1]+n[5]],ta=(n,e,t)=>({vector:[n[0]*e[0]+n[2]*e[1],n[1]*e[0]+n[3]*e[1]],origin:[n[0]*t[0]+n[2]*t[1]+n[4],n[1]*t[0]+n[3]*t[1]+n[5]]}),oa=(n,e)=>[n[0]*e[0]+n[2]*e[1],n[1]*e[0]+n[3]*e[1],n[0]*e[2]+n[2]*e[3],n[1]*e[2]+n[3]*e[3],n[0]*e[4]+n[2]*e[5]+n[4],n[1]*e[4]+n[3]*e[5]+n[5]],Vc=n=>n[0]*n[3]-n[1]*n[2],ra=n=>{const e=Vc(n);if(!(Math.abs(e)<1e-6||Number.isNaN(e)||!Number.isFinite(n[4])||!Number.isFinite(n[5])))return[n[3]/e,-n[1]/e,-n[2]/e,n[0]/e,(n[2]*n[5]-n[3]*n[4])/e,(n[1]*n[4]-n[0]*n[5])/e]},sa=(n=0,e=0)=>io.concat(n,e),ca=(n=[1,1],e=[0,0])=>[n[0],0,0,n[1],n[0]*-e[0]+e[0],n[1]*-e[1]+e[1]],xc=(n,e=[0,0])=>{const t=Math.cos(n),o=Math.sin(n);return[t,o,-o,t,e[0],e[1]]},ia=(n,e=[0,0])=>{const t=Math.atan2(n[1],n[0]),o=Math.cos(t),r=Math.sin(t),s=Math.cos(-t),c=Math.sin(-t),i=o*s+r*c,a=o*-c+r*s,l=r*s+-o*c,f=r*-c+-o*s,d=e[0]+i*-e[0]+-e[1]*l,m=e[1]+a*-e[0]+-e[1]*f;return[i,a,l,f,d,m]};var aa=Object.freeze({__proto__:null,identity2x2:io,identity2x3:na,multiplyMatrix2Vector2:ea,multiplyMatrix2Line2:ta,multiplyMatrices2:oa,determinant2:Vc,invertMatrix2:ra,makeMatrix2Translate:sa,makeMatrix2Scale:ca,makeMatrix2Rotate:xc,makeMatrix2Reflect:ia});const Ec=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),la=n=>Ec.map((e,t)=>Math.abs(e-n[t])<C).reduce((e,t)=>e&&t,!0),ua=(n,e)=>[n[0]*e[0]+n[4]*e[1]+n[8]*e[2]+n[12],n[1]*e[0]+n[5]*e[1]+n[9]*e[2]+n[13],n[2]*e[0]+n[6]*e[1]+n[10]*e[2]+n[14]],fa=(n,e,t)=>({vector:[n[0]*e[0]+n[4]*e[1]+n[8]*e[2],n[1]*e[0]+n[5]*e[1]+n[9]*e[2],n[2]*e[0]+n[6]*e[1]+n[10]*e[2]],origin:[n[0]*t[0]+n[4]*t[1]+n[8]*t[2]+n[12],n[1]*t[0]+n[5]*t[1]+n[9]*t[2]+n[13],n[2]*t[0]+n[6]*t[1]+n[10]*t[2]+n[14]]}),g0=(n,e)=>[n[0]*e[0]+n[4]*e[1]+n[8]*e[2]+n[12]*e[3],n[1]*e[0]+n[5]*e[1]+n[9]*e[2]+n[13]*e[3],n[2]*e[0]+n[6]*e[1]+n[10]*e[2]+n[14]*e[3],n[3]*e[0]+n[7]*e[1]+n[11]*e[2]+n[15]*e[3],n[0]*e[4]+n[4]*e[5]+n[8]*e[6]+n[12]*e[7],n[1]*e[4]+n[5]*e[5]+n[9]*e[6]+n[13]*e[7],n[2]*e[4]+n[6]*e[5]+n[10]*e[6]+n[14]*e[7],n[3]*e[4]+n[7]*e[5]+n[11]*e[6]+n[15]*e[7],n[0]*e[8]+n[4]*e[9]+n[8]*e[10]+n[12]*e[11],n[1]*e[8]+n[5]*e[9]+n[9]*e[10]+n[13]*e[11],n[2]*e[8]+n[6]*e[9]+n[10]*e[10]+n[14]*e[11],n[3]*e[8]+n[7]*e[9]+n[11]*e[10]+n[15]*e[11],n[0]*e[12]+n[4]*e[13]+n[8]*e[14]+n[12]*e[15],n[1]*e[12]+n[5]*e[13]+n[9]*e[14]+n[13]*e[15],n[2]*e[12]+n[6]*e[13]+n[10]*e[14]+n[14]*e[15],n[3]*e[12]+n[7]*e[13]+n[11]*e[14]+n[15]*e[15]],kc=n=>{const e=n[10]*n[15]-n[11]*n[14],t=n[9]*n[15]-n[11]*n[13],o=n[9]*n[14]-n[10]*n[13],r=n[8]*n[15]-n[11]*n[12],s=n[8]*n[14]-n[10]*n[12],c=n[8]*n[13]-n[9]*n[12];return n[0]*(n[5]*e-n[6]*t+n[7]*o)-n[1]*(n[4]*e-n[6]*r+n[7]*s)+n[2]*(n[4]*t-n[5]*r+n[7]*c)-n[3]*(n[4]*o-n[5]*s+n[6]*c)},da=n=>{const e=kc(n);if(Math.abs(e)<1e-6||Number.isNaN(e)||!Number.isFinite(n[12])||!Number.isFinite(n[13])||!Number.isFinite(n[14]))return;const t=n[10]*n[15]-n[11]*n[14],o=n[9]*n[15]-n[11]*n[13],r=n[9]*n[14]-n[10]*n[13],s=n[8]*n[15]-n[11]*n[12],c=n[8]*n[14]-n[10]*n[12],i=n[8]*n[13]-n[9]*n[12],a=n[6]*n[15]-n[7]*n[14],l=n[5]*n[15]-n[7]*n[13],f=n[5]*n[14]-n[6]*n[13],d=n[6]*n[11]-n[7]*n[10],m=n[5]*n[11]-n[7]*n[9],_=n[5]*n[10]-n[6]*n[9],v=n[4]*n[15]-n[7]*n[12],p=n[4]*n[14]-n[6]*n[12],h=n[4]*n[11]-n[7]*n[8],g=n[4]*n[10]-n[6]*n[8],b=n[4]*n[13]-n[5]*n[12],M=n[4]*n[9]-n[5]*n[8],x=[+(n[5]*t-n[6]*o+n[7]*r),-(n[1]*t-n[2]*o+n[3]*r),+(n[1]*a-n[2]*l+n[3]*f),-(n[1]*d-n[2]*m+n[3]*_),-(n[4]*t-n[6]*s+n[7]*c),+(n[0]*t-n[2]*s+n[3]*c),-(n[0]*a-n[2]*v+n[3]*p),+(n[0]*d-n[2]*h+n[3]*g),+(n[4]*o-n[5]*s+n[7]*i),-(n[0]*o-n[1]*s+n[3]*i),+(n[0]*l-n[1]*v+n[3]*b),-(n[0]*m-n[1]*h+n[3]*M),-(n[4]*r-n[5]*c+n[6]*i),+(n[0]*r-n[1]*c+n[2]*i),-(n[0]*f-n[1]*p+n[2]*b),+(n[0]*_-n[1]*g+n[2]*M)],L=1/e;return x.map(W=>W*L)},ma=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0]),_0=(n=0,e=0,t=0)=>[...ma,n,e,t,1],ao=(n,e,t,o,r)=>{const s=_0(...e),c=Math.cos(n),i=Math.sin(n);return s[t*4+t]=c,s[t*4+o]=(r?1:-1)*i,s[o*4+t]=(r?-1:1)*i,s[o*4+o]=c,s},ha=(n,e=[0,0,0])=>ao(n,e,1,2,!0),pa=(n,e=[0,0,0])=>ao(n,e,0,2,!1),ga=(n,e=[0,0,0])=>ao(n,e,0,1,!0),_a=(n,e=[0,0,1],t=[0,0,0])=>{const o=[0,1,2].map(m=>t[m]||0),[r,s,c]=T(3,on(e)),i=Math.cos(n),a=Math.sin(n),l=1-i,f=_0(-o[0],-o[1],-o[2]),d=_0(o[0],o[1],o[2]);return g0(d,g0([l*r*r+i,l*s*r+c*a,l*c*r-s*a,0,l*r*s-c*a,l*s*s+i,l*c*s+r*a,0,l*r*c+s*a,l*s*c-r*a,l*c*c+i,0,0,0,0,1],f))},va=(n=[1,1,1],e=[0,0,0])=>[n[0],0,0,0,0,n[1],0,0,0,0,n[2],0,n[0]*-e[0]+e[0],n[1]*-e[1]+e[1],n[2]*-e[2]+e[2],1],Ma=(n,e=[0,0])=>{const t=Math.atan2(n[1],n[0]),o=Math.cos(t),r=Math.sin(t),s=Math.cos(-t),c=Math.sin(-t),i=o*s+r*c,a=o*-c+r*s,l=r*s+-o*c,f=r*-c+-o*s,d=e[0]+i*-e[0]+-e[1]*l,m=e[1]+a*-e[0]+-e[1]*f;return[i,a,0,0,l,f,0,0,0,0,1,0,d,m,0,1]},ba=(n,e,t,o)=>{const r=Math.tan(Math.PI*.5-.5*n),s=1/(t-o);return[r/e,0,0,0,0,r,0,0,0,0,(t+o)*s,-1,0,0,t*o*s*2,0]},ya=(n,e,t,o,r,s)=>[2/(e-o),0,0,0,0,2/(n-t),0,0,0,0,2/(r-s),0,(o+e)/(o-e),(t+n)/(t-n),(r+s)/(r-s),1],Va=(n,e,t)=>{const o=s0(nc(n,e)),r=s0(_t(t,o)),s=s0(_t(o,r));return[r[0],r[1],r[2],0,s[0],s[1],s[2],0,o[0],o[1],o[2],0,n[0],n[1],n[2],1]};var xa=Object.freeze({__proto__:null,identity4x4:Ec,isIdentity4x4:la,multiplyMatrix4Vector3:ua,multiplyMatrix4Line3:fa,multiplyMatrices4:g0,determinant4:kc,invertMatrix4:da,makeMatrix4Translate:_0,makeMatrix4RotateX:ha,makeMatrix4RotateY:pa,makeMatrix4RotateZ:ga,makeMatrix4Rotate:_a,makeMatrix4Scale:va,makeMatrix4ReflectZ:Ma,makePerspectiveMatrix4:ba,makeOrthographicMatrix4:ya,makeLookAtMatrix4:Va});const Ea=(n,e)=>{const t=_t(n,e),o=[t[0],t[1],t[2],dn(n,e)];return o[3]+=mn(o),on(o)},ka=n=>g0([n[3],n[2],-n[1],n[0],-n[2],n[3],n[0],n[1],n[1],-n[0],n[3],n[2],-n[0],-n[1],-n[2],n[3]],[n[3],n[2],-n[1],-n[0],-n[2],n[3],n[0],-n[1],n[1],-n[0],n[3],-n[2],n[0],n[1],n[2],n[3]]);var wa=Object.freeze({__proto__:null,quaternionFromTwoVectors:Ea,matrix4FromQuaternion:ka});const Ln=(n,e,t=X,o=C)=>n.map((r,s,c)=>[r,c[(s+1)%c.length]]).map(r=>G(on(R(r[1],r[0])),R(e,r[0]))).map(r=>t(r,o)).map((r,s,c)=>r===c[0]).reduce((r,s)=>r&&s,!0),Aa=(n,e,t,o,r=tn,s=C)=>{const c=G(on(n),on(t));if(Math.abs(c)<s)return;const i=G(n,t),a=-i,l=R(o,e),f=St(l),d=G(l,t)/i,m=G(f,n)/a;if(r(m,s/mn(t)))return d},Rr=(n,e,t)=>On(e,Rn(n,t)),Pa=(n,e,t,o,r)=>n.map((s,c,i)=>[R(i[(c+1)%i.length],s),s]).map(s=>Aa(e,t,s[0],s[1],o,r)).filter(A0).sort((s,c)=>s-c),Oa=(n,e,t)=>{let o=0,r=n.length-1;for(;o<r&&!e(n[o+1]-n[o],t);)o+=1;for(;r>o&&!e(n[r]-n[r-1],t);)r-=1;if(!(o>=r))return[n[o],n[r]]},wc=(n,e,t,o=ie,r=Nn,s=C)=>{const c=Pa(n,e,t,tn,s);if(c.length<2)return;const i=s*2/mn(e),a=Oa(c,o,i);if(a===void 0)return;const l=m=>r(m)?m:m<.5?0:1,f=a.map(l);if(Math.abs(f[0]-f[1])<s*2/mn(e))return;const d=Rr(e,t,(f[0]+f[1])/2);return Ln(n,d,o,s)?f.map(m=>Rr(e,t,m)):void 0},Sa=(n,e,t=C)=>{let o,r,s,c;const i=f=>(r[0]-o[0])*(f[1]-o[1])>(r[1]-o[1])*(f[0]-o[0])+t,a=()=>{const f=[o[0]-r[0],o[1]-r[1]],d=[s[0]-c[0],s[1]-c[1]],m=o[0]*r[1]-o[1]*r[0],_=s[0]*c[1]-s[1]*c[0],v=1/(f[0]*d[1]-f[1]*d[0]);return[(m*d[0]-_*f[0])*v,(m*d[1]-_*f[1])*v]};let l=n;o=e[e.length-1];for(let f in e){r=e[f];const d=l;l=[],s=d[d.length-1];for(let m in d)c=d[m],i(c)?(i(s)||l.push(a()),l.push(c)):i(s)&&l.push(a()),s=c;o=r}return l.length===0?void 0:l},ja=(n,e,t)=>{for(;t<e;)t+=U;for(;n>e;)n-=U;for(;n<e;)n+=U;return n<t},Ac=(n,e)=>{for(;n<0;)n+=U;for(;e<0;)e+=U;for(;n>U;)n-=U;for(;e>U;)e-=U;const t=n-e;return t>=0?t:U-(e-n)},lo=(n,e)=>{for(;n<0;)n+=U;for(;e<0;)e+=U;for(;n>U;)n-=U;for(;e>U;)e-=U;const t=e-n;return t>=0?t:U-(n-e)},uo=(n,e)=>{const t=e[0]*n[0]+e[1]*n[1],o=e[0]*n[1]-e[1]*n[0];let r=Math.atan2(o,t);return r<0&&(r+=U),r},fo=(n,e)=>{const t=n[0]*e[0]+n[1]*e[1],o=n[0]*e[1]-n[1]*e[0];let r=Math.atan2(o,t);return r<0&&(r+=U),r},j0=(n,e)=>At(wt(n)-uo(n,e)/2),mo=(n,e)=>At(wt(n)+fo(n,e)/2),Pc=(n,e,t)=>{const o=Ac(e,t)/n;return Array.from(Array(n-1)).map((r,s)=>e+o*(s+1))},Oc=(n,e,t)=>{const o=lo(e,t)/n;return Array.from(Array(n-1)).map((r,s)=>e+o*(s+1))},Sc=(n,e,t)=>{const o=Math.atan2(e[1],e[0]),r=Math.atan2(t[1],t[0]);return Pc(n,o,r).map(At)},jc=(n,e,t)=>{const o=Math.atan2(e[1],e[0]),r=Math.atan2(t[1],t[0]);return Oc(n,o,r).map(At)},Cc=(n,e,t,o,r=C)=>{const s=G(n,t),c=dn(n,t),i=s>-r?[mo(n,t)]:[j0(n,t)];i[1]=s>-r?Ce(i[0]):O0(i[0]);const l=((o[0]-e[0])*t[1]-t[0]*(o[1]-e[1]))/s,f=[n,t].map(v=>on(v)),d=Math.abs(G(...f))<r,m=d?P0(e,o):[e[0]+n[0]*l,e[1]+n[1]*l],_=i.map(v=>({vector:v,origin:m}));return d&&delete _[c>-r?1:0],_},ho=function(){const n=Array.from(arguments).flat(),e=n.map((t,o)=>o).sort((t,o)=>n[t]-n[o]);return e.slice(e.indexOf(0),e.length).concat(e.slice(0,e.indexOf(0)))},Ca=function(){return ho(Jn(arguments).map(wt))},Bc=function(){const n=Array.from(arguments).flat();return ho(n).map(t=>n[t]).map((t,o,r)=>[t,r[(o+1)%r.length]]).map(t=>lo(t[0],t[1]))},Ba=function(){return Bc(Xe(arguments).map(wt))},Fc=(n,e,t,o=C)=>{const r=h0(p0(e,n)),s=h0(p0(t,n)),c=G(r,s);return Ee(c,0,o)?Ee(se(n,e)+se(e,t),se(n,t))?0:void 0:Math.sign(c)};var Dr=Object.freeze({__proto__:null,isCounterClockwiseBetween:ja,clockwiseAngleRadians:Ac,counterClockwiseAngleRadians:lo,clockwiseAngle2:uo,counterClockwiseAngle2:fo,clockwiseBisect2:j0,counterClockwiseBisect2:mo,clockwiseSubsectRadians:Pc,counterClockwiseSubsectRadians:Oc,clockwiseSubsect2:Sc,counterClockwiseSubsect2:jc,bisectLines2:Cc,counterClockwiseOrderRadians:ho,counterClockwiseOrder2:Ca,counterClockwiseSectorsRadians:Bc,counterClockwiseSectors2:Ba,threePointTurnDirection:Fc});const Fa=n=>n.concat(n.slice(0,-1).reverse()),Lc=(n=[],e=!1,t=C)=>{if(n.length<2)return[];const o=yc(n,t).map(i=>i.length===1?i:Fa(i)).flat();o.push(o[0]);const r=[o[0]];let s=1;const c={"-1":()=>r.pop(),1:i=>{r.push(i),s+=1},undefined:()=>{s+=1}};for(c[0]=e?c[1]:c[-1];s<o.length;){if(r.length<2){r.push(o[s]),s+=1;continue}const i=r[r.length-2],a=r[r.length-1],l=o[s],f=Fc(...[i,a,l].map(d=>n[d]),t);c[f](l)}return r.pop(),r},zc=(n=[],e=!1,t=C)=>Lc(n,e,t).map(o=>n[o]);var La=Object.freeze({__proto__:null,convexHullIndices:Lc,convexHull:zc});const fn=(n,e,t,o,r=Nn,s=Nn,c=C)=>{const i=G(on(n),on(t));if(Math.abs(i)<c)return;const a=G(n,t),l=-a,f=[o[0]-e[0],o[1]-e[1]],d=[-f[0],-f[1]],m=G(f,t)/a,_=G(d,n)/l;if(r(m,c/mn(n))&&s(_,c/mn(t)))return On(e,Rn(n,m))},za=(n,e,t)=>{const o=Array.from(Array(n-1)).map((s,c)=>(c+1)/n).map(s=>no(e.origin,t.origin,s)),r=[...e.vector];return o.map(s=>({origin:s,vector:r}))},Ia=(n,e,t)=>{const o=fn(e.vector,e.origin,t.vector,t.origin);return(uo(e.vector,t.vector)<fo(e.vector,t.vector)?Sc(n,e.vector,t.vector):jc(n,e.vector,t.vector)).map(s=>({origin:o,vector:s}))},Ta=(n,e,t)=>{const o=wn(e),r=wn(t);return He(o.vector,r.vector)?za(n,o,r):Ia(n,o,r)};var Na=Object.freeze({__proto__:null,pleat:Ta});const Ic=n=>Array.from(Array(Math.floor(n))).map((e,t)=>U*(t/n)),Tc=(n,e)=>n.map(t=>[e*Math.cos(t),e*Math.sin(t)]).map(t=>t.map(o=>H1(o,14))),C0=(n=3,e=1)=>Tc(Ic(n),e),po=(n=3,e=1)=>{const t=Math.PI/n,o=Ic(n).map(r=>r+t);return Tc(o,e)},Ra=(n=3,e=1)=>C0(n,e/Math.cos(Math.PI/n)),Da=(n=3,e=1)=>po(n,e/Math.cos(Math.PI/n)),$a=(n=3,e=1)=>C0(n,e/2/Math.sin(Math.PI/n)),Wa=(n=3,e=1)=>po(n,e/2/Math.sin(Math.PI/n)),Ua=(n,e=C)=>{const o=n.map((r,s,c)=>[r,c[(s+1)%c.length]]).map(r=>R(r[1],r[0])).map((r,s,c)=>[r,c[(s+c.length-1)%c.length]]).map(r=>!He(r[1],r[0],e));return n.filter((r,s)=>o[s])},w1=function(n,e,t){const o=e[0]-n[0],r=e[1]-n[1],s=t[0]-n[0],c=t[1]-n[1],i=o*(n[0]+e[0])+r*(n[1]+e[1]),a=s*(n[0]+t[0])+c*(n[1]+t[1]),l=2*(o*(t[1]-e[1])-r*(t[0]-e[0]));if(Math.abs(l)<C){const _=Math.min(n[0],e[0],t[0]),v=Math.min(n[1],e[1],t[1]),p=(Math.max(n[0],e[0],t[0])-_)*.5,h=(Math.max(n[1],e[1],t[1])-v)*.5;return{origin:[_+p,v+h],radius:Math.sqrt(p*p+h*h)}}const f=[(c*i-r*a)/l,(o*a-s*i)/l],d=f[0]-n[0],m=f[1]-n[1];return{origin:f,radius:Math.sqrt(d*d+m*m)}},go=n=>.5*n.map((e,t,o)=>{const r=o[(t+1)%o.length];return e[0]*r[1]-r[0]*e[1]}).reduce(je,0),c0=n=>{const e=1/(6*go(n));return n.map((t,o,r)=>{const s=r[(o+1)%r.length],c=t[0]*s[1]-s[0]*t[1];return[(t[0]+s[0])*c,(t[1]+s[1])*c]}).reduce((t,o)=>[t[0]+o[0],t[1]+o[1]],[0,0]).map(t=>t*e)},_o=(n,e=0)=>{if(!n||!n.length)return;const t=Array(n[0].length).fill(1/0),o=Array(n[0].length).fill(-1/0);n.forEach(s=>s.forEach((c,i)=>{c<t[i]&&(t[i]=c-e),c>o[i]&&(o[i]=c+e)}));const r=o.map((s,c)=>s-t[c]);return{min:t,max:o,span:r}};var qa=Object.freeze({__proto__:null,makePolygonCircumradius:C0,makePolygonCircumradiusSide:po,makePolygonInradius:Ra,makePolygonInradiusSide:Da,makePolygonSideLength:$a,makePolygonSideLengthSide:Wa,makePolygonNonCollinear:Ua,circumcircle:w1,signedArea:go,centroid:c0,boundingBox:_o});const Yn=(n,e,t,o=Pn,r=C)=>{const s=R(t,e),c=K1(n),i=Math.sqrt(c);if(i<r)return!1;const a=G(s,n.map(f=>f/i)),l=dn(s,n)/c;return Math.abs(a)<r&&o(l,r/i)},Nc=(n,e,t)=>{const o=n.map((s,c)=>({point:Yn(e,t,s,Nn)?s:null,at_index:c})).filter(s=>s.point!=null),r=n.map((s,c,i)=>({point:fn(e,t,R(s,i[(c+1)%i.length]),i[(c+1)%i.length],Pn,ke),at_index:c})).filter(s=>s.point!=null);if(r.length===2){const s=r.slice().sort((a,l)=>a.at_index-l.at_index),c=n.slice(s[1].at_index+1).concat(n.slice(0,s[0].at_index+1));c.push(s[0].point),c.push(s[1].point);const i=n.slice(s[0].at_index+1,s[1].at_index+1);return i.push(s[1].point),i.push(s[0].point),[c,i]}if(r.length===1&&o.length===1){o[0].type="v",r[0].type="e";const s=o.concat(r).sort((a,l)=>a.at_index-l.at_index),c=n.slice(s[1].at_index+1).concat(n.slice(0,s[0].at_index+1));s[0].type==="e"&&c.push(s[0].point),c.push(s[1].point);const i=n.slice(s[0].at_index+1,s[1].at_index+1);return s[1].type==="e"&&i.push(s[1].point),i.push(s[0].point),[c,i]}if(o.length===2){const s=o.slice().sort((a,l)=>a.at_index-l.at_index),c=n.slice(s[1].at_index).concat(n.slice(0,s[0].at_index+1)),i=n.slice(s[0].at_index,s[1].at_index+1);return[c,i]}return[n.slice()]},Rc=(n,e,t)=>{const o=n.map((f,d)=>({vector:t[d],origin:f})).map((f,d,m)=>fn(f.vector,f.origin,m[(d+1)%m.length].vector,m[(d+1)%m.length].origin,ae,ae)),r=e.map((f,d)=>S0(f.vector,f.origin,o[d],m=>m));if(n.length===3)return n.map(f=>({type:"skeleton",points:[f,o[0]]})).concat([{type:"perpendicular",points:[r[0],o[0]]}]);const s=o.map((f,d)=>Ot(f,r[d]));let c=0;s.forEach((f,d)=>{f<s[c]&&(c=d)});const i=[{type:"skeleton",points:[n[c],o[c]]},{type:"skeleton",points:[n[(c+1)%n.length],o[c]]},{type:"perpendicular",points:[r[c],o[c]]}],a=j0(St(e[(c+e.length-1)%e.length].vector),e[(c+1)%e.length].vector),l=c===n.length-1;return n.splice(c,2,o[c]),e.splice(c,1),t.splice(c,2,a),l&&(n.splice(0,1),t.splice(0,1),e.push(e.shift())),i.concat(Rc(n,e,t))},Dc=n=>{const e=n.map((o,r,s)=>[o,s[(r+1)%s.length]]).map(o=>({vector:R(o[1],o[0]),origin:o[0]})),t=n.map((o,r,s)=>[(r-1+s.length)%s.length,r,(r+1)%s.length].map(c=>s[c])).map(o=>[R(o[0],o[1]),R(o[2],o[1])]).map(o=>j0(...o));return Rc([...n],e,t)},Ga=(n,e,t,o=!1,r=C)=>{if([n,t].map(i=>Pt(e,i)).reduce((i,a)=>i||a,!1))return o;const c=[[n,e],[e,t]].map(i=>R(i[1],i[0])).map(i=>on(i));return Ee(1,dn(...c),r)};var Ha=Object.freeze({__proto__:null,collinearBetween:Ga});const Ya=(n,e)=>{const t=Math.min(n.min.length,e.min.length);for(let o=0;o<t;o+=1)if(e.min[o]<n.min[o]||e.max[o]>n.max[o])return!1;return!0},Xa=(n,e,t=ie)=>{const o=n.map(s=>Ln(e,s,t)).reduce((s,c)=>s||c,!1),r=e.map(s=>Ln(e,s,t)).reduce((s,c)=>s&&c,!0);return!o&&r};var Za=Object.freeze({__proto__:null,enclosingBoundingBoxes:Ya,enclosingPolygonPolygon:Xa});const Ja=n=>n>=1?0:n<=-1?Math.PI:Math.acos(n),$r=(n,e,t)=>{const o=e[0]-n[0],r=e[1]-n[1],s=o*Math.cos(t)+r*Math.sin(t),c=r*Math.cos(t)-o*Math.sin(t);return[n[0]+s,n[1]+c]},$c=(n,e,t,o,r=C)=>{const s=n<t?n:t,c=n<t?t:n,i=n<t?e:o,a=n<t?o:e,l=[i[0]-a[0],i[1]-a[1]],f=Math.sqrt(l[0]**2+l[1]**2);if(f<r)return;const d=l.map((p,h)=>p/f*c+a[h]);if(Math.abs(c+s-f)<r||Math.abs(c-(s+f))<r)return[d];if(f+s<c||c+s<f)return;const m=Ja((s*s-f*f-c*c)/(-2*f*c)),_=$r(a,d,+m),v=$r(a,d,-m);return[_,v]},Me=(n,e,t,o,r=Nn,s=C)=>{const c=t[0]**2+t[1]**2,i=Math.sqrt(c),a=i===0?t:t.map(h=>h/i),l=Ce(a),f=R(o,e),d=G(f,a);if(Math.abs(d)>n+s)return;const m=Math.sqrt(n**2-d**2),_=(h,g)=>e[g]-l[g]*d+a[g]*h,v=Math.abs(n-Math.abs(d))<s?[m].map(h=>[h,h].map(_)):[-m,m].map(h=>[h,h].map(_)),p=v.map(h=>h.map((g,b)=>g-o[b])).map(h=>h[0]*t[0]+t[1]*h[1]).map(h=>h/c);return v.filter((h,g)=>r(p[g],s))},Wc=n=>{for(let e=1;e<n.length;e+=1)if(!Pt(n[0],n[e]))return[n[0],n[e]]},Wr=(n,e,t,o=tn,r=Nn,s=C)=>{const c=n.map((i,a,l)=>[i,l[(a+1)%l.length]]).map(i=>fn(R(i[1],i[0]),i[0],e,t,o,r,s)).filter(i=>i!==void 0);switch(c.length){case 0:return;case 1:return[c];default:return Wc(c)||[c[0]]}},be=(n,e,t,o=tn,r=Pn,s=C)=>{const c=Wr(n,e,t,o,r,s);let i;switch(r){case ae:i=m0;break;case ke:i=tn;break;default:return c}const a=Wr(n,e,t,tn,i,s);if(a===void 0)return;const l=Wc(a);if(l===void 0)switch(r){case ae:return Ln(n,t,X,s)?a:void 0;case ke:return Ln(n,On(t,e),X,s)||Ln(n,t,X,s)?a:void 0;case Pn:return;default:return}return Ln(n,P0(...l),X,s)?l:c},Ur={polygon:n=>[n],rect:n=>[n],circle:n=>[n.radius,n.origin],line:n=>[n.vector,n.origin],ray:n=>[n.vector,n.origin],segment:n=>[n.vector,n.origin]},Ka={polygon:{line:(n,e,t,o,r)=>be(...n,...e,tn,o,r),ray:(n,e,t,o,r)=>be(...n,...e,tn,o,r),segment:(n,e,t,o,r)=>be(...n,...e,tn,o,r)},circle:{circle:(n,e,t,o,r)=>$c(...n,...e,r),line:(n,e,t,o,r)=>Me(...n,...e,o,r),ray:(n,e,t,o,r)=>Me(...n,...e,o,r),segment:(n,e,t,o,r)=>Me(...n,...e,o,r)},line:{polygon:(n,e,t,o,r)=>be(...e,...n,tn,t,r),circle:(n,e,t,o,r)=>Me(...e,...n,t,r),line:(n,e,t,o,r)=>fn(...n,...e,t,o,r),ray:(n,e,t,o,r)=>fn(...n,...e,t,o,r),segment:(n,e,t,o,r)=>fn(...n,...e,t,o,r)},ray:{polygon:(n,e,t,o,r)=>be(...e,...n,tn,t,r),circle:(n,e,t,o,r)=>Me(...e,...n,t,r),line:(n,e,t,o,r)=>fn(...e,...n,o,t,r),ray:(n,e,t,o,r)=>fn(...n,...e,t,o,r),segment:(n,e,t,o,r)=>fn(...n,...e,t,o,r)},segment:{polygon:(n,e,t,o,r)=>be(...e,...n,tn,t,r),circle:(n,e,t,o,r)=>Me(...e,...n,t,r),line:(n,e,t,o,r)=>fn(...e,...n,o,t,r),ray:(n,e,t,o,r)=>fn(...e,...n,o,t,r),segment:(n,e,t,o,r)=>fn(...n,...e,t,o,r)}},qr={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment"},Gr={polygon:X,rect:X,circle:X,line:Pn,ray:ae,segment:ke},B0=function(n,e,t){const o=gt(n),r=gt(e),s=qr[o],c=qr[r],i=Ur[o](n),a=Ur[r](e),l=n.domain_function||Gr[o],f=e.domain_function||Gr[r];return Ka[s][c](i,a,l,f,t)},Uc=(n,e,t=C)=>{for(let o=0;o<2;o+=1){const r=o===0?n:e,s=o===0?e:n;for(let c=0;c<r.length;c+=1){const i=r[c],a=Ce(R(r[(c+1)%r.length],r[c])),l=s.map(v=>R(v,i)).map(v=>dn(a,v)),f=r[(c+2)%r.length],m=dn(a,R(f,i))>0;if(l.map(v=>m?v<t:v>-t).reduce((v,p)=>v&&p,!0))return!1}}return!0},Hr=(n,e,t,o=X,r=C)=>o(n-se(e,t),r),Bn=(n,e,t,o,r=Pn,s=Pn,c=C)=>{const i=G(n,t),a=-i,l=[o[0]-e[0],o[1]-e[1]];if(Math.abs(i)<c){if(Math.abs(G(l,n))>c)return!1;const _=l,v=On(_,t),p=dn(n,n),h=dn(_,n)/p,g=dn(v,n)/p,b=h<g?h:g,M=h<g?g:h,x=b>1-c,L=M<c;return!(x||L)}const f=[-l[0],-l[1]],d=G(l,t)/i,m=G(f,n)/a;return r(d,c/mn(n))&&s(m,c/mn(t))},Yr={polygon:n=>[n],rect:n=>[n],circle:n=>[n.radius,n.origin],line:n=>[n.vector,n.origin],ray:n=>[n.vector,n.origin],segment:n=>[n.vector,n.origin],vector:n=>[n]},Qa={polygon:{polygon:(n,e,t,o,r)=>Uc(...n,...e,r),vector:(n,e,t,o,r)=>Ln(...n,...e,t,r)},circle:{vector:(n,e,t,o,r)=>Hr(...n,...e,X,r)},line:{line:(n,e,t,o,r)=>Bn(...n,...e,t,o,r),ray:(n,e,t,o,r)=>Bn(...n,...e,t,o,r),segment:(n,e,t,o,r)=>Bn(...n,...e,t,o,r),vector:(n,e,t,o,r)=>Yn(...n,...e,t,r)},ray:{line:(n,e,t,o,r)=>Bn(...e,...n,o,t,r),ray:(n,e,t,o,r)=>Bn(...n,...e,t,o,r),segment:(n,e,t,o,r)=>Bn(...n,...e,t,o,r),vector:(n,e,t,o,r)=>Yn(...n,...e,t,r)},segment:{line:(n,e,t,o,r)=>Bn(...e,...n,o,t,r),ray:(n,e,t,o,r)=>Bn(...e,...n,o,t,r),segment:(n,e,t,o,r)=>Bn(...n,...e,t,o,r),vector:(n,e,t,o,r)=>Yn(...n,...e,t,r)},vector:{polygon:(n,e,t,o,r)=>Ln(...e,...n,o,r),circle:(n,e,t,o,r)=>Hr(...e,...n,X,r),line:(n,e,t,o,r)=>Yn(...e,...n,o,r),ray:(n,e,t,o,r)=>Yn(...e,...n,o,r),segment:(n,e,t,o,r)=>Yn(...e,...n,o,r),vector:(n,e,t,o,r)=>Pt(...n,...e,r)}},Xr={polygon:"polygon",rect:"polygon",circle:"circle",line:"line",ray:"ray",segment:"segment",vector:"vector"},Zr={polygon:X,rect:X,circle:X,line:Pn,ray:ae,segment:ke,vector:Pn},Ze=function(n,e,t){const o=gt(n),r=gt(e),s=Xr[o],c=Xr[r],i=Yr[o](n),a=Yr[r](e),l=n.domain_function||Zr[o],f=e.domain_function||Zr[r];return Qa[s][c](i,a,l,f,t)},n4=(n,e)=>{const t=Math.min(n.min.length,e.min.length);for(let o=0;o<t;o+=1)if(n.min[o]>e.max[o]||n.max[o]<e.min[o])return!1;return!0},e4=function(){this.push(...D(arguments))},t4={x:function(){return this[0]},y:function(){return this[1]},z:function(){return this[2]}},v0={preserve:{magnitude:function(){return mn(this)},isEquivalent:function(){return Pt(this,D(arguments))},isParallel:function(){return He(...Zn(this,D(arguments)))},isCollinear:function(n){return Ze(this,n)},dot:function(){return dn(...Zn(this,D(arguments)))},distanceTo:function(){return Ot(...Zn(this,D(arguments)))},overlap:function(n){return Ze(this,n)}},vector:{copy:function(){return[...this]},normalize:function(){return on(this)},scale:function(){return Rn(this,arguments[0])},flip:function(){return St(this)},rotate90:function(){return Ce(this)},rotate270:function(){return O0(this)},cross:function(){return _t(T(3,this),T(3,D(arguments)))},transform:function(){return we(le(arguments),T(3,this))},add:function(){return On(this,T(this.length,D(arguments)))},subtract:function(){return R(this,T(this.length,D(arguments)))},rotateZ:function(n,e){return we(le(xc(n,e)),T(3,this))},lerp:function(n,e){return no(this,T(this.length,D(n)),e)},midpoint:function(){return P0(...Zn(this,D(arguments)))},bisect:function(){return mo(this,D(arguments))}}},vo={};Object.keys(v0.preserve).forEach(n=>{vo[n]=v0.preserve[n]});Object.keys(v0.vector).forEach(n=>{vo[n]=function(){return A.vector(...v0.vector[n].apply(this,arguments))}});const o4={fromAngle:function(n){return A.vector(Math.cos(n),Math.sin(n))},fromAngleDegrees:function(n){return A.vector.fromAngle(n*Ys)}};var r4={vector:{P:Array.prototype,A:e4,G:t4,M:vo,S:o4}},qc={fromPoints:function(){const n=Xe(arguments);return this.constructor({vector:R(n[1],n[0]),origin:n[0]})},fromAngle:function(){const n=arguments[0]||0;return this.constructor({vector:[Math.cos(n),Math.sin(n)],origin:[0,0]})},perpendicularBisector:function(){const n=Xe(arguments);return this.constructor({vector:Ce(R(n[1],n[0])),origin:Q1(n[0],n[1])})}};const Mo={isParallel:function(){const n=Zn(this.vector,wn(arguments).vector);return He(...n)},isCollinear:function(){const n=wn(arguments);return Yn(this.vector,this.origin,n.origin)&&He(...Zn(this.vector,n.vector))},isDegenerate:function(n=C){return tc(this.vector,n)},reflectionMatrix:function(){return A.matrix(so(this.vector,this.origin))},nearestPoint:function(){const n=D(arguments);return A.vector(S0(this.vector,this.origin,n,this.clip_function))},transform:function(){const n=this.dimension,e=to(le(arguments),T(3,this.vector),T(3,this.origin));return this.constructor(T(n,e.vector),T(n,e.origin))},translate:function(){const n=On(...Zn(this.origin,D(arguments)));return this.constructor(this.vector,n)},intersect:function(){return B0(this,...arguments)},overlap:function(){return Ze(this,...arguments)},bisect:function(n,e){const t=wn(n);return Cc(this.vector,this.origin,t.vector,t.origin,e).map(o=>this.constructor(o))}};var s4={line:{P:Object.prototype,A:function(){const n=wn(...arguments);this.vector=A.vector(n.vector),this.origin=A.vector(T(this.vector.length,n.origin));const e=pc({vector:this.vector,origin:this.origin});this.normal=e.normal,this.distance=e.distance,Object.defineProperty(this,"domain_function",{writable:!0,value:Nn})},G:{dimension:function(){return[this.vector,this.origin].map(n=>n.length).reduce((n,e)=>Math.max(n,e),0)}},M:Object.assign({},Mo,{inclusive:function(){return this.domain_function=Nn,this},exclusive:function(){return this.domain_function=Pn,this},clip_function:n=>n,svgPath:function(n=2e4){const e=On(this.origin,Rn(this.vector,-n/2)),t=Rn(this.vector,n);return`M${e[0]} ${e[1]}l${t[0]} ${t[1]}`}}),S:Object.assign({fromNormalDistance:function(){return this.constructor(gc(arguments[0]))}},qc)}},c4={ray:{P:Object.prototype,A:function(){const n=wn(...arguments);this.vector=A.vector(n.vector),this.origin=A.vector(T(this.vector.length,n.origin)),Object.defineProperty(this,"domain_function",{writable:!0,value:m0})},G:{dimension:function(){return[this.vector,this.origin].map(n=>n.length).reduce((n,e)=>Math.max(n,e),0)}},M:Object.assign({},Mo,{inclusive:function(){return this.domain_function=m0,this},exclusive:function(){return this.domain_function=ae,this},flip:function(){return A.ray(St(this.vector),this.origin)},scale:function(n){return A.ray(this.vector.scale(n),this.origin)},normalize:function(){return A.ray(this.vector.normalize(),this.origin)},clip_function:Xs,svgPath:function(n=1e4){const e=this.vector.scale(n);return`M${this.origin[0]} ${this.origin[1]}l${e[0]} ${e[1]}`}}),S:qc}},i4={segment:{P:Array.prototype,A:function(){const n=fc(...arguments);this.push(...[n[0],n[1]].map(e=>A.vector(e))),this.vector=A.vector(R(this[1],this[0])),this.origin=this[0],Object.defineProperty(this,"domain_function",{writable:!0,value:tn})},G:{points:function(){return this},magnitude:function(){return mn(this.vector)},dimension:function(){return[this.vector,this.origin].map(n=>n.length).reduce((n,e)=>Math.max(n,e),0)}},M:Object.assign({},Mo,{inclusive:function(){return this.domain_function=tn,this},exclusive:function(){return this.domain_function=ke,this},clip_function:J1,transform:function(...n){const e=this.points[0].length,t=le(n),o=this.points.map(r=>T(3,r)).map(r=>we(t,r)).map(r=>T(e,r));return A.segment(o)},translate:function(){const n=D(arguments),e=this.points.map(t=>On(...Zn(t,n)));return A.segment(e)},midpoint:function(){return A.vector(Q1(this.points[0],this.points[1]))},svgPath:function(){const n=this.points.map(e=>`${e[0]} ${e[1]}`);return["M","L"].map((e,t)=>`${e}${n[t]}`).join("")}}),S:{fromPoints:function(){return this.constructor(...arguments)}}}};const a4=function(){const n=mc(...arguments);this.radius=n.radius,this.origin=A.vector(...n.origin)},l4={x:function(){return this.origin[0]},y:function(){return this.origin[1]},z:function(){return this.origin[2]}},i0=function(n,e,t,o,r,s){const c=Math.cos(r),i=Math.sin(r),a=Math.cos(s),l=Math.sin(s);return[n+c*t*a+-i*o*l,e+i*t*a+c*o*l]},Gc=function(n,e,t,o,r,s,c){let i=s;if(i<0&&!Number.isNaN(i))for(;i<0;)i+=Math.PI*2;const a=c>Math.PI*2?Math.PI*2:c,l=i0(n,e,t,o,r,i),f=i0(n,e,t,o,r,i+a/2),d=i0(n,e,t,o,r,i+a),m=a/2>Math.PI?1:0,_=a/2>0?1:0;return{x1:l[0],y1:l[1],x2:f[0],y2:f[1],x3:d[0],y3:d[1],fa:m,fs:_}},_e=n=>H1(n,4),M0=(n,e,t,o,r,s,c)=>`A${_e(n)} ${_e(e)} ${_e(t)} ${_e(o)} ${_e(r)} ${_e(s)} ${_e(c)}`,u4={nearestPoint:function(){return A.vector(Mc(this.radius,this.origin,D(arguments)))},intersect:function(n){return B0(this,n)},overlap:function(n){return Ze(this,n)},svgPath:function(n=0,e=Math.PI*2){const t=Gc(this.origin[0],this.origin[1],this.radius,this.radius,0,n,e),o=M0(this.radius,this.radius,0,t.fa,t.fs,t.x2,t.y2),r=M0(this.radius,this.radius,0,t.fa,t.fs,t.x3,t.y3);return`M${t.x1} ${t.y1}${o}${r}`},points:function(n=128){return Array.from(Array(n)).map((e,t)=>2*Math.PI/n*t).map(e=>[this.origin[0]+this.radius*Math.cos(e),this.origin[1]+this.radius*Math.sin(e)])},polygon:function(){return A.polygon(this.points(arguments[0]))},segments:function(){const n=this.points(arguments[0]);return n.map((e,t)=>{const o=(t+1)%n.length;return[e,n[o]]})}},f4={fromPoints:function(){if(arguments.length===3){const n=w1(...arguments);return this.constructor(n.radius,n.origin)}return this.constructor(...arguments)},fromThreePoints:function(){const n=w1(...arguments);return this.constructor(n.radius,n.origin)}};var d4={circle:{A:a4,G:l4,M:u4,S:f4}};const m4=function(n,e,t,o){const r=e>t,s=r?e**2-t**2:t**2-e**2,c=Math.sqrt(s),i=r?Math.cos(o):Math.sin(o),a=r?Math.sin(o):Math.cos(o);return[A.vector(n[0]+c*i,n[1]+c*a),A.vector(n[0]-c*i,n[1]-c*a)]};var h4={ellipse:{A:function(){const n=ce(arguments).filter(t=>!Number.isNaN(t)),e=T(5,n);this.rx=e[0],this.ry=e[1],this.origin=A.vector(e[2],e[3]),this.spin=e[4],this.foci=m4(this.origin,this.rx,this.ry,this.spin)},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]}},M:{svgPath:function(n=0,e=Math.PI*2){const t=Gc(this.origin[0],this.origin[1],this.rx,this.ry,this.spin,n,e),o=M0(this.rx,this.ry,this.spin/Math.PI*180,t.fa,t.fs,t.x2,t.y2),r=M0(this.rx,this.ry,this.spin/Math.PI*180,t.fa,t.fs,t.x3,t.y3);return`M${t.x1} ${t.y1}${o}${r}`},points:function(n=128){return Array.from(Array(n)).map((e,t)=>2*Math.PI/n*t).map(e=>i0(this.origin.x,this.origin.y,this.rx,this.ry,this.spin,e))},polygon:function(){return A.polygon(this.points(arguments[0]))},segments:function(){const n=this.points(arguments[0]);return n.map((e,t)=>{const o=(t+1)%n.length;return[e,n[o]]})}},S:{}}};const Hc={area:function(){return go(this)},centroid:function(){return A.vector(c0(this))},boundingBox:function(){return _o(this)},straightSkeleton:function(){return Dc(this)},scale:function(n,e=c0(this)){const t=this.map(o=>[0,1].map((r,s)=>o[s]-e[s])).map(o=>o.map((r,s)=>e[s]+o[s]*n));return this.constructor.fromPoints(t)},rotate:function(n,e=c0(this)){const t=this.map(o=>{const r=[o[0]-e[0],o[1]-e[1]],s=Math.sqrt(r[0]**2+r[1]**2),c=Math.atan2(r[1],r[0]);return[e[0]+Math.cos(c+n)*s,e[1]+Math.sin(c+n)*s]});return A.polygon(t)},translate:function(){const n=D(...arguments),e=this.map(t=>t.map((o,r)=>o+n[r]));return this.constructor.fromPoints(e)},transform:function(){const n=le(...arguments),e=this.map(t=>we(n,T(3,t)));return A.polygon(e)},nearest:function(){const n=D(...arguments),e=vc(this,n);return e===void 0?void 0:Object.assign(e,{edge:this.sides[e.i]})},split:function(){const n=wn(...arguments);return Nc(this,n.vector,n.origin).map(t=>A.polygon(t))},overlap:function(){return Ze(this,...arguments)},intersect:function(){return B0(this,...arguments)},clip:function(n,e){const t=n.domain_function?n.domain_function:Nn,o=wc(this,n.vector,n.origin,this.domain_function,t,e);return o?A.segment(o):void 0},svgPath:function(){const n=Array(this.length).fill("L");return n[0]="M",`${this.map((e,t)=>`${n[t]}${e[0]} ${e[1]}`).join("")}z`}},p4=n=>[[n.x,n.y],[n.x+n.width,n.y],[n.x+n.width,n.y+n.height],[n.x,n.y+n.height]],g4=n=>[[[n.x,n.y],[n.x+n.width,n.y]],[[n.x+n.width,n.y],[n.x+n.width,n.y+n.height]],[[n.x+n.width,n.y+n.height],[n.x,n.y+n.height]],[[n.x,n.y+n.height],[n.x,n.y]]];var _4={rect:{P:Array.prototype,A:function(){const n=dc(...arguments);this.width=n.width,this.height=n.height,this.origin=A.vector(n.x,n.y),this.push(...p4(this)),Object.defineProperty(this,"domain_function",{writable:!0,value:ie})},G:{x:function(){return this.origin[0]},y:function(){return this.origin[1]},center:function(){return A.vector(this.origin[0]+this.width/2,this.origin[1]+this.height/2)}},M:Object.assign({},Hc,{inclusive:function(){return this.domain_function=ie,this},exclusive:function(){return this.domain_function=X,this},area:function(){return this.width*this.height},segments:function(){return g4(this)},svgPath:function(){return`M${this.origin.join(" ")}h${this.width}v${this.height}h${-this.width}Z`}}),S:{fromPoints:function(){const n=_o(Xe(arguments));return A.rect(n.min[0],n.min[1],n.span[0],n.span[1])}}}},v4={polygon:{P:Array.prototype,A:function(){this.push(...Jn(arguments)),this.sides=this.map((n,e,t)=>[n,t[(e+1)%t.length]]),this.vectors=this.sides.map(n=>R(n[1],n[0])),Object.defineProperty(this,"domain_function",{writable:!0,value:ie})},G:{isConvex:function(){},points:function(){return this}},M:Object.assign({},Hc,{inclusive:function(){return this.domain_function=ie,this},exclusive:function(){return this.domain_function=X,this},segments:function(){return this.sides}}),S:{fromPoints:function(){return this.constructor(...arguments)},regularPolygon:function(){return this.constructor(C0(...arguments))},convexHull:function(){return this.constructor(zc(...arguments))}}}},M4={polyline:{P:Array.prototype,A:function(){this.push(...Jn(arguments))},G:{points:function(){return this}},M:{svgPath:function(){const n=Array(this.length).fill("L");return n[0]="M",`${this.map((e,t)=>`${n[t]}${e[0]} ${e[1]}`).join("")}`}},S:{fromPoints:function(){return this.constructor(...arguments)}}}};const Cn=(n,e)=>{for(let t=0;t<12;t+=1)n[t]=e[t];return n};var b4={matrix:{P:Array.prototype,A:function(){le(arguments).forEach(n=>this.push(n))},G:{},M:{copy:function(){return A.matrix(...Array.from(this))},set:function(){return Cn(this,le(arguments))},isIdentity:function(){return oc(this)},multiply:function(n){return Cn(this,xn(this,n))},determinant:function(){return oo(this)},inverse:function(){return Cn(this,rc(this))},translate:function(n,e,t){return Cn(this,xn(this,sc(n,e,t)))},rotateX:function(n){return Cn(this,xn(this,cc(n)))},rotateY:function(n){return Cn(this,xn(this,ic(n)))},rotateZ:function(n){return Cn(this,xn(this,ac(n)))},rotate:function(n,e,t){const o=lc(n,e,t);return Cn(this,xn(this,o))},scale:function(...n){return Cn(this,xn(this,uc(...n)))},reflectZ:function(n,e){const t=so(n,e);return Cn(this,xn(this,t))},transform:function(...n){return A.vector(we(this,T(3,D(n))))},transformVector:function(n){return A.vector(we(this,T(3,D(n))))},transformLine:function(...n){const e=wn(n);return A.line(to(this,e.vector,e.origin))}},S:{}}};const gn=Object.assign({},r4,s4,c4,i4,d4,h4,_4,v4,M4,b4),$n=function(n,e){const t=Object.create(gn[n].proto);return gn[n].A.apply(t,e),t},y4=function(){return $n("vector",arguments)},V4=function(){return $n("line",arguments)},x4=function(){return $n("ray",arguments)},E4=function(){return $n("segment",arguments)},k4=function(){return $n("circle",arguments)},w4=function(){return $n("ellipse",arguments)},A4=function(){return $n("rect",arguments)},P4=function(){return $n("polygon",arguments)},O4=function(){return $n("polyline",arguments)},S4=function(){return $n("matrix",arguments)};Object.assign(A,{vector:y4,line:V4,ray:x4,segment:E4,circle:k4,ellipse:w4,rect:A4,polygon:P4,polyline:O4,matrix:S4});Object.keys(gn).forEach(n=>{const e={};e.prototype=gn[n].P!=null?Object.create(gn[n].P):Object.create(Object.prototype),e.prototype.constructor=e,A[n].prototype=e.prototype,A[n].prototype.constructor=A[n],Object.keys(gn[n].G).forEach(t=>Object.defineProperty(e.prototype,t,{get:gn[n].G[t]})),Object.keys(gn[n].M).forEach(t=>Object.defineProperty(e.prototype,t,{value:gn[n].M[t]})),Object.keys(gn[n].S).forEach(t=>Object.defineProperty(A[n],t,{value:gn[n].S[t].bind(A[n].prototype)})),gn[n].proto=e.prototype});const u=A;u.core=Object.assign(Object.create(null),C3,S3,G3,I3,$3,Q3,Dr,La,Na,qa,Dr,aa,W3,xa,wa,J3,H3,Ha,Za,{intersectConvexPolygonLine:be,intersectCircleCircle:$c,intersectCircleLine:Me,intersectLineLine:fn,overlapConvexPolygons:Uc,overlapConvexPolygonPoint:Ln,overlapBoundingBoxes:n4,overlapLineLine:Bn,overlapLinePoint:Yn,clipLineConvexPolygon:wc,clipPolygonPolygon:Sa,splitConvexPolygon:Nc,straightSkeleton:Dc});u.typeof=gt;u.intersect=B0;u.overlap=Ze;const j4=function(n,e){const t=this;Object.defineProperty(n,"degree",{get:()=>t.vertices_vertices&&t.vertices_vertices[e]?t.vertices_vertices[e].length:null})},C4=function(n,e){const t=this;Object.defineProperty(n,"coords",{get:()=>{if(!(!t.edges_vertices||!t.edges_vertices[e]||!t.vertices_coords))return t.edges_vertices[e].map(o=>t.vertices_coords[o])}})},B4=function(n,e){const t=this;Object.defineProperty(n,"simple",{get:()=>{if(!t.faces_vertices||!t.faces_vertices[e])return null;for(let o=0;o<n.length-1;o+=1)for(let r=o+1;r<n.length;r+=1)if(t.faces_vertices[e][o]===t.faces_vertices[e][r])return!1;return!0}})},F4=function(n,e){const t=this;Object.defineProperty(n,"coords",{get:()=>{if(!(!t.faces_vertices||!t.faces_vertices[e]||!t.vertices_coords))return t.faces_vertices[e].map(o=>t.vertices_coords[o])}})},L4=function(n,e){return j4.call(this,n,e),n},z4=function(n,e){return C4.call(this,n,e),n},I4=function(n,e){return B4.call(this,n,e),F4.call(this,n,e),n};var T4={vertices:L4,edges:z4,faces:I4};const c1=1.1,i1="Rabbit Ear",$e={file:["file_spec","file_creator","file_author","file_title","file_description","file_classes","file_frames"],frame:["frame_author","frame_title","frame_description","frame_attributes","frame_classes","frame_unit","frame_parent","frame_inherit"],graph:["vertices_coords","vertices_vertices","vertices_faces","edges_vertices","edges_faces","edges_assignment","edges_foldAngle","edges_length","faces_vertices","faces_edges","vertices_edges","edges_edges","faces_faces"],orders:["edgeOrders","faceOrders"]},Yc=Object.freeze([].concat($e.file).concat($e.frame).concat($e.graph).concat($e.orders)),N4=Object.freeze(["edges_vector","vertices_sectors","faces_sectors","faces_matrix"]),R4=["singleModel","multiModel","animation","diagrams"],D4=["creasePattern","foldedForm","graph","linkage"],$4=["2D","3D","abstract","manifold","nonManifold","orientable","nonOrientable","selfTouching","nonSelfTouching","selfIntersecting","nonSelfIntersecting"],W4=Array.from("MmVvBbFfUu"),vt={vertices:"vertex",edges:"edge",faces:"face"},U4={vertex:"vertices",edge:"edges",face:"faces"},zn={b:"boundary",m:"mountain",v:"valley",f:"flat",u:"unassigned"};W4.forEach(n=>{zn[n.toUpperCase()]=zn[n]});const Xc={M:-180,m:-180,V:180,v:180,B:0,b:0,F:0,f:0,U:0,u:0},Mt=n=>Xc[n]||0,bo=n=>n>u.core.EPSILON?"V":n<-u.core.EPSILON?"M":"U",yo=n=>u.core.fnEpsilonEqual(0,n)||u.core.fnEpsilonEqual(-180,n)||u.core.fnEpsilonEqual(180,n),Zc=({edges_foldAngle:n})=>{if(!n)return!0;for(let e=0;e<n.length;e+=1)if(!yo(n[e]))return!1;return!0},b0=(n,e)=>Object.keys(n).map(t=>t.substring(t.length-e.length,t.length)===e?t:void 0).filter(t=>t!==void 0),F0=(n,e)=>Object.keys(n).map(t=>t.substring(0,e.length)===e?t:void 0).filter(t=>t!==void 0),Be=(n,e)=>F0(n,`${e}_`),jt=(n,e)=>b0(n,`_${e}`),Jc=(n,e)=>{const t=Be(n,e);if(t.length===0)return[];const o=Math.max(...t.map(s=>n[s].length)),r=Array.from(Array(o)).map(()=>({}));return t.forEach(s=>r.forEach((c,i)=>{r[i][s]=n[s][i]})),r},q4=function(n,e,t){const o=Be(n,e);if(o.length===0)return;const r={};return o.forEach(s=>{r[s]=n[s][t]}),r},Kc=(n={})=>Object.keys(n).length===0?0:[].concat(Yc,N4).filter(e=>n[e]).length/Object.keys(n).length;var G4=Object.freeze({__proto__:null,singularize:vt,pluralize:U4,edgesAssignmentNames:zn,edgesAssignmentDegrees:Xc,edgeAssignmentToFoldAngle:Mt,edgeFoldAngleToAssignment:bo,edgeFoldAngleIsFlat:yo,edgesFoldAngleAreAllFlat:Zc,filterKeysWithSuffix:b0,filterKeysWithPrefix:F0,getGraphKeysWithPrefix:Be,getGraphKeysWithSuffix:jt,transposeGraphArrays:Jc,transposeGraphArrayAtIndex:q4,isFoldObject:Kc});const H4=(n,e,t=u.core.EPSILON)=>{const o=n.length;for(let r=0;r<o;r+=1)if(Math.abs(n[r]-e[r])>t)return!1;return!0},Vo=({vertices_coords:n},e=u.core.EPSILON)=>{if(!n)return[];const t=n.map(()=>[]);for(let a=0;a<n.length-1;a+=1)for(let l=a+1;l<n.length;l+=1)t[a][l]=H4(n[a],n[l],e);const o=t.map(a=>a.map((l,f)=>l?f:void 0).filter(l=>l!==void 0)),r=[],s=Array(n.length).fill(!1);let c=0;const i=(a,l)=>{if(!(s[l]||c===n.length))for(s[l]=!0,c+=1,r[a]||(r[a]=[]),r[a].push(l);o[l].length>0;)i(a,o[l][0]),o[l].splice(0,1)};for(let a=0;a<n.length&&(i(a,a),c!==n.length);a+=1);return r.filter(a=>a.length)},L0=(...n)=>Math.max(0,...n.filter(e=>e!==void 0).map(e=>e.length)),In=(n,e)=>L0(...Be(n,e).map(t=>n[t]));In.vertices=({vertices_coords:n,vertices_faces:e,vertices_vertices:t})=>L0(n,e,t);In.edges=({edges_vertices:n,edges_edges:e,edges_faces:t})=>L0(n,e,t);In.faces=({faces_vertices:n,faces_edges:e,faces_faces:t})=>L0(n,e,t);const z0=n=>{const e={};return n.forEach(t=>{e[t]=!0}),Object.keys(e).map(t=>parseInt(t,10))},Ct=n=>z0(n).sort((e,t)=>e-t),Qc=(n,e)=>(e.sort((t,o)=>t-o),[n.slice(e[1]).concat(n.slice(0,e[0]+1)),n.slice(e[0],e[1]+1)]),Y4=n=>{if(n.length===1)return n[0];const e=n.map(o=>o.length);let t=0;for(let o=0;o<n.length;o+=1)e[o]>e[t]&&(t=o);return n[t]},n2=n=>{const e={};return n.forEach(t=>{e[t]===void 0&&(e[t]=0),e[t]+=1}),n.filter(t=>e[t]>1)},xo=n=>n.map(e=>e.map((t,o)=>t===!0?o:void 0).filter(t=>t!==void 0)),Eo=n=>{const e=[];for(let t=0;t<n.length-1;t+=1)for(let o=t+1;o<n.length;o+=1)n[t][o]&&e.push([t,o]);return e},X4=n=>{const e=[],t=(o,r)=>e[o]!==void 0?0:(e[o]=r,n[o].forEach(s=>t(s,r)),1);for(let o=0,r=0;o<n.length;o+=1)o in n&&(r+=t(o,r));return e},Z4=n=>{const e=n.map(i=>i!==void 0);if(e.reduce((i,a)=>i&&a,!0))return[[0,n.length-1]];const t=e.map((i,a,l)=>i&&!l[(a-1+l.length)%l.length]),o=t.reduce((i,a)=>i+(a?1:0),0),r=Array(o),s=Array(o).fill(0);let c=e[0]&&e[n.length-1]?0:o-1;return e.forEach((i,a)=>{c=(c+(t[a]?1:0))%s.length,s[c]+=e[a]?1:0,t[a]&&(r[c]=a)}),r.map((i,a)=>[i,(i+s[a]-1)%n.length])};var J4=Object.freeze({__proto__:null,uniqueIntegers:z0,uniqueSortedIntegers:Ct,splitCircularArray:Qc,getLongestArray:Y4,removeSingleInstances:n2,booleanMatrixToIndexedArray:xo,booleanMatrixToUniqueIndexPairs:Eo,makeSelfRelationalArrayClusters:X4,circularArrayValidRanges:Z4});const vn=(n,e,t)=>{const o=In(n,e),r=Ct(t),s=[];let c,i,a;for(c=0,i=0,a=0;c<o;c+=1,i+=1){for(;c===r[a];)s[c]=void 0,c+=1,a+=1;c<o&&(s[c]=i)}return jt(n,e).forEach(l=>n[l].forEach((f,d)=>n[l][d].forEach((m,_)=>{n[l][d][_]=s[m]}))),r.reverse(),Be(n,e).forEach(l=>r.forEach(f=>n[l].splice(f,1))),s},ko=(n,e,t)=>{const o=In(n,e),r=Object.keys(t).map(f=>parseInt(f,10)),s=Ct(r),c=[];let i,a,l;for(i=0,a=0,l=0;i<o;i+=1,a+=1){for(;i===s[l];)c[i]=c[t[s[l]]],c[i]===void 0&&console.log("replace() found an undefined",c),i+=1,l+=1;i<o&&(c[i]=a)}return jt(n,e).forEach(f=>n[f].forEach((d,m)=>n[f][m].forEach((_,v)=>{n[f][m][v]=c[_]}))),s.reverse(),Be(n,e).forEach(f=>s.forEach(d=>n[f].splice(d,1))),c},e2=(n,e)=>Vo(n,e).filter(t=>t.length>1),K4=({vertices_coords:n,edges_vertices:e})=>{if(!n||!e)return[];let t=n.length;const o=Array(t).fill(!1);return e.forEach(r=>{r.filter(s=>!o[s]).forEach(s=>{o[s]=!0,t-=1})}),o.map((r,s)=>r?void 0:s).filter(r=>r!==void 0)},Q4=({vertices_coords:n,faces_vertices:e})=>{if(!n||!e)return[];let t=n.length;const o=Array(t).fill(!1);return e.forEach(r=>{r.filter(s=>!o[s]).forEach(s=>{o[s]=!0,t-=1})}),o.map((r,s)=>r?void 0:s).filter(r=>r!==void 0)},wo=({vertices_coords:n,edges_vertices:e,faces_vertices:t})=>{if(!n)return[];let o=n.length;const r=Array(o).fill(!1);return e&&e.forEach(s=>{s.filter(c=>!r[c]).forEach(c=>{r[c]=!0,o-=1})}),t&&t.forEach(s=>{s.filter(c=>!r[c]).forEach(c=>{r[c]=!0,o-=1})}),r.map((s,c)=>s?void 0:c).filter(s=>s!==void 0)},t2=(n,e)=>(e||(e=wo(n)),{map:vn(n,Qn,e),remove:e}),Ao=(n,e=u.core.EPSILON)=>{const t=[],o=[],r=Vo(n,e).filter(s=>s.length>1);return r.forEach(s=>{for(let c=1;c<s.length;c+=1)t[s[c]]=s[0],o.push(s[c])}),r.map(s=>s.map(c=>n.vertices_coords[c])).map(s=>u.core.average(...s)).forEach((s,c)=>{n.vertices_coords[r[c][0]]=s}),{map:ko(n,Qn,t),remove:o}};var n5=Object.freeze({__proto__:null,getDuplicateVertices:e2,getEdgeIsolatedVertices:K4,getFaceIsolatedVertices:Q4,getIsolatedVertices:wo,removeIsolatedVertices:t2,removeDuplicateVertices:Ao});const e5=n=>{let e=-1;return n.filter(t=>t!==void 0).forEach(t=>t.forEach(o=>o.forEach(r=>{r>e&&(e=r)}))),e},t5=n=>{let e=-1;return n.forEach(t=>{t[0]>e&&(e=t[0]),t[1]>e&&(e=t[1])}),e},Jr={edges:"edgeOrders",faces:"faceOrders"},Mn=(n,e)=>Math.max(e5(jt(n,e).map(t=>n[t])),n[Jr[e]]?t5(n[Jr[e]]):-1)+1;Mn.vertices=n=>Mn(n,Qn);Mn.edges=n=>Mn(n,An);Mn.faces=n=>Mn(n,me);const Po=({vertices_vertices:n,vertices_sectors:e},t,o,r={})=>{const s={},c={vertices:[t],edges:[],angles:[]};let i=t,a=o;for(;;){const l=n[a],d=(l.indexOf(i)+l.length-1)%l.length,m=l[d],_=`${a} ${m}`;if(s[_])return Object.assign(r,s),c.vertices.pop(),c;if(s[_]=!0,r[_])return;c.vertices.push(a),c.edges.push(_),e&&c.angles.push(e[a][d]),i=a,a=m}},o2=({vertices_vertices:n,vertices_sectors:e})=>{const t={vertices_vertices:n,vertices_sectors:e},o={};return n.map((r,s)=>r.map(c=>Po(t,s,c,o)).filter(c=>c!==void 0)).flat()},Oo=n=>n.filter(e=>e.angles.map(t=>Math.PI-t).reduce((t,o)=>t+o,0)>0);var o5=Object.freeze({__proto__:null,counterClockwiseWalk:Po,planarVertexWalk:o2,filterWalkedBoundaryFace:Oo});const bt=({vertices_coords:n},e,t)=>e.map(o=>n[o]).map(o=>u.core.subtract(o,n[t])).map(o=>Math.atan2(o[1],o[0])).map(o=>o>-u.core.EPSILON?o:o+Math.PI*2).map((o,r)=>({a:o,i:r})).sort((o,r)=>o.a-r.a).map(o=>o.i).map(o=>e[o]),So=({vertices_coords:n},e,t)=>e.map(o=>({i:o,d:u.core.dot(n[o],t)})).sort((o,r)=>o.d-r.d).map(o=>o.i);var r5=Object.freeze({__proto__:null,sortVerticesCounterClockwise:bt,sortVerticesAlongVector:So});const he=({edges_vertices:n})=>{const e=[];return n.forEach((t,o)=>t.forEach(r=>{e[r]===void 0&&(e[r]=[]),e[r].push(o)})),e},jo=({edges_vertices:n,vertices_vertices:e})=>{const t=yn({edges_vertices:n});return e.map((o,r)=>o.map(s=>t[`${r} ${s}`]))},tt=({vertices_coords:n,vertices_edges:e,edges_vertices:t})=>{e||(e=he({edges_vertices:t}));const o=e.map((r,s)=>r.map(c=>t[c].filter(i=>i!==s)).reduce((c,i)=>c.concat(i),[]));return n===void 0?o:o.map((r,s)=>bt({vertices_coords:n},r,s))},r2=({vertices_coords:n,faces_vertices:e})=>{if(!e)return n.map(()=>[]);const t=n!==void 0?n.map(()=>[]):Array.from(Array(Mn.vertices({faces_vertices:e}))).map(()=>[]);return e.forEach((o,r)=>{const s=[];o.forEach(c=>{s[c]=r}),s.forEach((c,i)=>t[i].push(c))}),t},ot=({vertices_coords:n,vertices_vertices:e,faces_vertices:t})=>{if(!t)return n.map(()=>[]);if(!e)return r2({vertices_coords:n,faces_vertices:t});const o=c2({faces_vertices:t});return e.map((r,s)=>r.map((c,i,a)=>[a[(i+1)%a.length],s,c].join(" "))).map(r=>r.map(s=>o[s]))},yn=({edges_vertices:n})=>{const e={};return n.map(t=>t.join(" ")).forEach((t,o)=>{e[t]=o}),n.map(t=>`${t[1]} ${t[0]}`).forEach((t,o)=>{e[t]=o}),e},s2=({edges_vertices:n})=>{const e={};return n.map(t=>t.join(" ")).forEach((t,o)=>{e[t]=o}),e},c2=({faces_vertices:n})=>{const e={};return n.forEach((t,o)=>t.map((r,s)=>[0,1,2].map(c=>(s+c)%t.length).map(c=>t[c]).join(" ")).forEach(r=>{e[r]=o})),e},Co=({vertices_coords:n,vertices_vertices:e,edges_vertices:t,edges_vector:o})=>{o||(o=Wn({vertices_coords:n,edges_vertices:t}));const r=s2({edges_vertices:t});return e.map((s,c)=>e[c].map(i=>{const a=r[`${c} ${i}`],l=r[`${i} ${c}`];if(a!==void 0)return o[a];if(l!==void 0)return u.core.flip(o[l])}))},Bo=({vertices_coords:n,vertices_vertices:e,edges_vertices:t,edges_vector:o})=>Co({vertices_coords:n,vertices_vertices:e,edges_vertices:t,edges_vector:o}).map(r=>r.length===1?[u.core.TWO_PI]:u.core.counterClockwiseSectors2(r)),s5=({edges_vertices:n,vertices_edges:e})=>n.map((t,o)=>{const r=e[t[0]].filter(c=>c!==o),s=e[t[1]].filter(c=>c!==o);return r.concat(s)}),I0=({edges_vertices:n,faces_edges:e})=>{const t=n!==void 0?n.map(()=>[]):Array.from(Array(Mn.edges({faces_edges:e}))).map(()=>[]);return e.forEach((o,r)=>{const s=[];o.forEach(c=>{s[c]=r}),s.forEach((c,i)=>t[i].push(c))}),t},i2=({vertices_coords:n,edges_vertices:e,edges_vector:t,faces_vertices:o,faces_edges:r,faces_center:s})=>{if(!e)return I0({faces_edges:r});t||(t=Wn({vertices_coords:n,edges_vertices:e}));const c=e.map(a=>n[a[0]]);s||(s=N0({vertices_coords:n,faces_vertices:o}));const i=e.map(()=>[]);return r.forEach((a,l)=>{const f=[];a.forEach(d=>{f[d]=l}),f.forEach((d,m)=>i[m].push(d))}),i.forEach((a,l)=>{const f=a.map(d=>s[d]).map(d=>u.core.subtract2(d,c[l])).map(d=>u.core.cross2(d,t[l]));a.sort((d,m)=>f[d]-f[m])}),i},c5={M:-180,m:-180,V:180,v:180},Fo=({edges_foldAngle:n})=>n.map(e=>e===0?"F":e<0?"M":"V"),Lo=({edges_assignment:n})=>n.map(e=>c5[e]||0),i5=({vertices_coords:n,edges_faces:e,faces_vertices:t})=>{const o=m2({vertices_coords:n,faces_vertices:t}),r=N0({vertices_coords:n,faces_vertices:t});return e.map(s=>{if(s.Length<2)return 0;const c=o[s[0]],i=o[s[1]],a=u.core.normalize(u.core.subtract(r[s[1]],r[s[0]])),l=Math.sign(u.core.dot(c,a));return Vector3d.VectorAngle(c,i)*(180/Math.PI)*l})},Bt=({vertices_coords:n,edges_vertices:e})=>e.map(t=>t.map(o=>n[o])),Wn=({vertices_coords:n,edges_vertices:e})=>Bt({vertices_coords:n,edges_vertices:e}).map(t=>u.core.subtract(t[1],t[0])),a2=({vertices_coords:n,edges_vertices:e})=>Wn({vertices_coords:n,edges_vertices:e}).map(t=>u.core.magnitude(t)),rt=({vertices_coords:n,edges_vertices:e,edges_coords:t},o=0)=>(t||(t=Bt({vertices_coords:n,edges_vertices:e})),t.map(r=>u.core.boundingBox(r,o))),l2=({vertices_coords:n,vertices_vertices:e,vertices_edges:t,vertices_sectors:o,edges_vertices:r,edges_vector:s})=>{e||(e=tt({vertices_coords:n,edges_vertices:r,vertices_edges:t})),o||(o=Bo({vertices_coords:n,vertices_vertices:e,edges_vertices:r,edges_vector:s}));const c=yn({edges_vertices:r});return Oo(o2({vertices_vertices:e,vertices_sectors:o})).map(i=>({...i,edges:i.edges.map(a=>c[a])}))},u2=n=>n.faces_edges.map(e=>e.map(t=>n.edges_vertices[t]).map((t,o,r)=>{const s=r[(o+1)%r.length];return t[0]===s[0]||t[0]===s[1]?t[1]:t[0]})),f2=n=>{const e=yn(n);return n.faces_vertices.map(t=>t.map((o,r,s)=>[o,s[(r+1)%s.length]].join(" "))).map(t=>t.map(o=>e[o]))},T0=({faces_vertices:n})=>{const e=n.map(()=>[]),t={};return n.map((o,r)=>o.map((s,c,i)=>{let a=i[(c+1)%o.length];a<s&&([s,a]=[a,s]);const l=`${s} ${a}`;t[l]===void 0&&(t[l]={}),t[l][r]=!0})),Object.values(t).map(o=>Object.keys(o)).filter(o=>o.length>1).forEach(o=>{e[o[0]].push(parseInt(o[1],10)),e[o[1]].push(parseInt(o[0],10))}),e},d2=({vertices_coords:n,faces_vertices:e},t)=>e.map(o=>o.map(r=>n[r])).map(o=>u.core.makePolygonNonCollinear(o,t)),a5=({vertices_coords:n,faces_vertices:e})=>e.map(t=>t.map(o=>n[o])),N0=({vertices_coords:n,faces_vertices:e})=>e.map(t=>t.map(o=>n[o])).map(t=>u.core.centroid(t)),zo=({vertices_coords:n,faces_vertices:e})=>e.map(t=>t.map(o=>n[o]).reduce((o,r)=>[o[0]+r[0],o[1]+r[1]],[0,0]).map(o=>o/t.length)),m2=({vertices_coords:n,faces_vertices:e})=>e.map(t=>t.map(o=>n[o])).map(t=>{const o=u.core.resize(3,u.core.subtract(t[1],t[0])),r=u.core.resize(3,u.core.subtract(t[2],t[0]));return u.core.normalize3(u.core.cross3(o,r))});var l5=Object.freeze({__proto__:null,makeVerticesEdgesUnsorted:he,makeVerticesEdges:jo,makeVerticesVertices:tt,makeVerticesFacesUnsorted:r2,makeVerticesFaces:ot,makeVerticesToEdgeBidirectional:yn,makeVerticesToEdge:s2,makeVerticesToFace:c2,makeVerticesVerticesVector:Co,makeVerticesSectors:Bo,makeEdgesEdges:s5,makeEdgesFacesUnsorted:I0,makeEdgesFaces:i2,makeEdgesAssignment:Fo,makeEdgesFoldAngle:Lo,makeEdgesFoldAngleFromFaces:i5,makeEdgesCoords:Bt,makeEdgesVector:Wn,makeEdgesLength:a2,makeEdgesBoundingBox:rt,makePlanarFaces:l2,makeFacesVerticesFromEdges:u2,makeFacesEdgesFromVertices:f2,makeFacesFaces:T0,makeFacesPolygon:d2,makeFacesPolygonQuick:a5,makeFacesCenter:N0,makeFacesCenterQuick:zo,makeFacesNormal:m2});const Io=({edges_vertices:n})=>{const e=[];for(let t=0;t<n.length;t+=1)n[t][0]===n[t][1]&&e.push(t);return e},To=({edges_vertices:n})=>{if(!n)return[];const e=[],t={};for(let o=0;o<n.length;o+=1){const r=`${n[o][0]} ${n[o][1]}`,s=`${n[o][1]} ${n[o][0]}`;t[r]!==void 0?e[o]=t[r]:(t[r]=o,t[s]=o)}return e},u5=(n,e,t)=>{const o={};t.forEach(r=>{o[r]=!0}),jt(n,e).forEach(r=>n[r].forEach((s,c)=>{for(let i=s.length-1;i>=0;i-=1)o[s[i]]===!0&&n[r][c].splice(i,1)}))},No=(n,e)=>(e||(e=Io(n)),e.length&&u5(n,An,e),{map:vn(n,An,e),remove:e}),R0=(n,e)=>{e||(e=To(n));const t=Object.keys(e).map(r=>parseInt(r,10)),o=ko(n,An,e);return t.length&&(n.vertices_edges||n.vertices_vertices||n.vertices_faces)&&(n.vertices_edges=he(n),n.vertices_vertices=tt(n),n.vertices_edges=jo(n),n.vertices_faces=ot(n)),{map:o,remove:t}};var f5=Object.freeze({__proto__:null,getCircularEdges:Io,getDuplicateEdges:To,removeCircularEdges:No,removeDuplicateEdges:R0});const A1=(...n)=>{if(n.length===0)return[];const e=n[0].map((t,o)=>o);return n.forEach(t=>e.forEach((o,r)=>{e[r]=t[o]})),e},Fn=(...n)=>{if(n.length===0)return[];const e=n[0].map((t,o)=>[o]);return n.forEach(t=>{e.forEach((o,r)=>o.forEach((s,c)=>{e[r][c]=t[s]})),e.forEach((o,r)=>{e[r]=o.reduce((s,c)=>s.concat(c),[]).filter(s=>s!==void 0)})}),e},d5=(...n)=>{if(n.length===0)return[];let e=n[0].map((t,o)=>o);return n.forEach(t=>{e=t.map(r=>e[r])}),e},h2=(...n)=>{if(n.length===0)return[];let e=n[0].reduce((t,o)=>t.concat(o),[]).map((t,o)=>[o]);return n.forEach(t=>{const o=[];t.forEach((r,s)=>{typeof r===y1?o[s]=e[r]:o[s]=r.map(c=>e[c]).reduce((c,i)=>c.concat(i),[])}),e=o}),e},Tn=n=>{const e=[];return n.forEach((t,o)=>{t!=null&&(typeof t===y1&&(e[t]!==void 0?typeof e[t]===y1?e[t]=[e[t],o]:e[t].push(o):e[t]=o),t.constructor===Array&&t.forEach(r=>{e[r]=o}))}),e},y0=n=>{const e=[];return n.forEach((t,o)=>{e[t]=o}),e};var m5=Object.freeze({__proto__:null,mergeSimpleNextmaps:A1,mergeNextmaps:Fn,mergeSimpleBackmaps:d5,mergeBackmaps:h2,invertMap:Tn,invertSimpleMap:y0});const p2=(n,e)=>{const t=Ao(n,e),o=No(n),r=R0(n),s=t2(n),c=y0(t.map),i=s.remove.map(f=>c[f]),a=y0(o.map),l=r.remove.map(f=>a[f]);return{vertices:{map:A1(t.map,s.map),remove:t.remove.concat(i)},edges:{map:A1(o.map,r.map),remove:o.remove.concat(l)}}},h5=n=>{const e={vertices:In.vertices(n),edges:In.edges(n),faces:In.faces(n)},t={vertices:Mn.vertices(n),edges:Mn.edges(n),faces:Mn.faces(n)};return{vertices:e.vertices>=t.vertices,edges:e.edges>=t.edges,faces:e.faces>=t.faces}},Ro=(n,e)=>{const t=To(n),o=Io(n),r=wo(n),s=e2(n,e),c=h5(n);return{summary:t.length===0&&o.length===0&&r.length===0&&c.vertices&&c.edges&&c.faces?"valid":"problematic",vertices:{isolated:r,duplicate:s,references:c.vertices},edges:{circular:o,duplicate:t,references:c.edges},faces:{references:c.faces}}},p5=n=>{const e=n.edges_vertices.length;if(n.edges_assignment||(n.edges_assignment=[]),n.edges_foldAngle||(n.edges_foldAngle=[]),n.edges_assignment.length>n.edges_foldAngle.length)for(let t=n.edges_foldAngle.length;t<n.edges_assignment.length;t+=1)n.edges_foldAngle[t]=Mt(n.edges_assignment[t]);if(n.edges_foldAngle.length>n.edges_assignment.length)for(let t=n.edges_assignment.length;t<n.edges_foldAngle.length;t+=1)n.edges_assignment[t]=bo(n.edges_foldAngle[t]);for(let t=n.edges_assignment.length;t<e;t+=1)n.edges_assignment[t]="U",n.edges_foldAngle[t]=0},g5=(n,e)=>{if(e===void 0&&!n.faces_vertices&&!n.faces_edges&&(e=!0),e&&n.vertices_coords){const t=l2(n);n.faces_vertices=t.map(o=>o.vertices),n.faces_edges=t.map(o=>o.edges);return}n.faces_vertices&&n.faces_edges||(n.faces_vertices&&!n.faces_edges?n.faces_edges=f2(n):n.faces_edges&&!n.faces_vertices?n.faces_vertices=u2(n):(n.faces_vertices=[],n.faces_edges=[]))},Fe=(n,e)=>(typeof n!="object"||!n.edges_vertices||(n.vertices_edges=he(n),n.vertices_vertices=tt(n),n.vertices_edges=jo(n),p5(n),g5(n,e),n.vertices_faces=ot(n),n.edges_faces=I0(n),n.faces_faces=T0(n)),n),g2=(n,e=u.core.EPSILON)=>rt(n,e).map(t=>n.vertices_coords.map(o=>o[0]>t.min[0]&&o[1]>t.min[1]&&o[0]<t.max[0]&&o[1]<t.max[1])),_2=({vertices_coords:n,edges_vertices:e,edges_coords:t},o=u.core.EPSILON)=>{const r=rt({vertices_coords:n,edges_vertices:e,edges_coords:t},o),s=e.map(()=>[]);for(let c=0;c<e.length-1;c+=1)for(let i=c+1;i<e.length;i+=1){const a=(r[c].max[0]<r[i].min[0]||r[i].max[0]<r[c].min[0])&&(r[c].max[1]<r[i].min[1]||r[i].max[1]<r[c].min[1]);s[c][i]=!a,s[i][c]=!a}for(let c=0;c<e.length;c+=1)s[c][c]=!0;return s};var _5=Object.freeze({__proto__:null,getEdgesVerticesOverlappingSpan:g2,getEdgesEdgesOverlapingSpans:_2});const v5=({edges_vertices:n},e,t)=>(t.forEach(o=>{n[o][0]===e&&n[o][1]===e&&console.warn("removePlanarVertex circular edge")}),t.map(o=>n[o][0]===e?n[o][1]:n[o][0])),v2=({vertices_coords:n,vertices_edges:e,edges_vertices:t},o,r=u.core.EPSILON)=>{if(!n||!t)return!1;e||(e=he({edges_vertices:t}));const s=e[o];if(s===void 0||s.length!==2)return!1;const c=v5({edges_vertices:t},o,s),i=[c[0],o,c[1]].map(a=>n[a]);return u.core.collinearBetween(...i,!1,r)},M2=({vertices_coords:n,edges_vertices:e,edges_coords:t},o=u.core.EPSILON)=>{t||(t=e.map(s=>s.map(c=>n[c])));const r=g2({vertices_coords:n,edges_vertices:e,edges_coords:t},o);for(let s=0;s<t.length;s+=1)for(let c=0;c<n.length;c+=1)!r[s][c]||(r[s][c]=u.core.overlapLinePoint(u.core.subtract(t[s][1],t[s][0]),t[s][0],n[c],u.core.excludeS,o));return r.map(s=>s.map((c,i)=>c?i:void 0).filter(c=>c!==void 0))};var M5=Object.freeze({__proto__:null,isVertexCollinear:v2,getVerticesEdgesOverlap:M2});const b2=({vertices_coords:n,edges_vertices:e},t,o,r=u.core.EPSILON)=>{const s=u.core.normalize2(t),c=e.map(l=>n[l[0]]),a=e.map(l=>l.map(f=>n[f])).map(l=>u.core.subtract2(l[1],l[0])).map(l=>u.core.parallel2(l,t,r));for(let l=0;l<e.length;l+=1){if(!a[l])continue;if(u.core.fnEpsilonEqualVectors(c[l],o)){a[l]=!0;continue}const f=u.core.normalize2(u.core.subtract2(c[l],o)),d=Math.abs(u.core.dot2(f,s));a[l]=Math.abs(1-d)<r}return a},y2=({vertices_coords:n,edges_vertices:e,edges_coords:t},o,r,s=u.core.EPSILON)=>{t||(t=Bt({vertices_coords:n,edges_vertices:e}));const c=u.core.boundingBox([o,r],s),i=u.core.subtract2(r,o);return rt({vertices_coords:n,edges_vertices:e,edges_coords:t},s).map(a=>u.core.overlapBoundingBoxes(c,a)).map((a,l)=>a?u.core.intersectLineLine(i,o,u.core.subtract2(t[l][1],t[l][0]),t[l][0],u.core.includeS,u.core.includeS,s):void 0)},V2=function({vertices_coords:n,edges_vertices:e,edges_vector:t,edges_origin:o},r=u.core.EPSILON){t||(t=Wn({vertices_coords:n,edges_vertices:e})),o||(o=e.map(i=>n[i[0]]));const s=t.map(()=>[]),c=_2({vertices_coords:n,edges_vertices:e},r);for(let i=0;i<t.length-1;i+=1)for(let a=i+1;a<t.length;a+=1){if(c[i][a]!==!0){s[i][a]=void 0;continue}s[i][a]=u.core.intersectLineLine(t[i],o[i],t[a],o[a],u.core.excludeS,u.core.excludeS,r),s[a][i]=s[i][a]}return s},x2=({vertices_coords:n,edges_vertices:e,faces_vertices:t,faces_edges:o},r,s,c,i=u.core.EPSILON)=>{const a=t[r].map(m=>n[m]).map(m=>u.core.overlapLinePoint(s,c,m,()=>!0,i)).map((m,_)=>m?_:void 0).filter(m=>m!==void 0),l=a.map(m=>t[r][m]);if(a.concat(a.map(m=>m+t[r].length)).map((m,_,v)=>v[_+1]-m===1).reduce((m,_)=>m||_,!1))return;if(l.length>1)return{vertices:l,edges:[]};const d=o[r].map(m=>e[m].map(_=>n[_])).map(m=>u.core.intersectLineLine(s,c,u.core.subtract(m[1],m[0]),m[0],u.core.includeL,u.core.excludeS,i)).map((m,_)=>({coords:m,edge:o[r][_]})).filter(m=>m.coords!==void 0).filter(m=>!l.map(_=>e[m.edge].includes(_)).reduce((_,v)=>_||v,!1));return d.length+l.length===2?{vertices:l,edges:d}:void 0};var b5=Object.freeze({__proto__:null,makeEdgesLineParallelOverlap:b2,makeEdgesSegmentIntersection:y2,makeEdgesEdgesIntersection:V2,intersectConvexFaceLine:x2});const y5=(n,e=u.core.EPSILON)=>{const t=n.edges_vertices.map(f=>f.map(d=>n.vertices_coords[d])),o=t.map(f=>u.core.subtract(f[1],f[0])),r=t.map(f=>f[0]),s=V2({vertices_coords:n.vertices_coords,edges_vertices:n.edges_vertices,edges_vector:o,edges_origin:r},1e-6),c=M2({vertices_coords:n.vertices_coords,edges_vertices:n.edges_vertices,edges_coords:t},e);if(s.flat().filter(f=>f!==void 0).length===0&&c.flat().filter(f=>f!==void 0).length===0)return;const i={vertices:n.vertices_coords.length};s.forEach(f=>f.filter(d=>d!==void 0).filter(d=>d.length===2).forEach(d=>{const m=n.vertices_coords.length;n.vertices_coords.push([...d]),d.splice(0,2),d.push(m)})),s.forEach((f,d)=>{f.forEach((m,_)=>{m&&(s[d][_]=m[0])})});const a=s.map(f=>f.filter(d=>d!==void 0));n.edges_vertices.forEach((f,d)=>f.push(...a[d],...c[d])),n.edges_vertices.forEach((f,d)=>{n.edges_vertices[d]=So({vertices_coords:n.vertices_coords},f,o[d])});const l=n.edges_vertices.map((f,d)=>Array(f.length-1).fill(d)).flat();if(n.edges_vertices=n.edges_vertices.map(f=>Array.from(Array(f.length-1)).map((d,m,_)=>[f[m],f[m+1]])).flat(),n.edges_assignment&&n.edges_foldAngle&&n.edges_foldAngle.length>n.edges_assignment.length)for(let f=n.edges_assignment.length;f<n.edges_foldAngle.length;f+=1)n.edges_assignment[f]=bo(n.edges_foldAngle[f]);return n.edges_assignment&&(n.edges_assignment=l.map(f=>n.edges_assignment[f]||"U")),n.edges_foldAngle&&(n.edges_foldAngle=l.map(f=>n.edges_foldAngle[f]).map((f,d)=>f===void 0?Mt(n.edges_assignment[d]):f)),{vertices:{new:Array.from(Array(n.vertices_coords.length-i.vertices)).map((f,d)=>i.vertices+d)},edges:{backmap:l}}},V5=[V1,f0,q1,qs],Do=(n,e=u.core.EPSILON)=>{n.vertices_coords=n.vertices_coords.map(r=>r.slice(0,2)),[Qn,An,me].map(r=>Be(n,r)).flat().filter(r=>!V5.includes(r)).forEach(r=>delete n[r]);const t={vertices:{},edges:{}};let o;for(o=0;o<20;o+=1){const r=Ao(n,e/2),s=R0(n),c=No(n),i=y5(n,e);if(i===void 0){t.vertices.map=t.vertices.map===void 0?r.map:Fn(t.vertices.map,r.map),t.edges.map=t.edges.map===void 0?Fn(s.map,c.map):Fn(t.edges.map,s.map,c.map);break}const a=Tn(i.edges.backmap),l=Fn(s.map,c.map,a);t.vertices.map=t.vertices.map===void 0?r.map:Fn(t.vertices.map,r.map),t.edges.map=t.edges.map===void 0?l:Fn(t.edges.map,l)}return o===20&&console.warn("fragment reached max iterations"),t},x5=({vertices_coords:n},e)=>u.core.boundingBox(n,e),$o=({edges_vertices:n,edges_assignment:e})=>z0(n.filter((t,o)=>e[o]==="B"||e[o]==="b").flat()),a1=()=>({vertices:[],edges:[]}),D0=({vertices_edges:n,edges_vertices:e,edges_assignment:t})=>{if(t===void 0)return a1();n||(n=he({edges_vertices:e}));const o=t.map(a=>a==="B"||a==="b"),r=[],s=[];let c=-1;for(let a=0;a<o.length;a+=1)if(o[a]){c=a;break}if(c===-1)return a1();o[c]=!1,r.push(c),s.push(e[c][0]);let i=e[c][1];for(;s[0]!==i;){if(s.push(i),c=n[i].filter(a=>o[a]).shift(),c===void 0)return a1();e[c][0]===i?[,i]=e[c]:[i]=e[c],o[c]=!1,r.push(c)}return{vertices:s,edges:r}},E5=({vertices_coords:n,vertices_edges:e,vertices_vertices:t,edges_vertices:o})=>{t||(t=tt({vertices_coords:n,vertices_edges:e,edges_vertices:o}));const r=yn({edges_vertices:o}),s=[],c=[],i={vertices:c,edges:s};let a=-1/0,l=-1;if(n.forEach((M,x)=>{M[0]>a&&(a=M[0],l=x)}),l===-1)return i;c.push(l);const f=n[l],d=t[l],m=d.map(M=>n[M]).map(M=>[M[0]-f[0],M[1]-f[1]]).map(M=>Math.atan2(M[1],M[0])).map(M=>M<0?M+Math.PI*2:M).map((M,x)=>({a:M,i:x})).sort((M,x)=>M.a-x.a).shift().i,_=d[m],v=l<_?`${l} ${_}`:`${_} ${l}`,p=r[v];s.push(p);let h=l,g=_,b=0;for(;b<1e4;){const M=t[g],L=(M.indexOf(h)+1)%M.length,W=M[L],E=g<W?`${g} ${W}`:`${W} ${g}`,P=r[E];if(P===s[0])return i;c.push(g),s.push(P),h=g,g=W,b+=1}return console.warn("calculate boundary potentially entered infinite loop"),i};var k5=Object.freeze({__proto__:null,getBoundingBox:x5,getBoundaryVertices:$o,getBoundary:D0,getPlanarBoundary:E5});const $0=function(n,e){return b0(n,"coords").forEach(t=>{n[t]=n[t].map(o=>u.core.resize(3,o)).map(o=>u.core.multiplyMatrix3Vector3(e,o))}),b0(n,"matrix").forEach(t=>{n[t]=n[t].map(o=>u.core.multiplyMatrices3(o,e))}),n},w5=(n,e,...t)=>{const o=u.core.getVector(...t),r=u.core.resize(3,o),s=u.core.makeMatrix3Scale(e,r);return $0(n,s)},A5=(n,...e)=>{const t=u.core.getVector(...e),o=u.core.resize(3,t),r=u.core.makeMatrix3Translate(...o);return $0(n,r)},P5=(n,e,...t)=>{const o=u.core.getVector(...t),r=u.core.resize(3,o),s=u.core.makeMatrix3RotateZ(e,...r);return $0(n,s)};var E2={scale:w5,translate:A5,rotateZ:P5,transform:$0};const k2=(n,e)=>{const t={};e.forEach(i=>{t[i]=!0});const o=n.map(i=>!!t[i]),r=[],s=o.indexOf(!1),c={};for(let i=s+1;i<o.length;i+=1)o[i]&&!c[n[i]]&&(r.push(n[i]),c[n[i]]=!0);for(let i=0;i<s;i+=1)o[i]&&!c[n[i]]&&(r.push(n[i]),c[n[i]]=!0);return r},Ft=({faces_vertices:n,faces_faces:e},t=0)=>{if(e||(e=T0({faces_vertices:n})),e.length===0)return[];const o=[[{face:t}]],r={};r[t]=!0;do{const s=o[o.length-1].map(a=>e[a.face].map(l=>({face:l,parent:a.face}))).reduce((a,l)=>a.concat(l),[]),c={};s.forEach((a,l)=>{r[a.face]&&(c[l]=!0),r[a.face]=!0});const i=s.filter((a,l)=>!c[l]);i.map(a=>k2(n[a.face],n[a.parent])).forEach((a,l)=>{const f=a.slice(0,2);i[l].edge_vertices=f}),o[o.length]=i}while(o[o.length-1].length>0);return o.length>0&&o[o.length-1].length===0&&o.pop(),o};var O5=Object.freeze({__proto__:null,getFaceFaceSharedVertices:k2,makeFaceSpanningTree:Ft});const W0=({vertices_coords:n,vertices_faces:e,faces_vertices:t},o)=>{e||(e=ot({faces_vertices:t}));const r=e.map(s=>s.filter(c=>c!=null).shift()).map(s=>s===void 0?u.core.identity2x3:o[s]);return n.map((s,c)=>u.core.multiplyMatrix2Vector2(r[c],s))},S5={U:!0,u:!0},w2=({vertices_coords:n,edges_vertices:e,edges_foldAngle:t,edges_assignment:o,faces_vertices:r,faces_faces:s},c=0)=>{!o&&t&&(o=Fo({edges_foldAngle:t})),t||(o?t=Lo({edges_assignment:o}):t=Array(e.length).fill(0));const i=yn({edges_vertices:e}),a=r.map(()=>u.core.identity3x4);return Ft({faces_vertices:r,faces_faces:s},c).slice(1).forEach(l=>l.forEach(f=>{const d=f.edge_vertices.map(h=>n[h]),m=f.edge_vertices.join(" "),_=i[m],v=S5[o[_]]?Math.PI:t[_]*Math.PI/180,p=u.core.makeMatrix3Rotate(v,u.core.subtract(...u.core.resizeUp(d[1],d[0])),d[0]);a[f.face]=u.core.multiplyMatrices3(a[f.parent],p)})),a},j5={M:!0,m:!0,V:!0,v:!0,U:!0,u:!0,F:!1,f:!1,B:!1,b:!1},Wo=({edges_vertices:n,edges_foldAngle:e,edges_assignment:t})=>t===void 0?e===void 0?n.map(()=>!0):e.map(o=>o<-u.core.EPSILON||o>u.core.EPSILON):t.map(o=>j5[o]),P1=({vertices_coords:n,edges_vertices:e,edges_foldAngle:t,edges_assignment:o,faces_vertices:r,faces_faces:s},c=0)=>{t||(o?t=Lo({edges_assignment:o}):t=Array(e.length).fill(0));const i=Wo({edges_vertices:e,edges_foldAngle:t,edges_assignment:o}),a=yn({edges_vertices:e}),l=r.map(()=>u.core.identity2x3);return Ft({faces_vertices:r,faces_faces:s},c).slice(1).forEach(f=>f.forEach(d=>{const m=d.edge_vertices.map(b=>n[b]),_=d.edge_vertices.join(" "),v=a[_],p=u.core.subtract2(m[1],m[0]),h=m[0],g=i[v]?u.core.makeMatrix2Reflect(p,h):u.core.identity2x3;l[d.face]=u.core.multiplyMatrices2(l[d.parent],g)})),l};var C5=Object.freeze({__proto__:null,multiplyVerticesFacesMatrix2:W0,makeFacesMatrix:w2,makeEdgesIsFolded:Wo,makeFacesMatrix2:P1});const A2=({vertices_coords:n,vertices_faces:e,edges_vertices:t,edges_foldAngle:o,edges_assignment:r,faces_vertices:s,faces_faces:c,faces_matrix:i},a)=>{i=w2({vertices_coords:n,edges_vertices:t,edges_foldAngle:o,edges_assignment:r,faces_vertices:s,faces_faces:c},a),e||(e=ot({faces_vertices:s}));const l=e.map(f=>f.filter(d=>d!=null).shift()).map(f=>f===void 0?u.core.identity3x4:i[f]);return n.map(f=>u.core.resize(3,f)).map((f,d)=>u.core.multiplyMatrix3Vector3(l[d],f))},P2=({vertices_coords:n,edges_vertices:e,edges_foldAngle:t,edges_assignment:o,faces_vertices:r,faces_faces:s},c=0)=>{const i=Wo({edges_vertices:e,edges_foldAngle:t,edges_assignment:o}),a=[];r[c].forEach(d=>{a[d]=[...n[d]]});const l=[];l[c]=!1;const f=yn({edges_vertices:e});return Ft({faces_vertices:r,faces_faces:s},c).slice(1).forEach(d=>d.forEach(m=>{const _=m.edge_vertices.join(" "),v=f[_],p=e[v].map(E=>a[E]);if(p[0]===void 0||p[1]===void 0)return;const h=e[v].map(E=>n[E]),g=h[0],b=u.core.normalize2(u.core.subtract2(h[1],h[0])),M=u.core.rotate90(b);l[m.face]=i[v]?!l[m.parent]:l[m.parent];const x=u.core.normalize2(u.core.subtract2(p[1],p[0])),L=p[0],W=l[m.face]?u.core.rotate270(x):u.core.rotate90(x);r[m.face].filter(E=>a[E]===void 0).forEach(E=>{const P=u.core.subtract2(n[E],g),I=u.core.dot(P,M),nn=u.core.dot(P,b),Un=u.core.scale2(x,nn),qn=u.core.scale2(W,I),ee=u.core.add2(u.core.add2(L,Un),qn);a[E]=ee})})),a};var B5=Object.freeze({__proto__:null,makeVerticesCoordsFolded:A2,makeVerticesCoordsFlatFolded:P2});const F5=n=>n.map(e=>e[0]*e[4]-e[1]*e[3]).map(e=>e>=0),O2=n=>n.map(e=>e[0]*e[3]-e[1]*e[2]).map(e=>e>=0),ne=({vertices_coords:n,faces_vertices:e})=>e.map(t=>t.map(o=>n[o]).map((o,r,s)=>[o,s[(r+1)%s.length]]).map(o=>(o[1][0]-o[0][0])*(o[1][1]+o[0][1])).reduce((o,r)=>o+r,0)).map(t=>t<0);var L5=Object.freeze({__proto__:null,makeFacesWindingFromMatrix:F5,makeFacesWindingFromMatrix2:O2,makeFacesWinding:ne});const Uo=n=>{const e=n.faces_vertices.map(r=>r.map(s=>n.vertices_coords[s])).reduce((r,s)=>r.concat(s),[]);let t=0;const o=n.faces_vertices.map(r=>r.map(s=>t++));return{vertices_coords:JSON.parse(JSON.stringify(e)),faces_vertices:o}},S2=({vertices_coords:n,faces_vertices:e},t=.333)=>{const o=Uo({vertices_coords:n,faces_vertices:e}),r=ne(o),s=o.faces_vertices.map(l=>l.map(f=>o.vertices_coords[f])).map(l=>l.map((f,d,m)=>u.core.subtract2(f,m[(d+1)%m.length]))),c=zo({vertices_coords:n,faces_vertices:e}),i=e.map(l=>l.map(f=>n[f])).map((l,f)=>l.map(d=>u.core.distance2(d,c[f])));console.log("faces_point_distances",i);const a=s.map((l,f)=>l.map((d,m,_)=>[d,u.core.flip(_[(m-1+_.length)%_.length])]).map(d=>r[f]?u.core.counterClockwiseBisect2(...d):u.core.clockwiseBisect2(...d))).map((l,f)=>l.map((d,m)=>u.core.scale(d,i[f][m])));return o.faces_vertices.forEach((l,f)=>l.forEach((d,m)=>{o.vertices_coords[d]=u.core.add2(o.vertices_coords[d],u.core.scale2(a[f][m],-t))})),o};var z5=Object.freeze({__proto__:null,explodeFaces:Uo,explodeShrinkFaces:S2});const qo=({vertices_coords:n},e)=>{if(!n)return;const t=u.core.resize(n[0].length,e),o=n.map((r,s)=>({d:u.core.distance(t,r),i:s})).sort((r,s)=>r.d-s.d).shift();return o?o.i:void 0},U0=({vertices_coords:n,edges_vertices:e},t)=>{if(!n||!e)return;const o=e.map(r=>r.map(s=>n[s])).map(r=>u.core.nearestPointOnLine(u.core.subtract(r[1],r[0]),r[0],t,u.core.segmentLimiter));return u.core.smallestComparisonSearch(t,o,u.core.distance)},j2=({vertices_coords:n,faces_vertices:e},t)=>{if(!n||!e)return;const o=e.map((r,s)=>({face:r.map(c=>n[c]),i:s})).filter(r=>u.core.overlapConvexPolygonPoint(r.face,t)).shift();return o===void 0?void 0:o.i},Go=(n,e)=>{const t=j2(n,e);if(t!==void 0)return t;if(n.edges_faces){const o=U0(n,e),r=n.edges_faces[o];if(r.length===1)return r[0];if(r.length>1){const c=zo({vertices_coords:n.vertices_coords,faces_vertices:r.map(a=>n.faces_vertices[a])}).map(a=>u.core.distance(a,e));let i=0;for(let a=0;a<c.length;a+=1)c[a]<c[i]&&(i=a);return r[i]}}},I5=(n,...e)=>{const t={vertices:qo,edges:U0,faces:Go},o=u.core.getVector(...e),r=Object.create(null);return["vertices","edges","faces"].forEach(s=>{Object.defineProperty(r,vt[s],{enumerable:!0,get:()=>t[s](n,o)}),F0(n,s).forEach(c=>Object.defineProperty(r,c,{enumerable:!0,get:()=>n[c][r[vt[s]]]}))}),r};var T5=Object.freeze({__proto__:null,nearestVertex:qo,nearestEdge:U0,faceContainingPoint:j2,nearestFace:Go,nearest:I5});const Ae=function(n){let e,t;if(typeof n!==$s||!n)return n;if(Object.prototype.toString.apply(n)==="[object Array]"){for(e=[],t=0;t<n.length;t+=1)e[t]=Ae(n[t]);return e}e={};for(t in n)n.hasOwnProperty(t)&&(e[t]=Ae(n[t]));return e},q0=(n,e,t=u.core.EPSILON)=>{n.vertices_coords||(n.vertices_coords=[]),typeof e[0]=="number"&&(e=[e]);const o=e.map(c=>n.vertices_coords.map(i=>u.core.distance(i,c)<t).map((i,a)=>i?a:void 0).filter(i=>i!==void 0).shift());let r=n.vertices_coords.length;const s=e.filter((c,i)=>o[i]===void 0);return n.vertices_coords.push(...s),o.map(c=>c===void 0?r++:c)},N5=({vertices_faces:n,edges_vertices:e,edges_faces:t,faces_edges:o,faces_vertices:r},s)=>{if(t&&t[s])return t[s];const c=e[s];if(n!==void 0){const i=[];for(let a=0;a<n[c[0]].length;a+=1)for(let l=0;l<n[c[1]].length;l+=1)if(n[c[0]][a]===n[c[1]][l]){if(n[c[0]][a]===void 0)continue;i.push(n[c[0]][a])}return i}if(o){const i=[];for(let a=0;a<o.length;a+=1)for(let l=0;l<o[a].length;l+=1)o[a][l]===s&&i.push(a);return i}r&&console.warn("todo: findAdjacentFacesToEdge")},R5=(n,e,t)=>{const o=n.edges_vertices[e],r=[{edges_vertices:[o[0],t]},{edges_vertices:[t,o[1]]}];if(r.forEach(s=>[q1,qs].filter(c=>n[c]&&n[c][e]!==void 0).forEach(c=>{s[c]=n[c][e]})),n.vertices_coords&&(n.edges_length||n.edges_vector)){const s=r.map(c=>c.edges_vertices.map(i=>n.vertices_coords[i]));n.edges_vector&&r.forEach((c,i)=>{c.edges_vector=u.core.subtract(s[i][1],s[i][0])}),n.edges_length&&r.forEach((c,i)=>{c.edges_length=u.core.distance2(...s[i])})}return r},D5=({vertices_vertices:n},e,t)=>{!n||(n[e]=[...t],t.forEach((o,r,s)=>{const c=s[(r+1)%s.length],i=n[o].indexOf(c);n[o][i]=e}))},$5=({vertices_coords:n,vertices_vertices:e,vertices_sectors:t},o)=>{!t||(t[o]=e[o].length===1?[u.core.TWO_PI]:u.core.counterClockwiseSectors2(e[o].map(r=>u.core.subtract2(n[r],n[o]))))},W5=({vertices_edges:n},e,t,o,r)=>{!n||(n[t]=[...r],o.map(s=>n[s].indexOf(e)).forEach((s,c)=>{n[o[c]][s]=r[c]}))},U5=({vertices_faces:n},e,t)=>{!n||(n[e]=[...t])},q5=({edges_faces:n},e,t)=>{!n||e.forEach(o=>{n[o]=[...t]})},G5=({faces_vertices:n},e,t,o)=>{!n||o.map(r=>n[r]).forEach(r=>r.map((s,c,i)=>{const a=(c+1)%i.length;return s===t[0]&&i[a]===t[1]||s===t[1]&&i[a]===t[0]?a:void 0}).filter(s=>s!==void 0).sort((s,c)=>c-s).forEach(s=>r.splice(s,0,e)))},H5=({edges_vertices:n,faces_vertices:e,faces_edges:t},o)=>{const r=yn({edges_vertices:n});o.map(s=>e[s].map((c,i,a)=>[c,a[(i+1)%a.length]]).map(c=>r[c.join(" ")])).forEach((s,c)=>{t[o[c]]=s})},G0=(n,e,t,o=u.core.EPSILON)=>{if(n.edges_vertices.length<e)return{};const r=n.edges_vertices[e];t||(t=u.core.midpoint(...r));const s=r.map(f=>n.vertices_coords[f]).map(f=>u.core.distance(f,t)<o);if(s[0])return{vertex:r[0],edges:{}};if(s[1])return{vertex:r[1],edges:{}};const c=n.vertices_coords.length;n.vertices_coords[c]=t;const i=[0,1].map(f=>f+n.edges_vertices.length);R5(n,e,c).forEach((f,d)=>Object.keys(f).forEach(m=>{n[m][i[d]]=f[m]})),D5(n,c,r),$5(n,c),W5(n,e,c,r,i);const a=N5(n,e);a&&(U5(n,c,a),q5(n,i,a),G5(n,c,r,a),H5(n,a));const l=vn(n,An,[e]);return i.forEach((f,d)=>{i[d]=l[i[d]]}),l.splice(-2),l[e]=i,{vertex:c,edges:{map:l,new:i,remove:e}}},Y5=({vertices_coords:n},e,t)=>{const o=e.map(r=>n[r]).reverse();return{edges_vertices:[...e],edges_foldAngle:0,edges_assignment:"U",edges_length:u.core.distance2(...o),edges_vector:u.core.subtract(...o),edges_faces:[t,t]}},X5=(n,e,t)=>{const o=n.edges_vertices.length,r=Y5(n,t,e);return Object.keys(r).filter(s=>n[s]!==void 0).forEach(s=>{n[s][o]=r[s]}),o},Z5=({edges_vertices:n,faces_vertices:e,faces_edges:t},o,r)=>{const s=r.map(i=>e[o].indexOf(i)),c=Qc(e[o],s).map(i=>({faces_vertices:i}));if(t){const i=yn({edges_vertices:n});c.map(a=>a.faces_vertices.map((l,f,d)=>`${l} ${d[(f+1)%d.length]}`).map(l=>i[l])).forEach((a,l)=>{c[l].faces_edges=a})}return c},J5=(n,e,t)=>{const o=[0,1].map(r=>n.faces_vertices.length+r);return Z5(n,e,t).forEach((r,s)=>Object.keys(r).forEach(c=>{n[c][o[s]]=r[c]})),o},K5=(n,{vertices:e,edges:t})=>{let o;const r=t.map(c=>{const i=G0(n,o?o[c.edge]:c.edge,c.coords);return o=o?Fn(o,i.edges.map):i.edges.map,i});e.push(...r.map(c=>c.vertex));let s;return r.forEach(c=>{c.edges.remove=s?s[c.edges.remove]:c.edges.remove;const i=y0(c.edges.map);s=s?h2(s,i):i}),{vertices:e,edges:{map:o,remove:r.map(c=>c.edges.remove)}}},C2="splitFace potentially given a non-convex face",Q5=({vertices_coords:n,vertices_vertices:e,edges_vertices:t},o)=>{const r=t[o][0],s=t[o][1];e[r]=bt({vertices_coords:n},e[r].concat(s),r),e[s]=bt({vertices_coords:n},e[s].concat(r),s)},n8=({edges_vertices:n,vertices_edges:e,vertices_vertices:t},o)=>{if(!e||!t)return;const r=n[o];r.map(s=>t[s]).map((s,c)=>s.indexOf(r[(c+1)%r.length])).forEach((s,c)=>e[r[c]].splice(s,0,o))},e8=(n,e,t)=>{const o={};t.forEach(r=>n.faces_vertices[r].forEach(s=>{o[s]||(o[s]=[]),o[s].push(r)})),n.faces_vertices[e].forEach(r=>{const s=n.vertices_faces[r].indexOf(e),c=o[r];if(s===-1||!c){console.warn(C2);return}n.vertices_faces[r].splice(s,1,...c)})},t8=(n,e,t,o)=>{const r={};o.forEach(c=>n.faces_edges[c].forEach(i=>{r[i]||(r[i]=[]),r[i].push(c)})),[...n.faces_edges[e],t].forEach(c=>{const i=r[c],a=[];for(let f=0;f<n.edges_faces[c].length;f+=1)n.edges_faces[c][f]===e&&a.push(f);if(a.length===0||!i){console.warn(C2);return}a.reverse().forEach(f=>n.edges_faces[c].splice(f,1));const l=a[a.length-1];n.edges_faces[c].splice(l,0,...i)})},o8=({faces_vertices:n,faces_faces:e},t,o)=>{const r=e[t],s=o.map(i=>n[i]),c=r.map(i=>{const a=n[i],l=[0,0];for(let f=0;f<s.length;f+=1){let d=0;for(let m=0;m<a.length;m+=1)s[f].indexOf(a[m])!==-1&&(d+=1);l[f]=d}if(l[0]>=2)return o[0];if(l[1]>=2)return o[1]});o.forEach((i,a,l)=>{e[i]=[l[(a+1)%o.length]]}),r.forEach((i,a)=>{for(let l=0;l<e[i].length;l+=1)e[i][l]===t&&(e[i][l]=c[a],e[c[a]].push(i))})},Ho=(n,e,t,o,r)=>{const s=x2(n,e,t,o,r);if(s===void 0)return;const c=K5(n,s);c.edges.new=X5(n,e,c.vertices),Q5(n,c.edges.new),n8(n,c.edges.new);const i=J5(n,e,c.vertices);e8(n,e,i),t8(n,e,c.edges.new,i),o8(n,e,i);const a=vn(n,me,[e]);return i.forEach((l,f)=>{i[f]=a[i[f]]}),a.splice(-2),a[e]=i,c.faces={map:a,new:i,remove:e},c},rn={};rn.prototype=Object.create(Object.prototype);rn.prototype.constructor=rn;const Kr=Object.assign({clean:p2,validate:Ro,populate:Fe,fragment:Do,addVertices:q0,splitEdge:G0,faceSpanningTree:Ft,explodeFaces:Uo,explodeShrinkFaces:S2},E2);Object.keys(Kr).forEach(n=>{rn.prototype[n]=function(){return Kr[n](this,...arguments)}});rn.prototype.splitFace=function(n,...e){const t=u.core.getLine(...e);return Ho(this,n,t.vector,t.origin)};rn.prototype.copy=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),Ae(this))};rn.prototype.clear=function(){return $e.graph.forEach(n=>delete this[n]),$e.orders.forEach(n=>delete this[n]),delete this.file_frames,this};rn.prototype.boundingBox=function(){return u.rect.fromPoints(this.vertices_coords)};rn.prototype.unitize=function(){if(!this.vertices_coords)return this;const n=u.core.bounding_box(this.vertices_coords),e=Math.max(...n.span),t=e===0?1:1/e,o=n.min;return this.vertices_coords=this.vertices_coords.map(r=>u.core.subtract(r,o)).map(r=>r.map(s=>s*t)),this};rn.prototype.folded=function(){const n=this.faces_matrix2?W0(this,this.faces_matrix2):A2(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(Ae(this),{vertices_coords:n,frame_classes:[Hs]}))};rn.prototype.flatFolded=function(){const n=this.faces_matrix2?W0(this,this.faces_matrix2):P2(this,...arguments);return Object.assign(Object.create(Object.getPrototypeOf(this)),Object.assign(Ae(this),{vertices_coords:n,frame_classes:[Hs]}))};const r8=function(n){const e=Object.create(null);return Object.keys(n).forEach(t=>{e[t.substring(this.length+1)]=n[t]}),e},s8=function(n){return Jc(this,n).map(r8.bind(n)).map(T4[n].bind(this))};[Qn,An,me].forEach(n=>Object.defineProperty(rn.prototype,n,{enumerable:!0,get:function(){return s8.call(this,n)}}));Object.defineProperty(rn.prototype,Gs,{enumerable:!0,get:function(){const n=D0(this),e=n.vertices.map(t=>this.vertices_coords[t]);return Object.keys(n).forEach(t=>{e[t]=n[t]}),Object.assign(e,n)}});const c8={vertices:qo,edges:U0,faces:Go};rn.prototype.nearest=function(){const n=u.core.getVector(arguments),e=Object.create(null),t={};return[Qn,An,me].forEach(o=>{Object.defineProperty(e,vt[o],{enumerable:!0,get:()=>(t[o]!==void 0||(t[o]=c8[o](this,n)),t[o])}),F0(this,o).forEach(r=>Object.defineProperty(e,r,{enumerable:!0,get:()=>this[r][e[vt[o]]]}))}),e};var Yo=rn.prototype;const Xo=function(n,e){const t=D0(n).vertices.map(c=>n.vertices_coords[c]),o=e.vector?e.vector:u.core.subtract2(e[1],e[0]),r=e.origin?e.origin:e[0],s=e.domain_function?e.domain_function:u.core.includeL;return u.core.clipLineConvexPolygon(t,o,r,u.core.include,s)},B2=(n,e)=>{n.edges_vertices||(n.edges_vertices=[]),typeof e[0]=="number"&&(e=[e]);const t=e.map((r,s)=>n.edges_vertices.length+s);n.edges_vertices.push(...e);const o=R0(n).map;return t.map(r=>o[r])},i8=(n,e,t)=>{const o=Array.from(Array(e.length-1)).map((a,l)=>[e[l],e[l+1]]),r=o.map(a=>a.join(" ")).map(a=>t[a]===void 0),s=o.filter((a,l)=>r[l]),c=Array.from(Array(s.length)).map((a,l)=>n.edges_vertices.length+l);c.forEach((a,l)=>{n.edges_vertices[a]=s[l]}),n.edges_assignment&&c.forEach(a=>{n.edges_assignment[a]="U"}),n.edges_foldAngle&&c.forEach(a=>{n.edges_foldAngle[a]=0});for(let a=0;a<e.length;a+=1){const l=e[a],f=r[a-1]?e[a-1]:void 0,d=r[a]?e[a+1]:void 0,m=[f,d].filter(p=>p!==void 0),v=(n.vertices_vertices[l]?n.vertices_vertices[l]:[]).concat(m);n.vertices_vertices[l]=bt(n,v,e[a])}const i=yn(n);for(let a=0;a<e.length;a+=1){const l=e[a];n.vertices_edges[l]=n.vertices_vertices[l].map(f=>i[`${l} ${f}`])}return e.map(a=>n.vertices_vertices[a].length===1?[u.core.TWO_PI]:u.core.counterClockwiseSectors2(n.vertices_vertices[a].map(l=>u.core.subtract2(n.vertices_coords[l],n.vertices_coords[a])))).forEach((a,l)=>{n.vertices_sectors[e[l]]=a}),c},F2=(n,e,t,o=u.core.EPSILON)=>{n.vertices_sectors||(n.vertices_sectors=Bo(n));const r=[e,t].map(E=>[E[0],E[1]]),s=u.core.subtract2(r[1],r[0]),c=y2(n,r[0],r[1],o),i=c.map((E,P)=>E===void 0?void 0:P).filter(E=>E!==void 0).sort((E,P)=>E-P),a={};i.forEach(E=>n.edges_faces[E].forEach(P=>{a[P]=!0}));const l=Object.keys(a).map(E=>parseInt(E,10)).sort((E,P)=>E-P),d=i.reverse().map(E=>G0(n,E,c[E],o)).map(E=>E.vertex),m=q0(n,r,o),_={};d.forEach(E=>{_[E]=!0}),m.forEach(E=>{_[E]=!0});const v=Object.keys(_).map(E=>parseInt(E,10)),p=So(n,v,s),h=yn(n),g=i8(n,p,h);g.forEach(E=>{const P=n.edges_vertices[E];h[`${P[0]} ${P[1]}`]=E,h[`${P[1]} ${P[0]}`]=E});const b=p.map(E=>n.vertices_vertices[E].map(P=>[[P,E],[E,P]])).reduce((E,P)=>E.concat(P),[]).reduce((E,P)=>E.concat(P),[]),M={},x=b.map(E=>Po(n,E[0],E[1],M)).filter(E=>E!==void 0),L=Oo(x);vn(n,"faces",l);const W=L.map((E,P)=>n.faces_vertices.length+P);return n.faces_vertices&&W.forEach((E,P)=>{n.faces_vertices[E]=L[P].vertices}),n.faces_edges&&W.forEach((E,P)=>{n.faces_edges[E]=L[P].edges.map(I=>h[I])}),n.faces_angles&&W.forEach((E,P)=>{n.faces_angles[E]=L[P].faces_angles}),n.vertices_faces&&(n.vertices_faces=ot(n)),n.edges_faces&&(n.edges_faces=I0(n)),n.faces_faces&&(n.faces_faces=T0(n)),(n.vertices_coords.length!==n.vertices_vertices.length||n.vertices_coords.length!==n.vertices_edges.length||n.vertices_coords.length!==n.vertices_faces.length)&&console.warn("vertices mismatch",JSON.parse(JSON.stringify(n))),(n.edges_vertices.length!==n.edges_faces.length||n.edges_vertices.length!==n.edges_assignment.length)&&console.warn("edges mismatch",JSON.parse(JSON.stringify(n))),(n.faces_vertices.length!==n.faces_edges.length||n.faces_vertices.length!==n.faces_faces.length)&&console.warn("faces mismatch",JSON.parse(JSON.stringify(n))),g},a8=({vertices_vertices:n},e)=>{const t=[e[1],e[0]];e.map((o,r)=>n[o].indexOf(t[r])).forEach((o,r)=>n[e[r]].splice(o,1))},l8=({vertices_edges:n},e,t)=>{t.map((o,r)=>n[o].indexOf(e)).forEach((o,r)=>n[t[r]].splice(o,1))},u8=(n,e,t,o)=>{const r=e.map(p=>n.faces_edges[p].indexOf(t)),s=[];e.forEach((p,h)=>n.faces_vertices[p].forEach((g,b,M)=>{const x=M[(b+1)%M.length];(g===o[0]&&x===o[1]||g===o[1]&&x===o[0])&&(s[h]=b)})),(s[0]===void 0||s[1]===void 0)&&console.warn("removePlanarEdge error joining faces");const c=e.map(p=>n.faces_edges[p].length),i=e.map(p=>n.faces_vertices[p].length),a=c.map(p=>p-1),l=i.map(p=>p-1),f=r.map((p,h)=>(p+1)%c[h]),d=s.map((p,h)=>(p+1)%i[h]),m=e.map((p,h)=>Array.from(Array(a[h])).map((g,b)=>(f[h]+b)%c[h]).map(g=>n.faces_edges[p][g])),_=e.map((p,h)=>Array.from(Array(l[h])).map((g,b)=>(d[h]+b)%i[h]).map(g=>n.faces_vertices[p][g])),v=e.map(p=>n.faces_faces[p]).reduce((p,h)=>p.concat(h),[]).filter(p=>p!==e[0]&&p!==e[1]);return{vertices:_[0].concat(_[1]),edges:m[0].concat(m[1]),faces:v}},L2=(n,e)=>{const t=[...n.edges_vertices[e]].sort((c,i)=>i-c),o=[...n.edges_faces[e]];a8(n,t),l8(n,e,t);const r=t.map(c=>n.vertices_vertices[c].length===0),s=t.filter((c,i)=>r[i]);if(o.length===2&&o[0]!==o[1]){const c=n.faces_vertices.length,i=u8(n,o,e,t);n.faces_vertices.push(i.vertices),n.faces_edges.push(i.edges),n.faces_faces.push(i.faces),n.vertices_faces.forEach((a,l)=>{let f=!1;a.forEach((d,m)=>{if(d===o[0]||d===o[1]){n.vertices_faces[l][m]=c;const _=f?[l,1]:[l,1,c];a.splice(..._),f=!0}})}),n.edges_faces.forEach((a,l)=>a.forEach((f,d)=>{(f===o[0]||f===o[1])&&(n.edges_faces[l][d]=c)})),n.faces_faces.forEach((a,l)=>a.forEach((f,d)=>{(f===o[0]||f===o[1])&&(n.faces_faces[l][d]=c)})),n.faces_vertices.forEach(a=>a.forEach(l=>{l===void 0&&console.log("FOUND ONE before remove",n.faces_vertices)})),vn(n,"faces",o)}if(o.length===2&&o[0]===o[1]&&s.length){const c=o[0];n.faces_vertices[c]=n.faces_vertices[c].filter(i=>!s.includes(i)).filter((i,a,l)=>i!==l[(a+1)%l.length]),n.faces_edges[c]=n.faces_edges[c].filter(i=>i!==e)}vn(n,"edges",[e]),vn(n,"vertices",s)},f8=(n,e,t)=>(t.forEach(o=>{n.edges_vertices[o][0]===e&&n.edges_vertices[o][1]===e&&console.warn("removePlanarVertex circular edge")}),t.map(o=>n.edges_vertices[o][0]===e?n.edges_vertices[o][1]:n.edges_vertices[o][0])),z2=(n,e)=>{const t=n.vertices_edges[e],o=Ct(n.vertices_faces[e].filter(c=>c!=null));if(t.length!==2||o.length>2){console.warn("cannot remove non 2-degree vertex yet (e,f)",t,o);return}const r=f8(n,e,t),s=r.slice().reverse();t.sort((c,i)=>c-i),r.forEach(c=>{const i=n.vertices_edges[c].indexOf(t[1]);i!==-1&&(n.vertices_edges[c][i]=t[0])}),r.forEach((c,i)=>{const a=n.vertices_vertices[c].indexOf(e);if(a===-1){console.warn("removePlanarVertex unknown vertex issue");return}n.vertices_vertices[c][a]=s[i]}),n.edges_vertices[t[0]]=[...r],o.forEach(c=>{const i=n.faces_vertices[c].indexOf(e);if(i===-1){console.warn("removePlanarVertex unknown face_vertex issue");return}n.faces_vertices[c].splice(i,1)}),o.forEach(c=>{const i=n.faces_edges[c].indexOf(t[1]);if(i===-1){console.warn("removePlanarVertex unknown face_edge issue");return}n.faces_edges[c].splice(i,1)}),vn(n,"vertices",[e]),vn(n,"edges",[t[1]])},H0=n=>[0,1].map(e=>n.filter((t,o)=>o%2===e).reduce((t,o)=>t+o,0)),d8=n=>{const e=n.reduce((t,o)=>t+o,0)/2;return H0(n).map(t=>t-e)},I2=n=>n.map((e,t,o)=>[e,o[(t+1)%o.length]]).map(e=>u.core.counterClockwiseAngleRadians(...e)).map((e,t,o)=>o.slice(t+1,o.length).concat(o.slice(0,t))).map(e=>H0(e).map(t=>Math.PI-t)).map((e,t)=>n[t]+e[0]).map((e,t)=>u.core.isCounterClockwiseBetween(e,n[t],n[(t+1)%n.length])?e:void 0),T2=n=>{const e=n.map(t=>Math.atan2(t[1],t[0]));return I2(e).map(t=>t===void 0?void 0:[Math.cos(t),Math.sin(t)])};var m8=Object.freeze({__proto__:null,alternatingSum:H0,alternatingSumDifference:d8,kawasakiSolutionsRadians:I2,kawasakiSolutionsVectors:T2});const h8={B:!0,b:!0,F:!0,f:!0,U:!0,u:!0},N2=({vertices_edges:n,edges_assignment:e})=>n.map(t=>t.map(o=>h8[e[o]]).reduce((o,r)=>o&&r,!0)).map((t,o)=>t?o:void 0).filter(t=>t!==void 0),p8={M:!0,m:!0,V:!0,v:!0},g8={M:-1,m:-1,V:1,v:1},R2=({edges_vertices:n,vertices_edges:e,edges_assignment:t})=>{e||(e=he({edges_vertices:n}));const o=e.map(r=>r.map(s=>g8[t[s]]).filter(s=>s!==void 0).reduce((s,c)=>s+c,0)).map(r=>r===2||r===-2);return $o({edges_vertices:n,edges_assignment:t}).forEach(r=>{o[r]=!0}),N2({vertices_edges:e,edges_assignment:t}).forEach(r=>{o[r]=!0}),o.map((r,s)=>r?void 0:s).filter(r=>r!==void 0)},D2=({vertices_coords:n,vertices_vertices:e,vertices_edges:t,edges_vertices:o,edges_assignment:r,edges_vector:s},c=u.core.EPSILON)=>{e||(e=tt({vertices_coords:n,vertices_edges:t,edges_vertices:o}));const i=Co({vertices_coords:n,vertices_vertices:e,edges_vertices:o,edges_vector:s}).map((a,l)=>a.filter((f,d)=>p8[r[t[l][d]]])).map(a=>a.length>1?u.core.counterClockwiseSectors2(a):[0,0]).map(a=>H0(a)).map(a=>Math.abs(a[0]-a[1])<c);return $o({edges_vertices:o,edges_assignment:r}).forEach(a=>{i[a]=!0}),N2({vertices_edges:t,edges_assignment:r}).forEach(a=>{i[a]=!0}),i.map((a,l)=>a?void 0:l).filter(a=>a!==void 0)};var _8=Object.freeze({__proto__:null,validateMaekawa:R2,validateKawasaki:D2});const ue={};ue.prototype=Object.create(Yo);ue.prototype.constructor=ue;const v8=96,$2=function(n){return n.mountain=(e=-180)=>(n.forEach(t=>{this.edges_assignment[t]="M",this.edges_foldAngle[t]=e}),n),n.valley=(e=180)=>(n.forEach(t=>{this.edges_assignment[t]="V",this.edges_foldAngle[t]=e}),n),n.flat=()=>(n.forEach(e=>{this.edges_assignment[e]="F",this.edges_foldAngle[e]=0}),n),n};["line","ray","segment"].forEach(n=>{ue.prototype[n]=function(){const e=u[n](...arguments);if(!e)return;const t=Xo(this,e);if(!t)return;const o=F2(this,t[0],t[1]);return $2.call(this,o)}});["circle","ellipse","rect","polygon"].forEach(n=>{ue.prototype[n]=function(){const e=u[n](...arguments);if(!e)return;const t=e.segments(v8).map(c=>u.segment(c)).map(c=>Xo(this,c)).filter(c=>c!==void 0);if(!t)return;const o=[],r=[];t.forEach(c=>{const i=q0(this,c);o.push(...i),r.push(...B2(this,i))});const{map:s}=Do(this).edges;return Fe(this),$2.call(this,r.map(c=>s[c]).reduce((c,i)=>c.concat(i),[]))}});ue.prototype.removeEdge=function(n){const e=this.edges_vertices[n];return L2(this,n),e.map(t=>v2(this,t)).map((t,o)=>t?e[o]:void 0).filter(t=>t!==void 0).sort((t,o)=>o-t).forEach(t=>z2(this,t)),!0};ue.prototype.validate=function(n){const e=Ro(this,n);return e.vertices.kawasaki=D2(this,n),e.vertices.maekawa=R2(this),this.edges_foldAngle&&(e.edges.not_flat=this.edges_foldAngle.map((t,o)=>yo(t)?void 0:o).filter(t=>t!==void 0)),e.summary==="valid"&&(e.vertices.kawasaki.length||e.vertices.maekawa.length?e.summary="invalid":e.edges.not_flat.length&&(e.summary="not flat")),e};var M8=ue.prototype;const b8=(n,e)=>{const t=[],o=n.map((c,i)=>i),r=o.filter(c=>e[c]),s=o.filter(c=>!e[c]);return s.sort((c,i)=>n[c]-n[i]).forEach((c,i)=>{t[c]=i}),r.sort((c,i)=>n[i]-n[c]).forEach((c,i)=>{t[c]=s.length+i}),t},Qr=(n,e,t,o)=>{const r=u.core.subtract2(t,e),s=u.core.cross2(n,r);return o?s>0:s<0},ns=(n,e)=>n.faces_vertices[e]?n.faces_vertices[e].map(t=>n.vertices_coords[t]).reduce((t,o)=>[t[0]+o[0],t[1]+o[1]],[0,0]).map(t=>t/n.faces_vertices[e].length):[0,0],y8={F:!0,f:!0,U:!0,u:!0},V8={M:"V",m:"V",V:"M",v:"M"},x8=n=>V8[n]||n,es=(n,e)=>({center:n.faces_center[e],matrix:n.faces_matrix2[e],winding:n.faces_winding[e],crease:n.faces_crease[e],side:n.faces_side[e],layer:n.faces_layer[e]}),W2=(n,e,t,o="V",r=u.core.EPSILON)=>{const s=x8(o);Fe(n),n.faces_layer||(n.faces_layer=Array(n.faces_vertices.length).fill(0)),n.faces_center=n.faces_vertices.map((h,g)=>ns(n,g)),n.faces_matrix2||(n.faces_matrix2=P1(n,0)),n.faces_winding=O2(n.faces_matrix2),n.faces_crease=n.faces_matrix2.map(u.core.invertMatrix2).map(h=>u.core.multiplyMatrix2Line2(h,e,t)),n.faces_side=n.faces_vertices.map((h,g)=>Qr(n.faces_crease[g].vector,n.faces_crease[g].origin,n.faces_center[g],n.faces_winding[g]));const c=W0(n,n.faces_matrix2),i=b2({vertices_coords:c,edges_vertices:n.edges_vertices},e,t,r).map((h,g)=>h?g:void 0).filter(h=>h!==void 0).filter(h=>y8[n.edges_assignment[h]]);i.map(h=>n.edges_faces[h].find(g=>g!=null)).map(h=>n.faces_winding[h]).map(h=>h?o:s).forEach((h,g)=>{n.edges_assignment[i[g]]=h,n.edges_foldAngle[i[g]]=Mt(h)});const a=es(n,0),l=n.faces_vertices.map((h,g)=>g).reverse().map(h=>{const g=es(n,h),b=Ho(n,h,g.crease.vector,g.crease.origin,r);return b===void 0?void 0:(n.edges_assignment[b.edges.new]=g.winding?o:s,n.edges_foldAngle[b.edges.new]=Mt(n.edges_assignment[b.edges.new]),b.faces.map[b.faces.remove].forEach(x=>{n.faces_center[x]=ns(n,x),n.faces_side[x]=Qr(g.crease.vector,g.crease.origin,n.faces_center[x],g.winding),n.faces_layer[x]=g.layer}),b)}).filter(h=>h!==void 0),f=Fn(...l.map(h=>h.faces.map)),d=Fn(...l.map(h=>h.edges.map).filter(h=>h!==void 0)),m=l.map(h=>h.faces.remove).reverse();n.faces_layer=b8(n.faces_layer,n.faces_side);const _=f&&f[0]&&f[0].length===2,v=_?f[0].filter(h=>n.faces_side[h]).shift():0;let p=a.matrix;return o!==s&&(p=!_&&!n.faces_side[0]?a.matrix:u.core.multiplyMatrices2(a.matrix,u.core.makeMatrix2Reflect(a.crease.vector,a.crease.origin))),n.faces_matrix2=P1(n,v).map(h=>u.core.multiplyMatrices2(p,h)),delete n.faces_center,delete n.faces_winding,delete n.faces_crease,delete n.faces_side,{faces:{map:f,remove:m},edges:{map:d}}},yt={};yt.prototype=Object.create(Yo);yt.prototype.constructor=yt;yt.prototype.flatFold=function(){const n=u.core.getLine(arguments);return W2(this,n.vector,n.origin),this};var E8=yt.prototype;const Lt=n=>n.frame_classes&&n.frame_classes.includes("foldedForm")||n.file_classes&&n.file_classes.includes("foldedForm");var k8=Object.freeze({__proto__:null,isFoldedForm:Lt});const U2=({vertices_coords:n,edges_vertices:e,edges_coords:t},o=u.core.EPSILON)=>{t||(t=Bt({vertices_coords:n,edges_vertices:e}));const r=rt({vertices_coords:n,edges_vertices:e,edges_coords:t}),s=Array.from(Array(t.length)).map(()=>[]),c=r.length?r[0].min.length:0;for(let i=0;i<t.length-1;i+=1)for(let a=i+1;a<t.length;a+=1){let l=!0;for(let f=0;f<c;f+=1)(!u.core.fnEpsilonEqual(r[i].min[f],r[a].min[f],o)||!u.core.fnEpsilonEqual(r[i].max[f],r[a].max[f],o))&&(l=!1);s[i][a]=l,s[a][i]=l}for(let i=0;i<t.length-1;i+=1)for(let a=i+1;a<t.length;a+=1){if(!s[i][a])continue;const l=u.core.fnEpsilonEqualVectors(t[i][0],t[a][0],o)&&u.core.fnEpsilonEqualVectors(t[i][1],t[a][1],o),f=u.core.fnEpsilonEqualVectors(t[i][0],t[a][1],o)&&u.core.fnEpsilonEqualVectors(t[i][1],t[a][0],o),d=l||f;s[i][a]=d,s[a][i]=d}return xo(s)},Zo=({vertices_coords:n,edges_vertices:e,edges_vector:t},o)=>{t||(t=Wn({vertices_coords:n,edges_vertices:e}));const r=t.length,s=t.map(i=>u.core.normalize(i)),c=Array.from(Array(r)).map(()=>Array.from(Array(r)));for(let i=0;i<r-1;i+=1)for(let a=i+1;a<r;a+=1){const l=1-Math.abs(u.core.dot(s[i],s[a]))<o;c[i][a]=l,c[a][i]=l}return c},q2=(n,e,t,o,r)=>{for(let s=0;s<n.length-1;s+=1)for(let c=s+1;c<n.length;c+=1)!n[s][c]||(n[s][c]=u.core.overlapLineLine(e[s],t[s],e[c],t[c],o,o,r),n[c][s]=n[s][c])},w8=({vertices_coords:n,edges_vertices:e,edges_vector:t},o)=>{t||(t=Wn({vertices_coords:n,edges_vertices:e}));const r=e.map(c=>n[c[0]]),s=Zo({vertices_coords:n,edges_vertices:e,edges_vector:t},o).map(c=>c.map(i=>!i));for(let c=0;c<s.length;c+=1)s[c][c]=void 0;return q2(s,t,r,u.core.excludeS,o),s},G2=({vertices_coords:n,edges_vertices:e,edges_vector:t},o)=>{t||(t=Wn({vertices_coords:n,edges_vertices:e}));const r=e.map(c=>n[c[0]]),s=Zo({vertices_coords:n,edges_vertices:e,edges_vector:t},o);return q2(s,t,r,u.core.excludeS,o),s};var A8=Object.freeze({__proto__:null,makeEdgesEdgesSimilar:U2,makeEdgesEdgesParallel:Zo,makeEdgesEdgesCrossing:w8,makeEdgesEdgesParallelOverlap:G2});const H2=({vertices_coords:n,edges_vertices:e,edges_vector:t,edges_faces:o,faces_vertices:r},s)=>{t||(t=Wn({vertices_coords:n,edges_vertices:e}));const c=ne({vertices_coords:n,faces_vertices:r}),i=e.map(p=>n[p[0]]),a=e.map(()=>Array.from(Array(r.length)));o.forEach((p,h)=>p.forEach(g=>{a[h][g]=!1}));const l=U2({vertices_coords:n,edges_vertices:e}),f=e.map(p=>p.map(h=>n[h])),d=r.map(p=>p.map(h=>n[h]));for(let p=0;p<c.length;p+=1)c[p]||d[p].reverse();const m=rt({edges_coords:f}),_=d.map(p=>u.core.boundingBox(p));for(let p=0;p<a.length;p+=1)for(let h=0;h<a[p].length;h+=1)if(a[p][h]!==!1&&!u.core.overlapBoundingBoxes(_[h],m[p])){a[p][h]=!1;continue}const v={};for(let p=0;p<a.length;p+=1)if(!v[p]){for(let h=0;h<a[p].length;h+=1){if(a[p][h]!==void 0)continue;if(f[p].map(M=>u.core.overlapConvexPolygonPoint(d[h],M,u.core.exclude,s)).reduce((M,x)=>M||x,!1)){a[p][h]=!0;continue}if(u.core.intersectConvexPolygonLine(d[h],t[p],i[p],u.core.excludeS,u.core.excludeS,s)){a[p][h]=!0;continue}a[p][h]=!1}l[p].forEach(h=>{a[h]=a[p].slice(),v[h]=!0})}return a},Y0=({vertices_coords:n,faces_vertices:e},t=u.core.EPSILON)=>{const o=Array.from(Array(e.length)).map(()=>Array.from(Array(e.length))),r=e.map(i=>i.map(a=>n[a])),s=r.map(i=>u.core.boundingBox(i));for(let i=0;i<s.length-1;i+=1)for(let a=i+1;a<s.length;a+=1)u.core.overlapBoundingBoxes(s[i],s[a])||(o[i][a]=!1,o[a][i]=!1);const c=r.map(i=>u.core.makePolygonNonCollinear(i,t));for(let i=0;i<e.length-1;i+=1)for(let a=i+1;a<e.length;a+=1){if(o[i][a]===!1)continue;const l=u.core.overlapConvexPolygons(c[i],c[a],t);o[i][a]=l,o[a][i]=l}return o};var P8=Object.freeze({__proto__:null,makeEdgesFacesOverlap:H2,makeFacesFacesOverlap:Y0});const O8=n=>Array.from(Array(n.length-2)).map((e,t)=>[n[0],n[t+1],n[t+2]]),S8=({faces_vertices:n})=>n.flatMap(e=>e.length<4?[e]:O8(e));var j8=Object.freeze({__proto__:null,triangulateConvexFacesVertices:S8});const C8=(n,e)=>{const t={},o={};[me,An,Qn].forEach(s=>{t[s]=Array.from(Array(In[s](n))).map((c,i)=>i),o[s]=Ct(e[s]||[]).reverse()}),Object.keys(o).forEach(s=>o[s].forEach(c=>t[s].splice(c,1)));const r=JSON.parse(JSON.stringify(n));return Object.keys(t).forEach(s=>vn(r,s,t[s])),r};var B8=Object.assign(Object.create(null),{count:In,countImplied:Mn,validate:Ro,clean:p2,populate:Fe,remove:vn,replace:ko,removePlanarVertex:z2,removePlanarEdge:L2,addVertices:q0,addEdges:B2,splitEdge:G0,splitFace:Ho,flatFold:W2,addPlanarSegment:F2,subgraph:C8,clip:Xo,fragment:Do,getVerticesClusters:Vo,clone:Ae,foldKeys:Yc,foldFileClasses:R4,foldFrameClasses:D4,foldFrameAttributes:$4},l5,k5,o5,T5,G4,r5,_5,m5,k8,b5,P8,j8,E2,n5,f5,M5,A8,B5,O5,C5,L5,z5,J4);const fe={},Y2=(n,e)=>[[0,0],[n,0],[n,e],[0,e]],Jo=n=>Fe({vertices_coords:n,edges_vertices:n.map((e,t,o)=>[t,(t+1)%o.length]),edges_assignment:Array(n.length).fill("B")});fe.square=(n=1)=>Jo(Y2(n,n));fe.rectangle=(n=1,e=1)=>Jo(Y2(n,e));fe.polygon=(n=3,e=1)=>Jo(u.core.makePolygonCircumradius(n,e));fe.kite=()=>Fe({vertices_coords:[[0,0],[1,0],[1,Math.sqrt(2)-1],[1,1],[Math.sqrt(2)-1,1],[0,1]],edges_vertices:[[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[0,4],[0,3]],edges_assignment:Array.from("BBBBBBVVF")});const te=Object.create(null),l1={graph:Yo,cp:M8,origami:E8},F8={graph:()=>{},cp:fe.square,origami:fe.square},L8={graph:()=>({file_spec:c1,file_creator:i1}),cp:()=>({file_spec:c1,file_creator:i1,frame_classes:["creasePattern"]}),origami:()=>({file_spec:c1,file_creator:i1,frame_classes:["foldedForm"]})};Object.keys(l1).forEach(n=>{te[n]=function(){const e=Array.from(arguments).filter(t=>Kc(t)).map(t=>JSON.parse(JSON.stringify(t)));return Fe(Object.assign(Object.create(l1[n]),e.length?{}:F8[n](),...e,L8[n]()))},te[n].prototype=l1[n],te[n].prototype.constructor=te[n],Object.keys(fe).forEach(e=>{te[n][e]=function(){return te[n](fe[e](...arguments))}})});Object.assign(te.graph,B8);const z8=(n,e)=>{const t=u.core.cross2(n.normal,e.normal);if(Math.abs(t)<u.core.EPSILON)return;const o=n.distance*e.normal[1]-e.distance*n.normal[1],r=e.distance*n.normal[0]-n.distance*e.normal[0];return[o/t,r/t]},I8=(n,e)=>{const t=u.core.normalize2(u.core.rotate90(u.core.subtract2(e,n)));return{normal:t,distance:u.core.dot2(u.core.add2(n,e),t)/2}},T8=(n,e)=>{const t=u.core.normalize2(u.core.subtract2(e,n));return{normal:t,distance:u.core.dot2(u.core.add2(n,e),t)/2}},N8=(n,e)=>{const t=z8(n,e);return t===void 0?[{normal:n.normal,distance:(n.distance+e.distance*u.core.dot2(n.normal,e.normal))/2}]:[u.core.add2,u.core.subtract2].map(o=>u.core.normalize2(o(n.normal,e.normal))).map(o=>({normal:o,distance:u.core.dot2(t,o)}))},R8=(n,e)=>{const t=u.core.rotate90(n.normal),o=u.core.dot2(e,t);return{normal:t,distance:o}},D8=(n,e,t)=>{const o=u.core.dot2(e,n.normal),r=n.distance-o,s=u.core.distance2(e,t);if(r>s)return[];const c=Math.sqrt(s*s-r*r),i=u.core.scale2(n.normal,r),a=u.core.add2(e,i),l=u.core.scale2(u.core.rotate90(n.normal),c);return(c<u.core.EPSILON?[a]:[u.core.add2(a,l),u.core.subtract2(a,l)]).map(d=>u.core.normalize2(u.core.subtract2(t,d))).map(d=>({normal:d,distance:u.core.dot2(e,d)}))},ts=n=>n<0?-Math.pow(-n,1/3):Math.pow(n,1/3),$8=(n,e,t,o,r)=>{switch(n){case 1:return[-r/o];case 2:{const s=Math.pow(o,2)-4*t*r;if(s<-u.core.EPSILON)return[];const c=-o/(2*t);if(s<u.core.EPSILON)return[c];const i=Math.sqrt(s)/(2*t);return[c+i,c-i]}case 3:{const s=t/e,c=o/e,i=r/e,a=(3*c-Math.pow(s,2))/9,l=(9*s*c-27*i-2*Math.pow(s,3))/54,f=Math.pow(a,3)+Math.pow(l,2),d=-s/3;if(f>0){const g=Math.sqrt(f),b=ts(l+g),M=ts(l-g);return[d+b+M]}if(Math.abs(f)<u.core.EPSILON){const g=Math.pow(l,.3333333333333333);return l<0?[]:[d+2*g,d-g]}const m=Math.sqrt(-f),_=Math.atan2(m,l)/3,v=Math.pow(Math.pow(l,2)-f,1/6),p=v*Math.cos(_),h=v*Math.sin(_);return[d+2*p,d-p-Math.sqrt(3)*h,d-p+Math.sqrt(3)*h]}default:return[]}},X2=(n,e,t,o)=>{if(Math.abs(1-u.core.dot2(n.normal,t)/n.distance)<.02)return[];const r=u.core.rotate90(n.normal),s=u.core.subtract2(u.core.add2(t,u.core.scale2(n.normal,n.distance)),u.core.scale2(o,2)),c=u.core.subtract2(u.core.scale2(n.normal,n.distance),t),i=u.core.dot2(o,e.normal)-e.distance,a=2*u.core.dot2(c,r),l=u.core.dot2(c,c),f=u.core.dot2(u.core.add2(s,c),r),d=u.core.dot2(s,c),m=u.core.dot2(r,e.normal),_=u.core.dot2(c,e.normal),v=m,p=i+f*m+_,h=i*a+d*m+f*_,g=i*l+d*_;let b=0;return Math.abs(h)>u.core.EPSILON&&(b=1),Math.abs(p)>u.core.EPSILON&&(b=2),Math.abs(v)>u.core.EPSILON&&(b=3),$8(b,v,p,h,g).map(M=>u.core.add2(u.core.scale2(n.normal,n.distance),u.core.scale2(r,M))).map(M=>({p:M,normal:u.core.normalize2(u.core.subtract2(M,t))})).map(M=>({normal:M.normal,distance:u.core.dot2(M.normal,u.core.midpoint2(M.p,t))}))},W8=(n,e,t)=>{const o=u.core.rotate90(n.normal),r=u.core.dot2(o,e.normal);if(Math.abs(r)<u.core.EPSILON)return;const s=u.core.dot2(t,o),c=u.core.dot2(t,e.normal),i=(e.distance+2*s*r-c)/(2*r);return{normal:o,distance:i}};var O1=Object.freeze({__proto__:null,normalAxiom1:I8,normalAxiom2:T8,normalAxiom3:N8,normalAxiom4:R8,normalAxiom5:D8,normalAxiom6:X2,normalAxiom7:W8});const U8=(n,e)=>({vector:u.core.normalize2(u.core.subtract2(...u.core.resizeUp(e,n))),origin:n}),q8=(n,e)=>({vector:u.core.normalize2(u.core.rotate90(u.core.subtract2(...u.core.resizeUp(e,n)))),origin:u.core.midpoint2(n,e)}),G8=(n,e)=>u.core.bisectLines2(n.vector,n.origin,e.vector,e.origin),H8=(n,e)=>({vector:u.core.rotate90(u.core.normalize2(n.vector)),origin:e}),Y8=(n,e,t)=>(u.core.intersectCircleLine(u.core.distance2(e,t),e,n.vector,n.origin,u.core.include_l)||[]).map(o=>({vector:u.core.normalize2(u.core.rotate90(u.core.subtract2(...u.core.resizeUp(o,t)))),origin:u.core.midpoint2(t,o)})),X8=(n,e,t,o)=>X2(u.core.rayLineToUniqueLine(n),u.core.rayLineToUniqueLine(e),t,o).map(u.core.uniqueLineToRayLine),Z8=(n,e,t)=>{const o=u.core.intersectLineLine(n.vector,n.origin,e.vector,t,u.core.include_l,u.core.include_l);return o===void 0?void 0:{vector:u.core.normalize2(u.core.rotate90(u.core.subtract2(...u.core.resizeUp(o,t)))),origin:u.core.midpoint2(t,o)}};var S1=Object.freeze({__proto__:null,axiom1:U8,axiom2:q8,axiom3:G8,axiom4:H8,axiom5:Y8,axiom6:X8,axiom7:Z8});const Vt=(n,e)=>{switch(n){case 3:case"3":case 5:case"5":case 6:case"6":return e;case 7:case"7":return e===void 0?[]:[e];default:return[e]}},J8=(n,e)=>{switch(n){case 3:case"3":case 5:case"5":case 6:case"6":return e;default:return e?e[0]:void 0}},Je=(n,e)=>{const t=u.core.makeMatrix2Reflect(n.vector,n.origin);return u.core.multiplyMatrix2Vector2(t,e)},Ko=(n,e)=>n.points.map(t=>u.core.overlapConvexPolygonPoint(e,t,u.core.include)).reduce((t,o)=>t&&o,!0),Z2=Ko,J2=(n,e,t)=>{const o=n.lines.map(a=>u.core.clipLineConvexPolygon(e,a.vector,a.origin,u.core.include,u.core.includeL));if(o[0]===void 0||o[1]===void 0)return[!1,!1];const r=t.map(a=>a===void 0?void 0:u.core.clipLineConvexPolygon(e,a.vector,a.origin,u.core.include,u.core.includeL)),s=[0,1].map(a=>r[a]!==void 0),i=t.map(a=>a===void 0?void 0:[Je(a,o[0][0]),Je(a,o[0][1])]).map(a=>a===void 0?!1:u.core.overlapLinePoint(u.core.subtract(o[1][1],o[1][0]),o[1][0],a[0],u.core.includeS)||u.core.overlapLinePoint(u.core.subtract(o[1][1],o[1][0]),o[1][0],a[1],u.core.includeS)||u.core.overlapLinePoint(u.core.subtract(a[1],a[0]),a[0],o[1][0],u.core.includeS)||u.core.overlapLinePoint(u.core.subtract(a[1],a[0]),a[0],o[1][1],u.core.includeS));return[0,1].map(a=>i[a]===!0&&s[a]===!0)},K2=(n,e)=>{const t=u.core.intersectLineLine(n.lines[0].vector,n.lines[0].origin,u.core.rotate90(n.lines[0].vector),n.points[0],u.core.includeL,u.core.includeL);return[n.points[0],t].filter(o=>o!==void 0).map(o=>u.core.overlapConvexPolygonPoint(e,o,u.core.include)).reduce((o,r)=>o&&r,!0)},Q2=(n,e,t)=>{if(t.length===0)return[];const o=n.points.map(s=>u.core.overlapConvexPolygonPoint(e,s,u.core.include)).reduce((s,c)=>s&&c,!0);return t.map(s=>Je(s,n.points[1])).map(s=>u.core.overlapConvexPolygonPoint(e,s,u.core.include)).map(s=>s&&o)},ni=function(n,e,t){if(t.length===0)return[];if(!n.points.map(c=>u.core.overlapConvexPolygonPoint(e,c,u.core.include)).reduce((c,i)=>c&&i,!0))return t.map(()=>!1);const r=t.map(c=>Je(c,n.points[0])).map(c=>u.core.overlapConvexPolygonPoint(e,c,u.core.include)),s=t.map(c=>Je(c,n.points[1])).map(c=>u.core.overlapConvexPolygonPoint(e,c,u.core.include));return t.map((c,i)=>r[i]&&s[i])},ei=(n,e,t)=>{const o=u.core.overlapConvexPolygonPoint(e,n.points[0],u.core.include);if(t===void 0)return[!1];const r=Je(t,n.points[0]),s=u.core.overlapConvexPolygonPoint(e,r,u.core.include),c=u.core.intersectConvexPolygonLine(e,n.lines[1].vector,n.lines[1].origin,u.core.includeS,u.core.includeL)!==void 0,i=u.core.intersectLineLine(n.lines[1].vector,n.lines[1].origin,t.vector,t.origin,u.core.includeL,u.core.includeL),a=i?u.core.overlapConvexPolygonPoint(e,i,u.core.include):!1;return o&&s&&c&&a},K8=(n,e,t,o)=>Vt(n,[null,Ko,Z2,J2,K2,Q2,ni,ei][n](e,t,J8(n,o)));var V0=Object.freeze({__proto__:null,validateAxiom1:Ko,validateAxiom2:Z2,validateAxiom3:J2,validateAxiom4:K2,validateAxiom5:Q2,validateAxiom6:ni,validateAxiom7:ei,validate:K8});const Q8=n=>({points:n.points,lines:n.lines.map(u.core.uniqueLineToRayLine)}),ti=n=>{const e=n.lines?n.lines:[],t=n.points?n.points:[];return[...e,...t]},oi=(n,e={},t)=>{const o=Vt(n,S1[`axiom${n}`](...ti(e))).map(r=>u.line(r));return t&&Vt(n,V0[`validateAxiom${n}`](e,t,o)).forEach((r,s)=>r?s:void 0).filter(r=>r!==void 0).forEach(r=>delete o[r]),o},nl=(n,e={},t)=>{const o=Vt(n,O1[`normalAxiom${n}`](...ti(e))).map(r=>u.line.fromNormalDistance(r));return t&&Vt(n,V0[`validateAxiom${n}`](Q8(e),t,o)).forEach((r,s)=>r?s:void 0).filter(r=>r!==void 0).forEach(r=>delete o[r]),o};var os=Object.freeze({__proto__:null,axiomInBoundary:oi,normalAxiomInBoundary:nl});const bn=(n,e={},t)=>oi(n,e,t);Object.keys(S1).forEach(n=>{bn[n]=S1[n]});Object.keys(O1).forEach(n=>{bn[n]=O1[n]});Object.keys(os).forEach(n=>{bn[n]=os[n]});Object.keys(V0).forEach(n=>{bn[n]=V0[n]});const ri=(n,e)=>u.core.intersectLineLine(n.vector,n.origin,e.vector,e.origin,u.core.includeL,u.core.includeL),Qo=(n,e)=>{const t=u.core.makeMatrix2Reflect(n.vector,n.origin);return u.core.multiplyMatrix2Vector2(t,e)},si=({vertices_coords:n})=>u.core.convexHull(n),nr=(n,e,t)=>{const o=si(n);if(t===void 0){const i=u.core.clipLineConvexPolygon(o,e.vector,e.origin,u.core.exclude,u.core.includeL);t=u.core.midpoint(...i)}const r=u.core.rotate270(e.vector),s=u.core.clipLineConvexPolygon(o,r,t,u.core.exclude,u.core.includeL).map(i=>u.core.distance(t,i)).sort((i,a)=>i-a).shift(),c=u.core.scale(u.core.normalize(r),s);return u.segment(u.core.add(t,u.core.flip(c)),u.core.add(t,c))},el=(n,e,t)=>{const o=e.map(i=>u.core.midpoint(i[0],i[1])),r=u.line.fromPoints(...o),s=u.intersect(t,r),c=u.line(t.vector.rotate90(),s);return u.segment(n.lines.map(i=>u.intersect(i,c)))},tl=(n,e,t,o)=>{const r=n.lines.map(g=>g.vector),s=r.map(u.core.flip),c=r.concat(s).map(g=>u.ray(g,e)),i=c.filter(g=>u.core.dot(g.vector,t.vector)>0&&u.core.cross2(g.vector,t.vector)>0).shift(),a=c.filter(g=>u.core.dot(g.vector,t.vector)>0&&u.core.cross2(g.vector,t.vector)<0).shift(),l=c.filter(g=>u.core.dot(g.vector,t.vector)<0&&u.core.cross2(g.vector,t.vector)>0).shift(),f=c.filter(g=>u.core.dot(g.vector,t.vector)<0&&u.core.cross2(g.vector,t.vector)<0).shift(),d=[i,a,l,f].map(g=>u.core.intersectConvexPolygonLine(o,g.vector,g.origin,u.core.excludeS,u.core.excludeR).shift().shift()),m=d.map(g=>u.core.distance(g,e)),_=m[0]<m[1]?d[0]:d[1],v=m[0]<m[1]?u.core.add(a.origin,a.vector.normalize().scale(m[0])):u.core.add(i.origin,i.vector.normalize().scale(m[1])),p=m[2]<m[3]?d[2]:d[3],h=m[2]<m[3]?u.core.add(f.origin,f.vector.normalize().scale(m[2])):u.core.add(l.origin,l.vector.normalize().scale(m[3]));return[u.segment(_,v),u.segment(p,h)]},ol=(n,e)=>bn(1,n).map(t=>[nr(e,t)]),rl=n=>[[u.segment(n.points)]],sl=(n,e)=>{const t=si(e),o=n.lines.map(c=>u.core.clipLineConvexPolygon(t,c.vector,c.origin,u.core.exclude,u.core.includeL)),r=o.map(c=>u.core.subtract(c[1],c[0])),s=u.core.intersectLineLine(r[0],o[0][0],r[1],o[1][0],u.core.excludeS,u.core.excludeS);return s?bn(3,n).map(c=>tl(n,s,c,t)):[el(n,o,bn(3,n).filter(c=>c!==void 0).shift())]},cl=(n,e)=>bn(4,n).map(t=>[nr(e,t,ri(t,n.lines[0]))]),il=n=>bn(5,n).map(e=>[u.segment(n.points[1],Qo(e,n.points[1]))]),al=n=>bn(6,n).map(e=>n.points.map(t=>u.segment(t,Qo(e,t)))),ll=(n,e)=>bn(7,n).map(t=>[u.segment(n.points[0],Qo(t,n.points[0])),nr(e,t,ri(t,n.lines[1]))]),er=[null,ol,rl,sl,cl,il,al,ll];delete er[0];const j1=(n,e={},...t)=>{const o=e.points?e.points.map(s=>u.core.getVector(s)):void 0,r=e.lines?e.lines.map(s=>u.core.getLine(s)):void 0;return er[n]({points:o,lines:r},...t)};Object.keys(er).forEach(n=>{j1[n]=(...e)=>j1(n,...e)});const ul=({vertices_coords:n})=>u.core.convexHull(n),fl=(n,e,t)=>{if(t===void 0){const c=u.core.clipLineConvexPolygon(n,e.vector,e.origin,u.core.exclude,u.core.includeL);if(c===void 0)return;t=u.core.midpoint(...c)}const o=u.core.rotate90(e.vector),r=u.core.clipLineConvexPolygon(n,o,t,u.core.exclude,u.core.includeL).map(c=>u.core.distance(t,c)).sort((c,i)=>c-i).shift(),s=u.core.scale(u.core.normalize(o),r);return u.segment(u.core.add(t,u.core.flip(s)),u.core.add(t,s))},dl=(n,e)=>{const t=ul(n),o=u.core.boundingBox(t),r=fl(t,e);if(r===void 0)return;const s=u.core.subtract(r[1],r[0]),c=u.core.magnitude(s),i=u.core.dot(s,[1,0]),a=o.span[0]<o.span[1]?o.span[0]:o.span[1];return r.head={width:a*.1,height:a*.15},r.bend=i>0?.3:-.3,r.padding=c*.05,r};var ml=Object.assign(Object.create(null),{axiom_arrows:j1,simple_arrow:dl});const hl=n=>Tn(Tn(n).reverse()),pl=(n,e)=>{const t=[],o=ne(n);return(n.edges_faces?n.edges_faces:i2(n)).forEach((s,c)=>{if(s.length===1&&(t[c]="B"),s.length===2){const i=s.map(d=>o[d]);if(i[0]===i[1]){t[c]="F";return}const a=s.map(d=>e[d]),l=a[0]<a[1],f=i[0]?l:!l;t[c]=f?"V":"M"}}),t},gl=n=>{const t=Object.keys(n).map(s=>s.split(" ").map(c=>parseInt(c,10))),o=[];t.reduce((s,c)=>s.concat(c),[]).forEach(s=>{o[s]=void 0});const r=o.map(()=>[]);return t.forEach(([s,c])=>{r[s][c]=n[`${s} ${c}`],r[c][s]=-n[`${s} ${c}`]}),r};var _l=Object.freeze({__proto__:null,flipFacesLayer:hl,facesLayerToEdgesAssignments:pl,ordersToMatrix:gl});const ci=(n,e,t)=>{const o=n.map(s=>s?(s[0]+s[1])/2:void 0),r=[];return n.forEach((s,c)=>{if(!s||!e&&c===n.length-1)return;const i=s[1],a=i-t*2,l=i+t*2,f=[c,(c+1)%n.length],d=f.map(p=>o[p]).map(p=>p>i),m=(!d[0]&&!d[1])*1+(d[0]&&d[1])*2,_=r.filter(p=>p.min<i&&p.max>i).shift(),v={faces:f,taco_type:m};_?_.pairs.push(v):r.push({min:a,max:l,pairs:[v]})}),r.map(s=>s.pairs).filter(s=>s.length>1).map(s=>({both:s.filter(c=>c.taco_type===0).map(c=>c.faces),left:s.filter(c=>c.taco_type===1).map(c=>c.faces),right:s.filter(c=>c.taco_type===2).map(c=>c.faces)}))},vl=(n,e,t)=>e<t?n.slice(e+1,t):n.slice(t+1,e),ii=(n,e,t=!0,o=u.core.EPSILON)=>{const r=Tn(e),s=n.map(l=>l?l[1]:void 0),c=n.map(l=>l?Math.min(...l):void 0).map(l=>l+o),i=n.map(l=>l?Math.max(...l):void 0).map(l=>l-o),a=r.length+(t?0:-1);for(let l=0;l<a;l+=1){const f=(l+1)%r.length;if(r[l]===r[f])continue;const d=vl(e,r[l],r[f]).flat(),m=d.map(v=>s[l]<c[v]).reduce((v,p)=>v&&p,!0),_=d.map(v=>s[l]>i[v]).reduce((v,p)=>v&&p,!0);if(!m&&!_)return!1}return!0},ai=n=>{const e=n2(n),t={};let o=0;for(let r=0;r<e.length;r+=1)if(t[e[r]]===void 0)o+=1,t[e[r]]=o;else if(t[e[r]]!==void 0){if(t[e[r]]!==o)return!1;o-=1,t[e[r]]=void 0}return!0},Ml=(n,e)=>n.map(t=>e[t]).filter(t=>t!==void 0),li=(n,e,t,o,r)=>{const s=u.core.flattenArrays(e);if(!ii(n,e,o,r))return!1;for(let c=0;c<t.length;c+=1){const i=Ml(s,t[c]);if(!ai(i))return!1}return!0},bl={V:!0,v:!0,M:!0,m:!0},yl=n=>{let e=0;const t=n.slice(1);return[!1].concat(t.map(o=>bl[o]?++e:e).map(o=>o%2===1))},C1={V:1,v:1,M:-1,m:-1},Vl=(n,e)=>e%2===0?C1[n]||0:-(C1[n]||0),xl=n=>{let e=0;return n.slice(1).concat([n[0]]).map(t=>{const o=Vl(t,e);return e+=C1[t]===void 0?0:1,o})},ui=(n,e)=>{const t=yl(e).map((r,s)=>n[s]*(r?-1:1)),o=n.map(()=>{});o[0]=[0,t[0]];for(let r=1;r<n.length&&!(e[r]==="B"||e[r]==="b");r+=1){const s=(r-1+n.length)%n.length,c=o[s][1];o[r]=[c,c+t[r]]}return o},El={B:!0,b:!0},fi=(n,e,t=u.core.EPSILON)=>{const o=ui(n,e),r=xl(e),s=e.map(a=>!El[a]).reduce((a,l)=>a&&l,!0);if(s){const a=o[0][0],l=o[o.length-1][1];if(Math.abs(a-l)>t)return[]}const c=ci(o,s,t).map(a=>[a.left,a.right].map(Tn).filter(l=>l.length>1)).reduce((a,l)=>a.concat(l),[]),i=(a=[0],l=0,f=0)=>{const d=l+1,m=r[l],_=l>=n.length-1,v=s&&_;if(!li(o,a,c,v,t))return[];if(v){const g=Tn(a),b=g[0],M=g[l];if(m>0&&M>b)return[];if(m<0&&M<b)return[]}if(_)return[a];if(m===0)return a[f]=[d].concat(a[f]),i(a,d,f);const p=m===1?Array.from(Array(a.length-f)).map((g,b)=>f+b+1):Array.from(Array(f+1)).map((g,b)=>b),h=p.map(()=>Ae(a));return h.forEach((g,b)=>g.splice(p[b],0,d)),h.map((g,b)=>i(g,d,p[b])).reduce((g,b)=>g.concat(b),[])};return i().map(Tn)},kl=n=>n.map((e,t)=>t).filter(e=>n[e]==="U"||n[e]==="u"),di=n=>{const e=kl(n),o=Array.from(Array(2**e.length)).map((c,i)=>i.toString(2)).map(c=>Array(e.length-c.length+1).join("0")+c).map(c=>Array.from(c).map(i=>i==="0"?"V":"M")).map(c=>{const i=n.slice();return e.forEach((a,l)=>{i[a]=c[l]}),i});if(n.includes("B")||n.includes("b"))return o;const r=o.map(c=>c.filter(i=>i==="M"||i==="m").length),s=o.map(c=>c.filter(i=>i==="V"||i==="v").length);return o.filter((c,i)=>Math.abs(r[i]-s[i])===2)},wl=(n,e,t)=>{e==null&&(e=n.map(()=>"U"));const o=di(e),r=o.map(s=>fi(n,s,t));return o.map((s,c)=>c).filter(s=>r[s].length>0).map(s=>({assignment:o[s],layer:r[s]}))},Al=["111112","111121","111222","112111","121112","121222","122111","122212","211121","211222","212111","212221","221222","222111","222212","222221"],Pl=["112","121","212","221"],Ol=["11","22"],Sl=["112","121","122","211","212","221"],jl=(n,e,t)=>{const o=Array.from(t).map(s=>parseInt(s,10));if(o.filter(s=>s===0).length!==e)return;n[e][t]=!1;let r=!1;for(let s=0;s<o.length;s+=1){const c=[];if(o[s]===0){for(let i=1;i<=2;i+=1)o[s]=i,n[e-1][o.join("")]!==!1&&c.push([s,i]);o[s]=0,c.length>0&&r===!1&&(r=[]),c.length===1&&r.push(c[0])}}r!==!1&&r.length===0&&(r=!0),n[e][t]=r},Jt=n=>{const e=n[0].length,t=Array.from(Array(e+1)).map(()=>({}));Array.from(Array(Math.pow(2,e))).map((s,c)=>c.toString(2)).map(s=>Array.from(s).map(c=>parseInt(c,10)+1).join("")).map(s=>`11111${s}`.slice(-e)).forEach(s=>{t[0][s]=!1}),n.forEach(s=>{t[0][s]=!0}),Array.from(Array(e)).map((s,c)=>c+1).map(s=>Array.from(Array(Math.pow(3,e))).map((c,i)=>i.toString(3)).map(c=>`000000${c}`.slice(-e)).forEach(c=>jl(t,s,c)));let o=[];Array.from(Array(e+1)).map((s,c)=>e-c).forEach(s=>{const c=[];Object.keys(t[s]).forEach(i=>{let a=t[s][i];a.constructor===Array&&(a=a[0]),c.push([i,a])}),o=o.concat(c)}),o.sort((s,c)=>parseInt(s[0],10)-parseInt(c[0],10));const r={};return o.forEach(s=>{r[s[0]]=Object.freeze(s[1])}),Object.freeze(r)},ht={taco_taco:Jt(Al),taco_tortilla:Jt(Pl),tortilla_tortilla:Jt(Ol),transitivity:Jt(Sl)},Cl={taco_taco:n=>[[n[0],n[2]],[n[1],n[3]],[n[1],n[2]],[n[0],n[3]],[n[0],n[1]],[n[2],n[3]]],taco_tortilla:n=>[[n[0],n[2]],[n[0],n[1]],[n[1],n[2]]],tortilla_tortilla:n=>[[n[0],n[2]],[n[1],n[3]]],transitivity:n=>[[n[0],n[1]],[n[1],n[2]],[n[2],n[0]]]},un=n=>n[0]<n[1]?`${n[0]} ${n[1]}`:`${n[1]} ${n[0]}`,mi={taco_taco:n=>[un([n[0],n[2]]),un([n[1],n[3]]),un([n[1],n[2]]),un([n[0],n[3]]),un([n[0],n[1]]),un([n[2],n[3]])],taco_tortilla:n=>[un([n[0],n[2]]),un([n[0],n[1]]),un([n[1],n[2]])],tortilla_tortilla:n=>[un([n[0],n[2]]),un([n[1],n[3]])],transitivity:n=>[un([n[0],n[1]]),un([n[1],n[2]]),un([n[2],n[0]])]},Bl={0:0,1:1,2:-1},Fl=n=>(Object.keys(n).forEach(e=>{n[e]=Bl[n[e]]}),n),B1=Object.freeze(Object.keys(ht)),rs={0:0,1:2,2:1},Ll=(n,e,...t)=>{const o=Cl[n](e),r=o.map(f=>f[1]<f[0]),s=o.map((f,d)=>r[d]?`${f[1]} ${f[0]}`:`${f[0]} ${f[1]}`),c=s.map((f,d)=>{for(let m=0;m<t.length;m+=1)if(t[m][f])return r[d]?rs[t[m][f]]:t[m][f];return 0}).join("");if(ht[n][c]===!0)return!0;if(ht[n][c]===!1)return!1;const i=ht[n][c],a=s[i[0]],l=r[i[0]]?rs[i[1]]:i[1];return[a,l]},zl=(n,e,t)=>{const o={};return B1.forEach(r=>{const s=t.flatMap(c=>e[r][c]);o[r]=z0(s).filter(c=>n[r][c])}),o},hi=(n,e,t,...o)=>{let r=t;const s={};do{const c=zl(n,e,r),i={};for(let a=0;a<B1.length;a+=1){const l=B1[a],f=c[l];for(let d=0;d<f.length;d+=1){const m=Ll(l,n[l][f[d]],...o,s);if(m!==!0){if(m===!1)return console.warn("invalid state found",l,n[l][f[d]]),!1;if(s[m[0]]){if(s[m[0]]!==m[1])return console.warn("order conflict",l,n[l][f[d]]),!1}else{const[_,v]=m;i[_]=!0,s[m[0]]=v}}}}r=Object.keys(i)}while(r.length);return s},pi=(n,e,t,o={})=>{const r=Object.keys(e),s={};n.forEach(a=>{s[a]=!0});let c=0;const i=[];for(;c<n.length;){if(!s[n[c]]){c+=1;continue}const a=[],l=[n[c]],f={[n[c]]:!0};do{const d=l.shift();delete s[d],a.push(d);let m;if(o[d])m=o[d];else{const v={};r.forEach(p=>{const h=t[p][d];!h||h.map(g=>e[p][g]).map(g=>mi[p](g).forEach(b=>{v[b]=!0}))}),m=Object.keys(v),o[d]=m}const _=m.filter(v=>s[v]).filter(v=>!f[v]);l.push(..._),_.forEach(v=>{f[v]=!0})}while(l.length);c+=1,i.push(a)}return i},Il=(n,e,t)=>{const o=ne(n),r=d2(n,t);for(let f=0;f<r.length;f+=1)o[f]||r[f].reverse();const s=e.map(f=>f.length===2&&f[0]!==f[1]).map((f,d)=>f?d:void 0).filter(f=>f!==void 0),c=s.map(f=>n.edges_vertices[f]).map(f=>f.map(d=>n.vertices_coords[d])),i=c.map(f=>u.core.subtract2(f[1],f[0])),a=[];return s.forEach(f=>{a[f]=[]}),s.map((f,d)=>r.map(m=>u.core.clipLineConvexPolygon(m,i[d],c[d][0],u.core.exclude,u.core.excludeS,t)).map(m=>m!==void 0)).forEach((f,d)=>f.forEach((m,_)=>{m&&a[s[d]].push(_)})),a},Tl=(n,e,t)=>Il(n,e,t).map((s,c)=>s.map(i=>[n.edges_faces[c],[i,i]])).reduce((s,c)=>s.concat(c),[]),Nl=(n,e)=>{const t=n.edges_vertices.map(r=>n.vertices_coords[r[0]]),o=n.edges_vertices.map(r=>u.core.subtract2(n.vertices_coords[r[1]],n.vertices_coords[r[0]]));return n.edges_faces.map((r,s)=>r.map(c=>u.core.cross2(u.core.subtract2(e[c],t[s]),o[s])).map(c=>Math.sign(c)))},Rl=(n,e,t,o)=>{const r=t.map(a=>n.edges_vertices[a[0]].map(l=>n.vertices_coords[l])),s=r.map(a=>a[0]),c=r.map(a=>u.core.subtract2(a[1],a[0]));return o.map(a=>a.map(l=>l.map(f=>e[f]))).map((a,l)=>a.map(f=>f.map(d=>u.core.cross2(u.core.subtract2(d,s[l]),c[l])).map(d=>Math.sign(d))))},Dl=n=>{if(n[0]===1&&n[1]===-1||n[0]===-1&&n[1]===1)return"both";if(n[0]===1&&n[1]===1)return"right";if(n[0]===-1&&n[1]===-1)return"left"},$l=n=>n[0]===n[1]&&n[0]!=="both",Wl=n=>n[0]===n[1]&&n[0]==="both",Ul=n=>n[0]!==n[1]&&(n[0]==="both"||n[1]==="both"),ql=(n,e,t)=>{const o=e[0]==="left"||e[1]==="left"?-1:1,r=e[0]==="both"?[...n[1]]:[...n[0]],s=e[0]==="both"?0:1,c=t[s][0]===o?n[s][0]:n[s][1];return{taco:r,tortilla:c}},Gl=(n,e)=>{if(n!==void 0)return e[0][0]===e[1][0]?n:[n[0],[n[1][1],n[1][0]]]},gi=(n,e=u.core.EPSILON)=>{const t=N0(n),o=Nl(n,t),r=G2(n,e),s=Eo(r).filter(M=>M.map(x=>n.edges_faces[x].length>1).reduce((x,L)=>x&&L,!0)),c=s.map(M=>M.map(x=>n.edges_faces[x])),i=Rl(n,t,s,c),a=i.map(M=>M.map(Dl)),l=a.map((M,x)=>$l(M)?c[x]:void 0).filter(M=>M!==void 0),f=a.map((M,x)=>Wl(M)?c[x]:void 0).map((M,x)=>Gl(M,i[x])).filter(M=>M!==void 0),d=Tl(n,o,e),m=f.concat(d),_=a.map((M,x)=>Ul(M)?ql(c[x],a[x],i[x]):void 0).filter(M=>M!==void 0),v=H2(n,e),g=xo(v).map((M,x)=>o[x].length>1&&o[x][0]===o[x][1]?M:[]).map((M,x)=>({taco:n.edges_faces[x],tortillas:M})).filter(M=>M.tortillas.length).flatMap(M=>M.tortillas.map(x=>({taco:[...M.taco],tortilla:x}))),b=_.concat(g);return{taco_taco:l,tortilla_tortilla:m,taco_tortilla:b}},_i=(n,e,t,o=u.core.EPSILON)=>{e||(e=Y0(n,o)),t||(t=ne(n));const r=n.faces_vertices.map(i=>i.map(a=>n.vertices_coords[a]));r.forEach((i,a)=>{t[a]||i.reverse()});const s=n.faces_vertices.map(()=>[]);for(let i=0;i<s.length-1;i+=1)for(let a=i+1;a<s.length;a+=1){if(!e[i][a])continue;const l=u.core.clipPolygonPolygon(r[i],r[a],o);l&&(s[i][a]=l)}const c=[];for(let i=0;i<s.length-1;i+=1)for(let a=i+1;a<s.length;a+=1)if(!!s[i][a])for(let l=a+1;l<s.length;l+=1){if(i===l||a===l||!e[i][l]||!e[a][l])continue;u.core.clipPolygonPolygon(s[i][a],r[l],o)&&c.push([i,a,l].sort((d,m)=>d-m))}return c},Hl=(n,e)=>{const t={};return e.taco_taco.map(o=>[o[0][0],o[0][1],o[1][0],o[1][1]].sort((r,s)=>r-s)).forEach(o=>[`${o[0]} ${o[1]} ${o[2]}`,`${o[0]} ${o[1]} ${o[3]}`,`${o[0]} ${o[2]} ${o[3]}`,`${o[1]} ${o[2]} ${o[3]}`].forEach(r=>{t[r]=!0})),e.taco_tortilla.map(o=>[o.taco[0],o.taco[1],o.tortilla].sort((r,s)=>r-s).join(" ")).forEach(o=>{t[o]=!0}),n.filter(o=>t[o.join(" ")]===void 0)},Yl=(n,e)=>{const t={};return t.taco_taco=n.taco_taco.map(o=>[o[0][0],o[1][0],o[0][1],o[1][1]]),t.taco_tortilla=n.taco_tortilla.map(o=>[o.taco[0],o.tortilla,o.taco[1]]),t.tortilla_tortilla=n.tortilla_tortilla.map(o=>[o[0][0],o[0][1],o[1][0],o[1][1]]),t.transitivity=e.map(o=>[o[0],o[1],o[2]]),t},Xl=n=>{const e={};return Object.keys(n).forEach(t=>{e[t]={}}),Object.keys(n).forEach(t=>{n[t].forEach((o,r)=>mi[t](o).forEach(s=>{e[t][s]===void 0&&(e[t][s]=[]),e[t][s].push(r)}))}),e},ss={0:0,1:2,2:1},Zl={M:1,m:1,V:2,v:2},vi=(n,e)=>(e||(e=Y0(n)),Eo(e).map(t=>t.join(" "))),Mi=(n,e,t)=>{t||(t=ne(n));const o={};e.forEach(s=>{o[s]=!0});const r={};return n.edges_faces.forEach((s,c)=>{const i=n.edges_assignment[c],a=Zl[i];if(s.length<2||a===void 0)return;const f=t[s[0]]?a:ss[a],d=`${s[0]} ${s[1]}`,m=`${s[1]} ${s[0]}`;d in o&&(r[d]=f),m in o&&(r[m]=ss[f])}),r};var Jl=Object.freeze({__proto__:null,makeFacePairs:vi,solveEdgeAdjacentFacePairs:Mi});const Kl=(n,e=1e-6)=>{const t=Y0(n,e),o=ne(n),r=gi(n,e),s=_i(n,t,o,e),c=Hl(s,r),i=Yl(r,c),a=Xl(i),l=vi(n,t),f=Mi(n,l,o);return{constraints:i,constraintsLookup:a,facePairs:l,edgeAdjacentOrders:f}},bi=(n,e)=>{if(!n)return[];const t=[];Object.keys(n).forEach(c=>{const i=c.split(" ").map(a=>parseInt(a,10));n[c]===-1&&i.reverse(),t[i[0]]===void 0&&(t[i[0]]=[]),t[i[0]].push(i[1])}),e&&e.faces_vertices&&e.faces_vertices.forEach((c,i)=>{t[i]===void 0&&(t[i]=[])});const o=[],r=[];let s=0;for(let c=0;c<t.length;c+=1){if(r[c])continue;const i=[c];for(;i.length&&s<t.length*2;){const a=i[i.length-1];if(t[a]&&t[a].length){const l=t[a].pop();r[l]||i.push(l);continue}else o.push(a),r[a]=!0,i.pop();s+=1}}return s>=t.length*2&&console.warn("fix protection in topological order"),o},Ql=n=>{const e=Object.keys(n),t=e.map(o=>o.split(" ").map(r=>parseInt(r,10)));return t.map((o,r)=>o.push(n[e[r]])),t},u1=n=>{const e=n.reduce((o,r)=>o*r,1),t=n.slice();for(let o=t.length-2;o>=0;o-=1)t[o]*=t[o+1];return t.push(1),t.shift(),Array.from(Array(e)).map((o,r)=>n.map((s,c)=>Math.floor(r/t[c])%s))},n6={count:function(){return this.branches.map(n=>n.length)},solution:function(...n){const e=Array(this.branches.length).fill(0).map((o,r)=>n[r]!=null?n[r]:o),t=this.branches?this.branches.map((o,r)=>o[e[r]]):[];return Object.assign({},this.root,...t)},allSolutions:function(){return u1(this.count()).map(n=>this.solution(...n))},facesLayer:function(...n){return Tn(bi(this.solution(...n)))},allFacesLayers:function(){return u1(this.count()).map(n=>this.facesLayer(...n))},faceOrders:function(...n){return Ql(this.solution(...n))},allFaceOrders:function(){return u1(this.count()).map(n=>this.faceOrders(...n))}},yi=(n,e,t,o,...r)=>{if(!o.length)return[];const s=o[0],c=[],i=[];[1,2].forEach(l=>{const f=hi(n,e,[s],...r,{[s]:l});f!==!1&&(f[s]=l,Object.keys(f).length===o.length?c.push(f):i.push(f))});const a=i.map(l=>{const f=o.filter(d=>!(d in l));return pi(f,n,e,t).map(d=>yi(n,e,t,d,...r,l))});return c.map(l=>[...r,l]).concat(...a)},e6=(n,e=1e-6)=>{const t=new Date,{constraints:o,constraintsLookup:r,facePairs:s,edgeAdjacentOrders:c}=Kl(n,e),i=Date.now()-t,a=new Date,l=hi(o,r,Object.keys(c),c);if(!l)return;const f=s.filter(h=>!(h in c)).filter(h=>!(h in l)),d={},_=pi(f,o,r,d).map(h=>yi(o,r,d,h,c,l)),v={...c,...l};Fl(v);const p=Date.now()-a;return console.log(`prep ${i}ms solver ${p}ms`),console.log("branches",_),Object.assign(Object.create(n6),{root:v,branches:_})};var t6=Object.assign(Object.create(null),{solver:e6,table:ht,topologicalOrder:bi,makeTacosTortillas:gi,makeFoldedStripTacos:ci,makeTransitivityTrios:_i,singleVertexSolver:fi,singleVertexAssignmentSolver:wl,validateLayerSolver:li,validateTacoTacoFacePairs:ai,validateTacoTortillaStrip:ii,foldStripWithAssignments:ui},_l,Jl);const o6=n=>{let e=0,t=0;for(let o=0;o<n.length;o+=1)(n[o]==="M"||n[o]==="m")&&(e+=1),(n[o]==="V"||n[o]==="v")&&(t+=1);for(let o=0;o<n.length;o+=1)if(e>t&&(n[o]==="V"||n[o]==="v")||t>e&&(n[o]==="M"||n[o]==="m"))return o},r6=(n,e,t=0)=>{const o=o6(e);if(o===void 0)return;const r=n[(o+1)%n.length],s=n[(o+2)%n.length],c=Math.PI*t,i=-Math.cos(r)*Math.cos(s)+Math.sin(r)*Math.sin(s)*Math.cos(Math.PI-c),a=Math.cos(Math.PI-c)-Math.sin(Math.PI-c)**2*Math.sin(r)*Math.sin(s)/(1-i),l=-Math.acos(a)+Math.PI;return o%2===0?[l,c,l,c].map((f,d)=>o===d?-f:f):[c,l,c,l].map((f,d)=>o===d?-f:f)},s6=({vertices_coords:n,vertices_edges:e,edges_vertices:t,edges_vectors:o},r)=>{o||(o=Wn({vertices_coords:n,edges_vertices:t})),e||(e=he({edges_vertices:t}));const s=e[r].map(i=>o[i]),c=u.core.counterClockwiseOrder2(s).map(i=>s[i]);return T2(c)};var c6=Object.freeze({__proto__:null,kawasakiSolutions:s6}),i6=Object.assign(Object.create(null),{maekawaAssignments:di,foldAngles4:r6},m8,c6,_8),a6=[null,"\u0627\u0635\u0646\u0639 \u062E\u0637\u0627\u064B \u064A\u0645\u0631 \u0628\u0646\u0642\u0637\u062A\u064A\u0646","\u0627\u0635\u0646\u0639 \u062E\u0637\u0627\u064B \u0639\u0646 \u0637\u0631\u064A\u0642 \u0637\u064A \u0646\u0642\u0637\u0629 \u0648\u0627\u062D\u062F\u0629 \u0625\u0644\u0649 \u0623\u062E\u0631\u0649","\u0627\u0635\u0646\u0639 \u062E\u0637\u0627\u064B \u0639\u0646 \u0637\u0631\u064A\u0642 \u0637\u064A \u062E\u0637 \u0648\u0627\u062D\u062F \u0639\u0644\u0649 \u0622\u062E\u0631","\u0627\u0635\u0646\u0639 \u062E\u0637\u0627\u064B \u064A\u0645\u0631 \u0639\u0628\u0631 \u0646\u0642\u0637\u0629 \u0648\u0627\u062D\u062F\u0629 \u0648\u064A\u062C\u0639\u0644 \u062E\u0637\u0627\u064B \u0648\u0627\u062D\u062F\u0627\u064B \u0641\u0648\u0642 \u0646\u0641\u0633\u0647","\u0627\u0635\u0646\u0639 \u062E\u0637\u0627\u064B \u064A\u0645\u0631 \u0628\u0627\u0644\u0646\u0642\u0637\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0648\u064A\u062C\u0639\u0644 \u0627\u0644\u0646\u0642\u0637\u0629 \u0627\u0644\u062B\u0627\u0646\u064A\u0629 \u0639\u0644\u0649 \u0627\u0644\u062E\u0637","\u0627\u0635\u0646\u0639 \u062E\u0637\u0627\u064B \u064A\u062C\u0644\u0628 \u0627\u0644\u0646\u0642\u0637\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0625\u0644\u0649 \u0627\u0644\u062E\u0637 \u0627\u0644\u0623\u0648\u0644 \u0648\u0627\u0644\u0646\u0642\u0637\u0629 \u0627\u0644\u062B\u0627\u0646\u064A\u0629 \u0625\u0644\u0649 \u0627\u0644\u062E\u0637 \u0627\u0644\u062B\u0627\u0646\u064A","\u0627\u0635\u0646\u0639 \u062E\u0637\u0627\u064B \u064A\u062C\u0644\u0628 \u0646\u0642\u0637\u0629 \u0625\u0644\u0649 \u062E\u0637 \u0648\u064A\u062C\u0639\u0644 \u062E\u0637 \u062B\u0627\u0646\u064A \u0641\u0648\u0642 \u0646\u0641\u0633\u0647"],l6=[null,"Falte eine Linie durch zwei Punkte","Falte zwei Punkte aufeinander","Falte zwei Linien aufeinander","Falte eine Linie auf sich selbst, falte dabei durch einen Punkt","Falte einen Punkt auf eine Linie, falte dabei durch einen anderen Punkt","Falte einen Punkt auf eine Linie und einen weiteren Punkt auf eine weitere Linie","Falte einen Punkt auf eine Linie und eine weitere Linie in sich selbst zusammen"],u6=[null,"fold a line through two points","fold two points together","fold two lines together","fold a line on top of itself, creasing through a point","fold a point to a line, creasing through another point","fold a point to a line and another point to another line","fold a point to a line and another line onto itself"],f6=[null,"dobla una l\xEDnea entre dos puntos","dobla dos puntos juntos","dobla y une dos l\xEDneas","dobla una l\xEDnea sobre s\xED misma, dobl\xE1ndola hacia un punto","dobla un punto hasta una l\xEDnea, dobl\xE1ndola a trav\xE9s de otro punto","dobla un punto hacia una l\xEDnea y otro punto hacia otra l\xEDnea","dobla un punto hacia una l\xEDnea y otra l\xEDnea sobre s\xED misma"],d6=[null,"cr\xE9ez un pli passant par deux points","pliez pour superposer deux points","pliez pour superposer deux lignes","rabattez une ligne sur elle-m\xEAme \xE0 l'aide d'un pli qui passe par un point","rabattez un point sur une ligne \xE0 l'aide d'un pli qui passe par un autre point","rabattez un point sur une ligne et un autre point sur une autre ligne","rabattez un point sur une ligne et une autre ligne sur elle-m\xEAme"],m6=[null,"\u090F\u0915 \u0915\u094D\u0930\u0940\u091C\u093C \u092C\u0928\u093E\u090F\u0901 \u091C\u094B \u0926\u094B \u0938\u094D\u0925\u093E\u0928\u094B\u0902 \u0938\u0947 \u0917\u0941\u091C\u0930\u0924\u093E \u0939\u0948","\u090F\u0915 \u0938\u094D\u0925\u093E\u0928 \u0915\u094B \u0926\u0942\u0938\u0930\u0947 \u0938\u094D\u0925\u093E\u0928 \u092A\u0930 \u092E\u094B\u0921\u093C\u0915\u0930 \u090F\u0915 \u0915\u094D\u0930\u0940\u091C\u093C \u092C\u0928\u093E\u090F\u0901","\u090F\u0915 \u0930\u0947\u0916\u093E \u092A\u0930 \u0926\u0942\u0938\u0930\u0940 \u0930\u0947\u0916\u093E \u0915\u094B \u092E\u094B\u0921\u093C\u0915\u0930 \u0915\u094D\u0930\u0940\u091C\u093C \u092C\u0928\u093E\u090F\u0901","\u090F\u0915 \u0915\u094D\u0930\u0940\u091C\u093C \u092C\u0928\u093E\u090F\u0901 \u091C\u094B \u090F\u0915 \u0938\u094D\u0925\u093E\u0928 \u0938\u0947 \u0917\u0941\u091C\u0930\u0924\u093E \u0939\u0948 \u0914\u0930 \u090F\u0915 \u0930\u0947\u0916\u093E \u0915\u094B \u0938\u094D\u0935\u092F\u0902 \u0915\u0947 \u090A\u092A\u0930 \u0932\u0947 \u0906\u0924\u093E \u0939\u0948","\u090F\u0915 \u0915\u094D\u0930\u0940\u091C\u093C \u092C\u0928\u093E\u090F\u0901 \u091C\u094B \u092A\u0939\u0932\u0947 \u0938\u094D\u0925\u093E\u0928 \u0938\u0947 \u0917\u0941\u091C\u0930\u0924\u093E \u0939\u0948 \u0914\u0930 \u0926\u0942\u0938\u0930\u0947 \u0938\u094D\u0925\u093E\u0928 \u0915\u094B \u0930\u0947\u0916\u093E \u092A\u0930 \u0932\u0947 \u0906\u0924\u093E \u0939\u0948","\u090F\u0915 \u0915\u094D\u0930\u0940\u091C\u093C \u092C\u0928\u093E\u090F\u0901 \u091C\u094B \u092A\u0939\u0932\u0947 \u0938\u094D\u0925\u093E\u0928 \u0915\u094B \u092A\u0939\u0932\u0940 \u0930\u0947\u0916\u093E \u092A\u0930 \u0914\u0930 \u0926\u0942\u0938\u0930\u0947 \u0938\u094D\u0925\u093E\u0928 \u0915\u094B \u0926\u0942\u0938\u0930\u0940 \u0930\u0947\u0916\u093E \u092A\u0930 \u0932\u0947 \u0906\u0924\u093E \u0939\u0948","\u090F\u0915 \u0915\u094D\u0930\u0940\u091C\u093C \u092C\u0928\u093E\u090F\u0901 \u091C\u094B \u090F\u0915 \u0938\u094D\u0925\u093E\u0928 \u0915\u094B \u090F\u0915 \u0930\u0947\u0916\u093E \u092A\u0930 \u0932\u0947 \u0906\u0924\u093E \u0939\u0948 \u0914\u0930 \u0926\u0942\u0938\u0930\u0940 \u0930\u0947\u0916\u093E \u0915\u094B \u0938\u094D\u0935\u092F\u0902 \u0915\u0947 \u090A\u092A\u0930 \u0932\u0947 \u0906\u0924\u093E \u0939\u0948"],h6=[null,"2\u70B9\u306B\u6CBF\u3063\u3066\u6298\u308A\u76EE\u3092\u4ED8\u3051\u307E\u3059","2\u70B9\u3092\u5408\u308F\u305B\u3066\u6298\u308A\u307E\u3059","2\u3064\u306E\u7DDA\u3092\u5408\u308F\u305B\u3066\u6298\u308A\u307E\u3059","\u70B9\u3092\u901A\u904E\u3055\u305B\u3001\u65E2\u306B\u3042\u308B\u7DDA\u306B\u6CBF\u3063\u3066\u6298\u308A\u307E\u3059","\u70B9\u3092\u7DDA\u6CBF\u3044\u306B\u5408\u308F\u305B\u5225\u306E\u70B9\u3092\u901A\u904E\u3055\u305B\u6298\u308A\u307E\u3059","\u7DDA\u306B\u5411\u304B\u3063\u3066\u70B9\u3092\u6298\u308A\u3001\u540C\u6642\u306B\u3082\u3046\u4E00\u65B9\u306E\u7DDA\u306B\u5411\u304B\u3063\u3066\u3082\u3046\u4E00\u65B9\u306E\u70B9\u3092\u6298\u308A\u307E\u3059","\u7DDA\u306B\u5411\u304B\u3063\u3066\u70B9\u3092\u6298\u308A\u3001\u540C\u6642\u306B\u5225\u306E\u7DDA\u3092\u305D\u306E\u4E0A\u306B\u6298\u308A\u307E\u3059"],p6=[null,"\uB450 \uC810\uC744 \uD1B5\uACFC\uD558\uB294 \uC120\uC73C\uB85C \uC811\uC73C\uC138\uC694","\uB450 \uC810\uC744 \uD568\uAED8 \uC811\uC73C\uC138\uC694","\uB450 \uC120\uC744 \uD568\uAED8 \uC811\uC73C\uC138\uC694","\uADF8 \uC704\uC5D0 \uC120\uC744 \uC811\uC73C\uBA74\uC11C \uC810\uC744 \uD1B5\uACFC\uD558\uAC8C \uC811\uC73C\uC138\uC694","\uC810\uC744 \uC120\uC73C\uB85C \uC811\uC73C\uBA74\uC11C, \uB2E4\uB978 \uC810\uC744 \uC9C0\uB098\uAC8C \uC811\uC73C\uC138\uC694","\uC810\uC744 \uC120\uC73C\uB85C \uC811\uACE0 \uB2E4\uB978 \uC810\uC744 \uB2E4\uB978 \uC120\uC73C\uB85C \uC811\uC73C\uC138\uC694","\uC810\uC744 \uC120\uC73C\uB85C \uC811\uACE0 \uB2E4\uB978 \uC120\uC744 \uADF8 \uC704\uC5D0 \uC811\uC73C\uC138\uC694"],g6=[null,"lipat garisan melalui dua titik","lipat dua titik bersama","lipat dua garisan bersama","lipat satu garisan di atasnya sendiri, melipat melalui satu titik","lipat satu titik ke garisan, melipat melalui titik lain","lipat satu titik ke garisan dan satu lagi titik ke garisan lain","lipat satu titik ke garisan dan satu lagi garisan di atasnya sendiri"],_6=[null,"dobre uma linha entre dois pontos","dobre os dois pontos para uni-los","dobre as duas linhas para uni-las","dobre uma linha sobre si mesma, criando uma dobra ao longo de um ponto","dobre um ponto at\xE9 uma linha, criando uma dobra ao longo de outro ponto","dobre um ponto at\xE9 uma linha e outro ponto at\xE9 outra linha","dobre um ponto at\xE9 uma linha e outra linha sobre si mesma"],v6=[null,"\u0441\u043B\u043E\u0436\u0438\u0442\u0435 \u043B\u0438\u043D\u0438\u044E \u0447\u0435\u0440\u0435\u0437 \u0434\u0432\u0435 \u0442\u043E\u0447\u043A\u0438","\u0441\u043B\u043E\u0436\u0438\u0442\u0435 \u0434\u0432\u0435 \u0442\u043E\u0447\u043A\u0438 \u0432\u043C\u0435\u0441\u0442\u0435","\u0441\u043B\u043E\u0436\u0438\u0442\u0435 \u0434\u0432\u0435 \u043B\u0438\u043D\u0438\u0438 \u0432\u043C\u0435\u0441\u0442\u0435","\u0441\u0432\u0435\u0440\u043D\u0438\u0442\u0435 \u043B\u0438\u043D\u0438\u044E \u0441\u0432\u0435\u0440\u0445\u0443 \u0441\u0435\u0431\u044F, \u0441\u0433\u0438\u0431\u0430\u044F \u0447\u0435\u0440\u0435\u0437 \u0442\u043E\u0447\u043A\u0443","\u0441\u043B\u043E\u0436\u0438\u0442\u0435 \u0442\u043E\u0447\u043A\u0443 \u0432 \u043B\u0438\u043D\u0438\u044E, \u0441\u0433\u0438\u0431\u0430\u044F \u0447\u0435\u0440\u0435\u0437 \u0434\u0440\u0443\u0433\u0443\u044E \u0442\u043E\u0447\u043A\u0443","\u0441\u043B\u043E\u0436\u0438\u0442\u0435 \u0442\u043E\u0447\u043A\u0443 \u0432 \u043B\u0438\u043D\u0438\u044E \u0438 \u0434\u0440\u0443\u0433\u0443\u044E \u0442\u043E\u0447\u043A\u0443 \u0432 \u0434\u0440\u0443\u0433\u0443\u044E \u043B\u0438\u043D\u0438\u044E","\u0441\u043B\u043E\u0436\u0438\u0442\u0435 \u0442\u043E\u0447\u043A\u0443 \u0432 \u043B\u0438\u043D\u0438\u044E \u0438 \u0434\u0440\u0443\u0433\u0443\u044E \u043B\u0438\u043D\u0438\u044E \u043D\u0430 \u0441\u0435\u0431\u044F"],M6=[null,"iki noktadan ge\xE7en bir \xE7izgi boyunca katla","iki noktay\u0131 birbirine katla","iki \xE7izgiyi birbirine katla","bir noktadan k\u0131v\u0131rarak kendi \xFCzerindeki bir \xE7izgi boyunca katla","ba\u015Fka bir noktadan k\u0131v\u0131rarak bir noktay\u0131 bir \xE7izgiye katla","bir noktay\u0131 bir \xE7izgiye ve ba\u015Fka bir noktay\u0131 ba\u015Fka bir \xE7izgiye katla","bir noktay\u0131 bir \xE7izgiye ve ba\u015Fka bir \xE7izgiyi kendi \xFCzerine katla"],b6=[null,"t\u1EA1o m\u1ED9t n\u1EBFp g\u1EA5p \u0111i qua hai \u0111i\u1EC3m","t\u1EA1o n\u1EBFp g\u1EA5p b\u1EB1ng c\xE1ch g\u1EA5p m\u1ED9t \u0111i\u1EC3m n\xE0y sang \u0111i\u1EC3m kh\xE1c","t\u1EA1o n\u1EBFp g\u1EA5p b\u1EB1ng c\xE1ch g\u1EA5p m\u1ED9t \u0111\u01B0\u1EDDng l\xEAn m\u1ED9t \u0111\u01B0\u1EDDng kh\xE1c","t\u1EA1o m\u1ED9t n\u1EBFp g\u1EA5p \u0111i qua m\u1ED9t \u0111i\u1EC3m v\xE0 \u0111\u01B0a m\u1ED9t \u0111\u01B0\u1EDDng l\xEAn tr\xEAn ch\xEDnh n\xF3","t\u1EA1o m\u1ED9t n\u1EBFp g\u1EA5p \u0111i qua \u0111i\u1EC3m \u0111\u1EA7u ti\xEAn v\xE0 \u0111\u01B0a \u0111i\u1EC3m th\u1EE9 hai l\xEAn \u0111\u01B0\u1EDDng th\u1EB3ng","t\u1EA1o m\u1ED9t n\u1EBFp g\u1EA5p mang \u0111i\u1EC3m \u0111\u1EA7u ti\xEAn \u0111\u1EBFn \u0111\u01B0\u1EDDng \u0111\u1EA7u ti\xEAn v\xE0 \u0111i\u1EC3m th\u1EE9 hai cho \u0111\u01B0\u1EDDng th\u1EE9 hai","t\u1EA1o m\u1ED9t n\u1EBFp g\u1EA5p mang l\u1EA1i m\u1ED9t \u0111i\u1EC3m cho m\u1ED9t \u0111\u01B0\u1EDDng v\xE0 \u0111\u01B0a m\u1ED9t \u0111\u01B0\u1EDDng th\u1EE9 hai l\xEAn tr\xEAn ch\xEDnh n\xF3"],y6=[null,"\u901A\u904E\u5169\u9EDE\u6298\u4E00\u689D\u7DDA","\u5C07\u5169\u9EDE\u6298\u758A\u8D77\u4F86","\u5C07\u5169\u689D\u7DDA\u6298\u758A\u5728\u4E00\u8D77","\u901A\u904E\u4E00\u500B\u9EDE\u6298\u758A\u4E00\u689D\u7DDA\u5728\u81EA\u8EAB\u4E0A\u9762","\u5C07\u4E00\u500B\u9EDE\uFF0C\u901A\u904E\u53E6\u4E00\u500B\u9EDE\u6298\u758A\u6210\u4E00\u689D\u7DDA\uFF0C","\u5C07\u4E00\u500B\u9EDE\u6298\u758A\u70BA\u4E00\u689D\u7DDA\uFF0C\u518D\u5C07\u53E6\u4E00\u500B\u9EDE\u6298\u758A\u5230\u53E6\u4E00\u689D\u7DDA","\u5C07\u4E00\u500B\u9EDE\u6298\u758A\u6210\u4E00\u689D\u7DDA\uFF0C\u53E6\u4E00\u689D\u7DDA\u6298\u758A\u5230\u5B83\u81EA\u8EAB\u4E0A"],V6={ar:a6,de:l6,en:u6,es:f6,fr:d6,hi:m6,jp:h6,ko:p6,ms:g6,pt:_6,ru:v6,tr:M6,vi:b6,zh:y6},x6={es:"doblez"},E6={},k6={zh:"\u5750\u588A\u57FA"},w6={zh:"\u58D3\u647A"},A6={fold:x6,"valley fold":{es:"doblez de valle",zh:"\u8C37\u647A"},"mountain fold":{es:"doblez de monta\xF1a",zh:"\u5C71\u647A"},"inside reverse fold":{zh:"\u5167\u4E2D\u5272\u647A"},"outside reverse fold":{zh:"\u5916\u4E2D\u5272\u647A"},sink:E6,"open sink":{zh:"\u958B\u653E\u5F0F\u6C89\u58D3\u647A"},"closed sink":{zh:"\u5C01\u9589\u5F0F\u6C89\u58D3\u647A"},"rabbit ear":{zh:"\u5154\u8033\u647A"},"double rabbit ear":{zh:"\u96D9\u5154\u8033\u647A"},"petal fold":{zh:"\u82B1\u74E3\u647A"},blintz:k6,squash:w6,"flip over":{es:"dale la vuelta a tu papel"}},P6={axioms:V6,instructions:A6};const O6=function(n){n==null||typeof n.linker!="function"||n.linker(this)},S6=(n,e={})=>{const t=Z.svg.g();return!n||!n.vertices_coords||(n.vertices_coords.map(o=>Z.svg.circle(o[0],o[1],.01)).forEach(o=>t.appendChild(o)),t.setAttributeNS(null,"fill",w0),Object.keys(e).forEach(o=>t.setAttributeNS(null,o,e[o]))),t},Le=(n,...e)=>{if(!n)return;const t={},o=n.getAttribute("class"),r=o?o.split(" "):[];r.push(...e),r.forEach(c=>{t[c]=!0});const s=Object.keys(t).join(" ");n.setAttribute("class",s)},Vi={},xi={stroke:k0},Ei={},ki={M:{stroke:"red"},m:{stroke:"red"},V:{stroke:"blue"},v:{stroke:"blue"},F:{stroke:"lightgray"},f:{stroke:"lightgray"}},j6=n=>{const e={u:[],f:[],v:[],m:[],b:[]},t=n[q1].map(o=>o.toLowerCase());return n[f0].map((o,r)=>t[r]||"u").forEach((o,r)=>e[o].push(r)),e},C6=({vertices_coords:n,edges_vertices:e})=>!n||!e?[]:e.map(t=>t.map(o=>n[o])),B6=n=>`M${n[0][0]} ${n[0][1]}L${n[1][0]} ${n[1][1]}`,cs=n=>C6(n).map(e=>B6(e)).join(""),F6=({vertices_coords:n,edges_vertices:e,edges_assignment:t})=>{if(!n||!e)return{};if(!t)return{u:cs({vertices_coords:n,edges_vertices:e})};const o=j6({vertices_coords:n,edges_vertices:e,edges_assignment:t});return Object.keys(o).forEach(r=>{o[r]=cs({vertices_coords:n,edges_vertices:o[r].map(s=>e[s])})}),Object.keys(o).forEach(r=>{o[r]===""&&delete o[r]}),o},L6=({vertices_coords:n,edges_vertices:e,edges_assignment:t})=>{const o=F6({vertices_coords:n,edges_vertices:e,edges_assignment:t});return Object.keys(o).forEach(r=>{const s=Z.svg.path(o[r]);Le(s,zn[r]),o[r]=s}),o},Xn=(n,e={})=>Object.keys(e).forEach(t=>n.setAttributeNS(null,t,e[t])),z6=(n,e={})=>{const t=Z.svg.g();if(!n)return t;const o=Lt(n),r=L6(n);return Object.keys(r).forEach(s=>{Le(r[s],zn[s]),Xn(r[s],o?Ei[s]:ki[s]),Xn(r[s],e[s]),Xn(r[s],e[zn[s]]),t.appendChild(r[s]),Object.defineProperty(t,zn[s],{get:()=>r[s]})}),Xn(t,o?Vi:xi),Xn(t,e.stroke?{stroke:e.stroke}:{}),t},I6=n=>Math.abs(n)/180,T6=(n,e={})=>{const t=Z.svg.g();if(!n)return t;const o=Lt(n),r=(n.edges_assignment?n.edges_assignment:Fo(n)).map(i=>i.toLowerCase()),s={};["b","m","v","f","u"].forEach(i=>{const a=Z.svg.g();t.appendChild(a),Le(a,zn[i]),Xn(a,o?Ei[i]:ki[i]),Xn(a,e[zn[i]]),Object.defineProperty(t,zn[i],{get:()=>a}),s[i]=a});const c=n.edges_vertices.map(i=>i.map(a=>n.vertices_coords[a])).map(i=>Z.svg.line(i[0][0],i[0][1],i[1][0],i[1][1]));return n.edges_foldAngle&&c.forEach((i,a)=>{const l=n.edges_foldAngle[a];l===0||l===180||l===-180||i.setAttributeNS(null,"opacity",I6(l))}),c.forEach((i,a)=>s[r[a]].appendChild(i)),Xn(t,o?Vi:xi),Xn(t,e.stroke?{stroke:e.stroke}:{}),t},N6=(n,e)=>Zc(n)?z6(n,e):T6(n,e),R6={back:{fill:G1},front:{fill:"#ddd"}},D6={back:{opacity:.1},front:{opacity:.1}},$6={},W6={stroke:k0,"stroke-linejoin":"bevel"},U6={stroke:w0,fill:k0,"stroke-linejoin":"bevel"},q6={fill:w0},G6=function(n,e){const t=e.faces_vertices.length||e.faces_edges.length;return Array.from(Array(t)).map((r,s)=>s).filter(r=>n[r]==null).concat(Tn(n))},f1=(n,e={})=>Object.keys(e).forEach(t=>n.setAttributeNS(null,t,e[t])),wi=(n,e,t,o)=>{const r=Lt(n),s=n[zr]!=null,c=[[Ir],[Tr]],i=ne(n);return i.map(l=>l?c[0]:c[1]).forEach((l,f)=>{Le(e[f],l),f1(e[f],r?s?R6[l]:D6[l]:$6[l]),f1(e[f],o[l])}),(s?G6(n[zr],n).map(l=>e[l]):e).forEach(l=>t.appendChild(l)),Object.defineProperty(t,Ir,{get:()=>e.filter((l,f)=>i[f])}),Object.defineProperty(t,Tr,{get:()=>e.filter((l,f)=>!i[f])}),f1(t,r?s?W6:U6:q6),t},H6=(n,e={})=>{const t=Z.svg.g();if(!n||!n.vertices_coords||!n.faces_vertices)return t;const o=n.faces_vertices.map(r=>r.map(s=>[0,1].map(c=>n.vertices_coords[s][c]))).map(r=>Z.svg.polygon(r));return o.forEach((r,s)=>r.setAttributeNS(null,Ws,s)),t.setAttributeNS(null,"fill",G1),wi(n,o,t,e)},Y6=function(n,e={}){const t=Z.svg.g();if(!n||!(x1 in n)||!(f0 in n)||!(V1 in n))return t;const o=n[x1].map(r=>r.map(s=>n[f0][s]).map((s,c,i)=>{const a=i[(c+1)%i.length];return s[1]===a[0]||s[1]===a[1]?s[0]:s[1]}).map(s=>[0,1].map(c=>n[V1][s][c]))).map(r=>Z.svg.polygon(r));return o.forEach((r,s)=>r.setAttributeNS(null,Ws,s)),t.setAttributeNS(null,"fill","white"),wi(n,o,t,e)},X6={fill:w0},Z6={stroke:k0,fill:G1},J6=(n,e={})=>Object.keys(e).forEach(t=>n.setAttributeNS(null,t,e[t])),K6=(n,e={})=>{const t=Z.svg.g();if(!n||!n.vertices_coords||!n.edges_vertices||!n.edges_assignment)return t;const o=D0(n).vertices.map(s=>[0,1].map(c=>n.vertices_coords[s][c]));if(o.length===0)return t;const r=Z.svg.polygon(o);return Le(r,Gs),t.appendChild(r),J6(t,Lt(n)?X6:Z6),Object.keys(e).forEach(s=>t.setAttributeNS(null,s,e[s])),t},Q6=(n,e)=>n&&n[E3]?H6(n,e):n&&n[x1]?Y6(n,e):Z.svg.g(),n9={vertices:S6,edges:N6,faces:Q6,boundaries:K6},Ai=(n,e,t)=>{const o=t===!1?Z.svg.g():n9[n](e,t);return Le(o,n),o},xt=(n,e={})=>[Us,me,An,Qn].map(t=>Ai(t,n,e[t]));[Us,me,An,Qn].forEach(n=>{xt[n]=function(e,t={}){return Ai(n,e,t[n])}});const e9=function(n){n.graph.svg=this;const e={svg:this};Object.keys(e).forEach(t=>{n.graph.prototype[t]=function(){return e[t](this,...arguments)}})},is=1/100,t9=1/50,Pi=({vertices_coords:n})=>{if(n==null||n.length===0)return;const e=Array(2).fill(1/0),t=Array(2).fill(-1/0);return n.forEach(r=>{r[0]<e[0]&&(e[0]=r[0]),r[0]>t[0]&&(t[0]=r[0]),r[1]<e[1]&&(e[1]=r[1]),r[1]>t[1]&&(t[1]=r[1])}),Number.isNaN(e[0])||Number.isNaN(e[1])||Number.isNaN(t[0])||Number.isNaN(t[1])?void 0:[e[0],e[1],t[0]-e[0],t[1]-e[1]]},o9=n=>{const e=Pi(n);return e===void 0?"":e.join(" ")},r9=(n,e)=>{for(let t=0;t<n.childNodes.length;t+=1)n.childNodes[t].setAttributeNS(null,"r",e)},s9=({vertices_coords:n,edges_vertices:e,edges_length:t})=>{if(!n||!e)return;t||(t=a2({vertices_coords:n,edges_vertices:e}));const o=t.slice().sort((s,c)=>s-c),r=Math.floor(o.length*.1);return o[r]},Oi=n=>(n.nodeName||"").toUpperCase()==="SVG"?n:n.parentNode?Oi(n.parentNode):void 0,c9=(n,e,t,o)=>{const r=e[3]&&e[3].childNodes.length;if(!(o.strokeWidth||o.viewBox||r))return;const s=Pi(t),c=s?Math.max(s[2],s[3]):1,i=Oi(n);if(i&&o.viewBox){const a=s?s.join(" "):"0 0 1 1";i.setAttributeNS(null,"viewBox",a)}if(i&&o.padding){const a=i.getAttribute("viewBox");if(a!=null){const l=o.padding*c,f=a.split(" ").map(m=>parseFloat(m)),d=[-l,-l,l*2,l*2].map((m,_)=>f[_]+m).join(" ");i.setAttributeNS(null,"viewBox",d)}}if(o.strokeWidth||o["stroke-width"]){const a=o.strokeWidth?o.strokeWidth:o["stroke-width"],l=s9(t);let f;l?f=typeof a=="number"?10*l*a:10*l*is:f=typeof a=="number"?c*a:c*is,n.setAttributeNS(null,"stroke-width",f)}if(r){const a=o.vertices&&o.vertices.radius!=null?o.vertices.radius:o.radius,l=typeof a=="string"?parseFloat(a):a,f=typeof l=="number"&&!Number.isNaN(l)?c*l:c*t9;r9(e[3],f)}},i9=(n,e)=>{const t=[e.file_classes||[],e.frame_classes||[]].flat();t.length&&Le(n,...t)},Si=(n,e,t={})=>{const o=xt(e,t);return o.filter(r=>r.childNodes.length>0).forEach(r=>n.appendChild(r)),c9(n,o,e,t),i9(n,e),Object.keys(xt).map((r,s)=>({key:r,i:s})).filter(r=>n[r.key]==null).forEach(r=>Object.defineProperty(n,r.key,{get:()=>o[r.i]})),n},Ke=(n,e)=>Si(Z.svg(),n,e);Object.keys(xt).forEach(n=>{Ke[n]=xt[n]});Ke.drawInto=Si;Ke.getViewBox=o9;Object.defineProperty(Ke,"linker",{enumerable:!1,value:e9.bind(Ke)});const ji={init:()=>{}};function Kn(){return ji.init(...arguments)}const Ue="class",Dn="function",F1="undefined",a9="boolean",d1="number",Sn="string",tr="object",de="svg",X0="path",We="id",Z0="style",or="viewBox",rr="transform",Pe="points",L1="stroke",l9="fill",z1="none",Oe="arrow",Qe="head",Et="tail",sr=typeof window!==F1&&typeof window.document!==F1,u9=typeof process!==F1&&process.versions!=null&&process.versions.node!=null,Ci=[];Ci[10]='"error 010: window" not set. if using node/deno, include package @xmldom/xmldom, set to the main export ( ear.window = xmldom; )';const kt={window:void 0},f9=n=>new n.DOMParser().parseFromString("<!DOCTYPE html><title>.</title>","text/html"),d9=n=>(n.document||(n.document=f9(n)),kt.window=n,kt.window);sr&&(kt.window=window);const $=()=>{if(kt.window===void 0)throw Ci[10];return kt.window};var J0="http://www.w3.org/2000/svg",O={s:["svg"],d:["defs"],h:["desc","filter","metadata","style","script","title","view"],c:["cdata"],g:["g"],v:["circle","ellipse","line","path","polygon","polyline","rect"],t:["text"],i:["marker","symbol","clipPath","mask"],p:["linearGradient","radialGradient","pattern"],cT:["textPath","tspan"],cG:["stop"],cF:["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]};const en=(n,e)=>[n[0]+e[0],n[1]+e[1]],En=(n,e)=>[n[0]-e[0],n[1]-e[1]],Y=(n,e)=>[n[0]*e,n[1]*e],cr=n=>n[0]**2+n[1]**2,I1=n=>Math.sqrt(cr(n)),K0=(n,e)=>cr(En(n,e)),Bi=(n,e)=>Math.sqrt(K0(n,e)),T1=(n,e)=>[Math.cos(n)*e,Math.sin(n)*e];var m9=Object.freeze({__proto__:null,svg_add2:en,svg_sub2:En,svg_scale2:Y,svg_magnitudeSq2:cr,svg_magnitude2:I1,svg_distanceSq2:K0,svg_distance2:Bi,svg_polar_to_cart:T1});const Fi=(n,e,t,o,r,s=!1)=>{if(r==null)return"";const c=T1(o,t),i=T1(r,t),a=[i[0]-c[0],i[1]-c[1]],l=c[0]*i[1]-c[1]*i[0],f=c[0]*i[0]+c[1]*i[1],d=Math.atan2(l,f)>0?0:1;let m=s?`M ${n},${e} l ${c[0]},${c[1]} `:`M ${n+c[0]},${e+c[1]} `;return m+=["a ",t,t,0,d,1,a[0],a[1]].join(" "),s&&(m+=" Z"),m},as=(n,e,t,o,r)=>[Fi(n,e,t,o,r,!1)];var h9={arc:{nodeName:X0,attributes:["d"],args:as,methods:{setArc:(n,...e)=>n.setAttribute("d",as(...e))}}};const ls=(n,e,t,o,r)=>[Fi(n,e,t,o,r,!0)];var p9={wedge:{nodeName:X0,args:ls,attributes:["d"],methods:{setArc:(n,...e)=>n.setAttribute("d",ls(...e))}}};const m1=128,g9=(n=-1,e=0,t=2,o=1)=>Array.from(Array(m1+1)).map((r,s)=>(s-m1)/m1*2+1).map(r=>[n+(r+1)*t*.5,e+r**2*o]),_9=(n,e,t,o)=>[g9(n,e,t,o).map(r=>`${r[0]},${r[1]}`).join(" ")];var v9={parabola:{nodeName:"polyline",attributes:[Pe],args:_9}};const M9=(n,e,t,o)=>{const r=[e,t];return Array.from(Array(n)).map((s,c)=>2*Math.PI*(c/n)).map(s=>[Math.cos(s),Math.sin(s)]).map(s=>r.map((c,i)=>c+o*s[i]))},b9=(n,e=0,t=0,o=1)=>[M9(n,e,t,o).map(r=>`${r[0]},${r[1]}`).join(" ")];var y9={regularPolygon:{nodeName:"polygon",attributes:[Pe],args:b9}};const V9=(n,e,t,o,r=0)=>{r>t/2&&(r=t/2),r>o/2&&(r=o/2);const s=t-r*2,c=o-r*2,i=`A${r} ${r} 0 0 1`;return[[`M${n+(t-s)/2},${e}`,`h${s}`,i,`${n+t},${e+(o-c)/2}`,`v${c}`,i,`${n+t-r},${e+o}`,`h${-s}`,i,`${n},${e+o-r}`,`v${-c}`,i,`${n+r},${e}`].join(" ")]};var x9={roundRect:{nodeName:X0,attributes:["d"],args:V9}},st={toCamel:n=>n.replace(/([-_][a-z])/ig,e=>e.toUpperCase().replace("-","").replace("_","")),toKebab:n=>n.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase(),capitalized:n=>n.charAt(0).toUpperCase()+n.slice(1)};const us=n=>n!=null&&typeof n[Symbol.iterator]===Dn,nt=function(){switch(arguments.length){case void 0:case 0:return Array.from(arguments);case 1:return us(arguments[0])&&typeof arguments[0]!==Sn?nt(...arguments[0]):[arguments[0]];default:return Array.from(arguments).map(n=>us(n)?[...nt(n)]:n)}};var Q=(...n)=>n.filter(e=>typeof e===d1).concat(n.filter(e=>typeof e===tr&&e!==null).map(e=>{if(typeof e.x===d1)return[e.x,e.y];if(typeof e[0]===d1)return[e[0],e[1]]}).filter(e=>e!==void 0).reduce((e,t)=>e.concat(t),[]));const Kt=[Et,Qe],Qt=n=>n.join(","),fs=n=>"M"+n.map(e=>e.join(",")).join("L")+"Z",E9=function(n){let e=[[0,1],[2,3]].map(b=>b.map(M=>n.points[M]||0)),t=En(e[1],e[0]),o=en(e[0],Y(t,.5));const r=I1(t),s=Kt.map(b=>n[b].visible?(1+n[b].padding)*n[b].height*2.5:0).reduce((b,M)=>b+M,0);if(r<s){const b=r===0?[s,0]:Y(t,s/r);e=[En,en].map(M=>M(o,Y(b,.5))),t=En(e[1],e[0])}let c=[t[1],-t[0]],i=en(o,Y(c,n.bend));const a=e.map(b=>En(i,b)),l=a.map(b=>I1(b)),f=a.map((b,M)=>l[M]===0?b:Y(b,1/l[M])),d=f.map(b=>Y(b,-1)),m=d.map(b=>[b[1],-b[0]]),_=Kt.map((b,M)=>n[b].padding?n[b].padding:n.padding?n.padding:0),v=Kt.map((b,M)=>n[b].height*(n[b].visible?1:0)).map((b,M)=>b+_[M]),p=e.map((b,M)=>en(b,Y(f[M],v[M])));t=En(p[1],p[0]),c=[t[1],-t[0]],o=en(p[0],Y(t,.5)),i=en(o,Y(c,n.bend));const h=p.map((b,M)=>en(b,Y(En(i,b),n.pinch))),g=Kt.map((b,M)=>[en(p[M],Y(d[M],n[b].height)),en(p[M],Y(m[M],n[b].width/2)),en(p[M],Y(m[M],-n[b].width/2))]);return{line:`M${Qt(p[0])}C${Qt(h[0])},${Qt(h[1])},${Qt(p[1])}`,tail:fs(g[0]),head:fs(g[1])}},Li=(n,e,t)=>{typeof e===a9?n.options[t].visible=e:typeof e===tr?(Object.assign(n.options[t],e),e.visible==null&&(n.options[t].visible=!0)):e==null&&(n.options[t].visible=!0)},zi=(n,e={},t=Qe)=>{const o=n.getElementsByClassName(`${Oe}-${t}`)[0];Object.keys(e).map(r=>({key:r,fn:o[st.toCamel(r)]})).filter(r=>typeof r.fn===Dn&&r.key!=="class").forEach(r=>r.fn(e[r.key])),Object.keys(e).filter(r=>r==="class").forEach(r=>o.classList.add(e[r]))},ct=n=>{const e=E9(n.options);return Object.keys(e).map(t=>({path:t,element:n.getElementsByClassName(`${Oe}-${t}`)[0]})).filter(t=>t.element).map(t=>(t.element.setAttribute("d",e[t.path]),t)).filter(t=>n.options[t.path]).forEach(t=>t.element.setAttribute("visibility",n.options[t.path].visible?"visible":"hidden")),n},ds=(n,...e)=>(n.options.points=Q(...nt(...e)).slice(0,4),ct(n)),k9=(n,e)=>(n.options.bend=e,ct(n)),w9=(n,e)=>(n.options.pinch=e,ct(n)),A9=(n,e)=>(n.options.padding=e,ct(n)),P9=(n,e)=>(Li(n,e,Qe),zi(n,e,Qe),ct(n)),O9=(n,e)=>(Li(n,e,Et),zi(n,e,Et),ct(n)),S9=n=>n.getElementsByClassName(`${Oe}-line`)[0],j9=n=>n.getElementsByClassName(`${Oe}-${Qe}`)[0],C9=n=>n.getElementsByClassName(`${Oe}-${Et}`)[0];var a0={setPoints:ds,points:ds,bend:k9,pinch:w9,padding:A9,head:P9,tail:O9,getLine:S9,getHead:j9,getTail:C9};const ms=()=>({visible:!1,width:8,height:10,padding:0}),Ii=()=>({head:ms(),tail:ms(),bend:0,padding:0,pinch:.618,points:[]}),B9=Object.keys(Ii()),F9=(...n)=>{for(let e=0;e<n.length;e+=1){if(typeof n[e]!==tr)continue;const t=Object.keys(n[e]);for(let o=0;o<t.length;o+=1)if(B9.includes(t[o]))return n[e]}},L9=function(n,...e){n.classList.add(Oe);const t=["line",Et,Qe].map(r=>Kn.path().addClass(`${Oe}-${r}`).appendTo(n));t[0].setAttribute(Z0,"fill:none;"),t[1].setAttribute(L1,z1),t[2].setAttribute(L1,z1),n.options=Ii(),a0.setPoints(n,...e);const o=F9(...e);return o&&Object.keys(o).filter(r=>a0[r]).forEach(r=>a0[r](n,o[r])),n};var z9={arrow:{nodeName:"g",attributes:[],args:()=>[],methods:a0,init:L9}};const J=function(){return nt(arguments).reduce((n,e)=>n.concat(e),[])},Ti=(n=[],e=0,t=.5)=>{const o=[n[0]||0,n[1]||0],r=[n[2]||0,n[3]||0],s=En(r,o),c=en(o,Y(s,.5)),i=[s[1],-s[0]],a=en(c,Y(i,e)),l=en(o,Y(En(a,o),t)),f=en(r,Y(En(a,r),t));return`M${o[0]},${o[1]}C${l[0]},${l[1]} ${f[0]},${f[1]} ${r[0]},${r[1]}`},I9=(...n)=>[Ti(Q(...J(...n)))],Ni=n=>n.slice(1).split(/[, ]+/).map(e=>parseFloat(e)),T9=n=>n.match(/[Cc][(0-9), .-]+/).map(e=>Ni(e)),N9=n=>n.match(/[Mm][(0-9), .-]+/).map(e=>Ni(e)),Ri=n=>{const e=N9(n).shift(),t=T9(n).shift(),o=e?[e[e.length-2],e[e.length-1]]:[0,0],r=t?[t[t.length-2],t[t.length-1]]:[0,0];return[...o,...r]},ir=(n,...e)=>{const t=Q(...J(...e)).slice(0,4);return n.setAttribute("d",Ti(t,n._bend,n._pinch)),n},R9=(n,e)=>(n._bend=e,ir(n,...Ri(n.getAttribute("d")))),D9=(n,e)=>(n._pinch=e,ir(n,...Ri(n.getAttribute("d"))));var $9={setPoints:ir,bend:R9,pinch:D9},W9={curve:{nodeName:X0,attributes:["d"],args:I9,methods:$9}};const oe={};Object.assign(oe,h9,p9,v9,y9,x9,z9,W9);const U9=Object.keys(oe),hs=[O.h,O.p,O.i],Te=[O.g,O.v,O.t,U9],ps={svg:[O.s,O.d].concat(hs).concat(Te),g:Te,text:[O.cT],linearGradient:[O.cG],radialGradient:[O.cG],defs:hs,filter:[O.cF],marker:Te,symbol:Te,clipPath:Te,mask:Te},re=Object.create(null);Object.keys(ps).forEach(n=>{re[n]=ps[n].reduce((e,t)=>e.concat(t),[])});const q9=function(n,e,t,o,r=0){const c=t/1-t,i=n-c-r,a=e-c-r,l=t+c*2+r*2,f=o+c*2+r*2;return[i,a,l,f].join(" ")};function Di(){const n=Q(...J(arguments));return n.length===2&&n.unshift(0,0),n.length===4?q9(...n):void 0}const x0=n=>new($()).DOMParser().parseFromString("<root></root>","text/xml").createCDATASection(`${n}`),$i=n=>{for(;n.lastChild;)n.removeChild(n.lastChild);return n},G9=(n,e)=>(e!=null&&e.appendChild(n),n),H9=(n,e)=>Object.keys(e).forEach(t=>n.setAttribute(st.toKebab(t),e[t])),Wi=(n,e)=>{for(;e.childNodes.length>0;){const t=e.childNodes[0];e.removeChild(t),n.appendChild(t)}return n},Y9=n=>(Array.from(n.attributes).filter(e=>e!=="xmlns").forEach(e=>n.removeAttribute(e.name)),$i(n)),gs=(n,e)=>(Array.from(e.attributes).forEach(t=>n.setAttribute(t.name,t.value)),Wi(n,e));var Ui={removeChildren:$i,appendTo:G9,setAttributes:H9};const qi=n=>{if(n===null)return n;for(let e=n.childNodes.length-1;e>=0;e-=1){const t=n.childNodes[e];t.nodeType===3&&t.data.match(/^\s*$/)&&n.removeChild(t),t.nodeType===1&&qi(t)}return n},Gi=n=>new($()).DOMParser().parseFromString(n,"text/xml"),Hi=n=>{const e=n.getElementsByTagName("parsererror");if(e.length>0)throw new Error(e[0]);return qi(n.documentElement)},X9=function(n){return new Promise((e,t)=>{if(typeof n===Sn||n instanceof String)fetch(n).then(o=>o.text()).then(o=>Hi(Gi(o))).then(o=>o.nodeName===de?o:o.getElementsByTagName(de)[0]).then(o=>o==null?t(new Error("valid XML found, but no SVG element")):e(o)).catch(o=>t(o));else if(n instanceof $().Document)return asyncDone(n)})},Yi=function(n){if(typeof n===Sn||n instanceof String)try{return Hi(Gi(n))}catch(e){return e}if(n.childNodes!=null)return n},Z9=n=>typeof n===Sn&&/^[\w,\s-]+\.[A-Za-z]{3}$/.test(n)&&n.length<1e4,Xi=n=>Z9(n)&&sr&&typeof $().fetch===Dn?X9(n):Yi(n);function J9(n,e){const t=n.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").split("~::~"),o=t.length;let r=!1,s=0,c="";const i=e!=null&&typeof e=="string"?e:"	",a=[`
`];for(let l=0;l<100;l+=1)a.push(a[l]+i);for(let l=0;l<o;l+=1)t[l].search(/<!/)>-1?(c+=a[s]+t[l],r=!0,(t[l].search(/-->/)>-1||t[l].search(/\]>/)>-1||t[l].search(/!DOCTYPE/)>-1)&&(r=!1)):t[l].search(/-->/)>-1||t[l].search(/\]>/)>-1?(c+=t[l],r=!1):/^<\w/.exec(t[l-1])&&/^<\/\w/.exec(t[l])&&/^<[\w:\-\.\,]+/.exec(t[l-1])==/^<\/[\w:\-\.\,]+/.exec(t[l])[0].replace("/","")?(c+=t[l],r||(s-=1)):t[l].search(/<\w/)>-1&&t[l].search(/<\//)===-1&&t[l].search(/\/>/)===-1?c=r?c+=t[l]:c+=a[s++]+t[l]:t[l].search(/<\w/)>-1&&t[l].search(/<\//)>-1?c=r?c+=t[l]:c+=a[s]+t[l]:t[l].search(/<\//)>-1?c=r?c+=t[l]:c+=a[--s]+t[l]:t[l].search(/\/>/)>-1?c=r?c+=t[l]:c+=a[s]+t[l]:t[l].search(/<\?/)>-1||t[l].search(/xmlns\:/)>-1||t[l].search(/xmlns\=/)>-1?c+=a[s]+t[l]:c+=t[l];return c[0]===`
`?c.slice(1):c}const K9=()=>({download:!1,output:Sn,windowStyle:!1,filename:"image.svg"}),Q9=function(){const n=[];if($().document.styleSheets)for(let e=0;e<$().document.styleSheets.length;e+=1){const t=$().document.styleSheets[e];try{const o="cssRules"in t?t.cssRules:t.rules;for(let r=0;r<o.length;r+=1){const s=o[r];"cssText"in s?n.push(s.cssText):n.push(`${s.selectorText} {
${s.style.cssText}
}
`)}}catch(o){console.warn(o)}}return n.join(`
`)},nu=function(n,e){const t=new($()).Blob([e],{type:"text/plain"}),o=$().document.createElement("a");o.setAttribute("href",$().URL.createObjectURL(t)),o.setAttribute("download",n),$().document.body.appendChild(o),o.click(),$().document.body.removeChild(o)},Zi=function(n,e){if(e=Object.assign(K9(),e),e.windowStyle){const r=$().document.createElementNS(J0,Z0);r.setAttribute("type","text/css"),r.innerHTML=Q9(),n.appendChild(r)}const t=new($()).XMLSerializer().serializeToString(n),o=J9(t);return e.download&&sr&&!u9&&nu(e.filename,o),e.output===de?n:o},et=(n,...e)=>{const t=e.length===1&&typeof e[0]===Sn?e[0]:Di(...e);return t&&n.setAttribute(or,t),n},Q0=function(n){const e=n.getAttribute(or);return e==null?void 0:e.split(" ").map(t=>parseFloat(t))},Ji=function(n,e,t){const o=n.createSVGPoint();o.x=e,o.y=t;const r=o.matrixTransform(n.getScreenCTM().inverse());return[r.x,r.y]};var eu=Object.freeze({__proto__:null,setViewBox:et,getViewBox:Q0,convertToViewBox:Ji});const Ki=(n,e)=>{const t=Xi(e);if(t!=null)return typeof t.then===Dn?t.then(o=>gs(n,o)):gs(n,t)},N1=function(n){const e=Q0(n);if(e!==void 0)return e;if(typeof n.getBoundingClientRect===Dn){const t=n.getBoundingClientRect();return[t.x,t.y,t.width,t.height]}return[]},tu=function(n,e){const t=Q0(n);return t!==void 0&&et(n,...[-e,-e,e*2,e*2].map((o,r)=>t[r]+o)),n},_s="svg-background-rectangle",ou=function(n,e){let t=Array.from(n.childNodes).filter(o=>o.getAttribute(Ue)===_s).shift();return t==null&&(t=this.Constructor("rect",null,...N1(n)),t.setAttribute(Ue,_s),t.setAttribute(L1,z1),n.insertBefore(t,n.firstChild)),t.setAttribute(l9,e),n},ru=function(n){const e=n.getElementsByTagName(Z0);return e.length===0?void 0:e[0]},su=function(n,e){let t=ru(n);return t==null&&(t=this.Constructor(Z0),n.insertBefore(t,n.firstChild)),t.textContent="",t.appendChild(x0(e)),t};var cu={clear:Y9,size:et,setViewBox:et,getViewBox:Q0,padding:tu,background:ou,getWidth:n=>N1(n)[2],getHeight:n=>N1(n)[3],stylesheet:function(n,e){return su.call(this,n,e)},load:Ki,save:Zi};const ar={math:{vector:(...n)=>[...n]}},De={move:["mousemove","touchmove"],press:["mousedown","touchstart"],release:["mouseup","touchend"],leave:["mouseleave","touchcancel"]},iu=Object.values(De).reduce((n,e)=>n.concat(e),[]),au=(n,e)=>iu.forEach(t=>{e[t].forEach(o=>n.removeEventListener(t,o)),e[t]=[]}),E0=(n,e,t)=>Object.defineProperty(n,e,{get:()=>t,enumerable:!0,configurable:!0}),vs=(n,e)=>{["pressX","pressY"].filter(t=>!Object.prototype.hasOwnProperty.call(n,t)).forEach((t,o)=>E0(n,t,e[o])),Object.prototype.hasOwnProperty.call(n,"press")||E0(n,"press",ar.math.vector(...e))},lu=function(n){let e=[];const t=[];Object.keys(De).forEach(s=>{De[s].forEach(c=>{t[c]=[]})});const o=s=>De[s].forEach(c=>t[c].forEach(i=>n.removeEventListener(c,i))),r={press:(s,c)=>{e=c,vs(s,e)},release:()=>{},leave:()=>{},move:(s,c)=>{s.buttons>0&&e[0]===void 0?e=c:s.buttons===0&&e[0]!==void 0&&(e=[]),vs(s,e)}};Object.keys(De).forEach(s=>{const c=`on${st.capitalized(s)}`;Object.defineProperty(n,c,{set:i=>{if(i==null){o(s);return}De[s].forEach(a=>{const l=f=>{const d=f.touches!=null?f.touches[0]:f;if(d!==void 0){const m=Ji(n,d.clientX,d.clientY).map(_=>Number.isNaN(_)?void 0:_);["x","y"].filter(_=>!Object.prototype.hasOwnProperty.call(f,_)).forEach((_,v)=>E0(f,_,m[v])),Object.prototype.hasOwnProperty.call(f,"position")||E0(f,"position",ar.math.vector(...m)),r[s](f,m)}i(f)};n.addEventListener&&(t[a].push(l),n.addEventListener(a,l))})},enumerable:!0})}),Object.defineProperty(n,"off",{value:()=>au(n,t)})};var Qi=()=>Math.random().toString(36).replace(/[^a-z]+/g,"").concat("aaaaa").substr(0,5);const uu=function(n){let e;const t={};let o=0,r;const s=()=>{$().cancelAnimationFrame&&$().cancelAnimationFrame(r),Object.keys(t).forEach(c=>delete t[c]),e=void 0,o=0};Object.defineProperty(n,"play",{set:c=>{if(s(),c==null)return;const i=Qi(),a=l=>{e||(e=l,o=0);const f=(l-e)*.001;c({time:f,frame:o}),o+=1,t[i]&&(r=$().requestAnimationFrame(t[i]))};t[i]=a,$().requestAnimationFrame&&(r=$().requestAnimationFrame(t[i]))},enumerable:!0}),Object.defineProperty(n,"stop",{value:s,enumerable:!0})},fu=n=>n&&n.parentNode?n.parentNode.removeChild(n):void 0,du=[["cx","cy"],["x","y"]],Ms=function(n,e={}){const t=[0,0],o={selected:!1,svg:void 0,updatePosition:i=>i},r=()=>{!o.svg||(o.svg.parentNode||n.appendChild(o.svg),du.filter(i=>o.svg[i[0]]!=null).forEach(i=>i.forEach((a,l)=>{o.svg.setAttribute(a,t[l])})))},s=new Proxy(t,{set:(i,a,l)=>(i[a]=l,r(),!0)}),c=function(...i){Q(...J(...i)).forEach((a,l)=>{t[l]=a}),r(),typeof t.delegate===Dn&&t.delegate.apply(t.pointsContainer,[s,t.pointsContainer])};return t.delegate=void 0,t.setPosition=c,t.onMouseMove=i=>o.selected?c(o.updatePosition(i)):void 0,t.onMouseUp=()=>{o.selected=!1},t.distance=i=>Math.sqrt(K0(i,t)),["x","y"].forEach((i,a)=>Object.defineProperty(t,i,{get:()=>t[a],set:l=>{t[a]=l}})),[de,"updatePosition","selected"].forEach(i=>Object.defineProperty(t,i,{get:()=>o[i],set:a=>{o[i]=a}})),Object.defineProperty(t,"remove",{value:()=>{fu(o.svg),t.delegate=void 0}}),s},mu=function(n,e,t){let o,r;const s=Array.from(Array(e)).map(()=>Ms(n,t)),c=d=>typeof r===Dn?r.call(s,d,o,s):void 0;s.forEach(d=>{d.delegate=c,d.pointsContainer=s});const i=function(d){s.length>0&&(o=s.map((m,_)=>({i:_,d:K0(m,[d.x,d.y])})).sort((m,_)=>m.d-_.d).shift().i,s[o].selected=!0)},a=function(d){s.forEach(m=>m.onMouseMove(d))},l=function(){s.forEach(d=>d.onMouseUp()),o=void 0};n.onPress=i,n.onMove=a,n.onRelease=l,Object.defineProperty(s,"selectedIndex",{get:()=>o}),Object.defineProperty(s,"selected",{get:()=>s[o]}),Object.defineProperty(s,"add",{value:d=>{s.push(Ms(n,d))}}),s.removeAll=()=>{for(;s.length>0;)s.pop().remove()};const f={onChange:(d,m)=>{if(r=d,m===!0){const _=s.length-1;d.call(s,s[_],_,s)}},position:d=>s.forEach((m,_)=>m.setPosition(d.call(s,m,_,s))),svg:d=>s.forEach((m,_)=>{m.svg=d.call(s,m,_,s)})};return Object.keys(f).forEach(d=>{s[d]=function(){return typeof arguments[0]===Dn&&f[d](...arguments),s}}),s.parent=function(d){return d!=null&&d.appendChild!=null&&s.forEach(m=>{d.appendChild(m.svg)}),s},s},hu=n=>{n.controls=(...e)=>mu.call(n,n,...e)};var pu={svg:{args:(...n)=>[Di(Q(...n))].filter(e=>e!=null),methods:cu,init:(n,...e)=>{e.filter(t=>typeof t===Sn).forEach(t=>Ki(n,t)),e.filter(t=>t!=null).filter(t=>typeof t.appendChild===Dn).forEach(t=>t.appendChild(n)),lu(n),uu(n),hu(n)}}};const bs=(n,...e)=>{const t=e.map(o=>Yi(o)).filter(o=>o!==void 0);return t.filter(o=>o.tagName===de).forEach(o=>Wi(n,o)),t.filter(o=>o.tagName!==de).forEach(o=>n.appendChild(o)),n};var gu={g:{init:bs,methods:{load:bs}}},hn=Object.assign(Object.create(null),{svg:[or],line:["x1","y1","x2","y2"],rect:["x","y","width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],polygon:[Pe],polyline:[Pe],path:["d"],text:["x","y"],mask:[We],symbol:[We],clipPath:[We,"clip-rule"],marker:[We,"markerHeight","markerUnits","markerWidth","orient","refX","refY"],linearGradient:["x1","x2","y1","y2"],radialGradient:["cx","cy","r","fr","fx","fy"],stop:["offset","stop-color","stop-opacity"],pattern:["patternContentUnits","patternTransform","patternUnits"]});const ys=(n,e)=>(n.setAttribute(hn.circle[2],e),n),Ne=(n,e,t)=>([...Q(...J(e,t)).slice(0,2)].forEach((o,r)=>n.setAttribute(hn.circle[r],o)),n),_u=(n,e,t,o)=>[n,e,Bi([n,e],[t,o])];var vu={circle:{args:(n,e,t,o)=>{const r=Q(...J(n,e,t,o));switch(r.length){case 0:case 1:return[,,...r];case 2:case 3:return r;default:return _u(...r)}},methods:{radius:ys,setRadius:ys,origin:Ne,setOrigin:Ne,center:Ne,setCenter:Ne,position:Ne,setPosition:Ne}}};const Vs=(n,e,t)=>([,,e,t].forEach((o,r)=>n.setAttribute(hn.ellipse[r],o)),n),Re=(n,e,t)=>([...Q(...J(e,t)).slice(0,2)].forEach((o,r)=>n.setAttribute(hn.ellipse[r],o)),n);var Mu={ellipse:{args:(n,e,t,o)=>{const r=Q(...J(n,e,t,o)).slice(0,4);switch(r.length){case 0:case 1:case 2:return[,,...r];default:return r}},methods:{radius:Vs,setRadius:Vs,origin:Re,setOrigin:Re,center:Re,setCenter:Re,position:Re,setPosition:Re}}};const n3=(...n)=>Q(...nt(...n)).slice(0,4),bu=(n,...e)=>(n3(...e).forEach((t,o)=>n.setAttribute(hn.line[o],t)),n);var yu={line:{args:n3,methods:{setPoints:bu}}};const Vu=/[MmLlSsQqLlHhVvCcSsQqTtAaZz]/g,xu=/-?[0-9]*\.?\d+/g,qe={m:"move",l:"line",v:"vertical",h:"horizontal",a:"ellipse",c:"curve",s:"smoothCurve",q:"quadCurve",t:"smoothQuadCurve",z:"close"};Object.keys(qe).forEach(n=>{const e=qe[n];qe[n.toUpperCase()]=e.charAt(0).toUpperCase()+e.slice(1)});const Eu=function(n){const e=[];let t;for(;(t=Vu.exec(n))!==null;)e.push(t);return e.map(o=>({command:n[o.index],index:o.index})).reduceRight((o,r)=>{const s=n.substring(r.index,o.length?o[o.length-1].index:n.length);return o.concat([{command:r.command,index:r.index,chunk:s.length>0?s.substr(1,s.length-1):s}])},[]).reverse().map(o=>{const r=o.chunk.match(xu);return o.en=qe[o.command],o.values=r?r.map(parseFloat):[],delete o.chunk,o})},e3=n=>{const e=n.getAttribute("d");return e==null?"":e},ku=n=>(n.removeAttribute("d"),n),R1=(n,e,...t)=>(n.setAttribute("d",`${e3(n)}${e}${J(...t).join(" ")}`),n),xs=n=>Eu(e3(n)),t3={addCommand:R1,appendCommand:R1,clear:ku,getCommands:xs,get:xs,getD:n=>n.getAttribute("d")};Object.keys(qe).forEach(n=>{t3[qe[n]]=(e,...t)=>R1(e,n,...t)});var wu={path:{methods:t3}};const Es=(n,e,t)=>([,,e,t].forEach((o,r)=>n.setAttribute(hn.rect[r],o)),n),n0=(n,e,t)=>([...Q(...J(e,t)).slice(0,2)].forEach((o,r)=>n.setAttribute(hn.rect[r],o)),n),ks=function(n){return[0,1].forEach(e=>{n[2+e]<0&&(n[0+e]===void 0&&(n[0+e]=0),n[0+e]+=n[2+e],n[2+e]=-n[2+e])}),n};var Au={rect:{args:(n,e,t,o)=>{const r=Q(...J(n,e,t,o)).slice(0,4);switch(r.length){case 0:case 1:case 2:case 3:return ks([,,...r]);default:return ks(r)}},methods:{origin:n0,setOrigin:n0,center:n0,setCenter:n0,size:Es,setSize:Es}}},Pu={style:{init:(n,e)=>{n.textContent="",n.appendChild(x0(e))},methods:{setTextContent:(n,e)=>(n.textContent="",n.appendChild(x0(e)),n)}}},Ou={text:{args:(n,e,t)=>Q(...J(n,e,t)).slice(0,2),init:(n,e,t,o,r)=>{const s=[e,t,o,r].filter(c=>typeof c===Sn).shift();s&&n.appendChild($().document.createTextNode(s))}}};const Su=function(){return Array.from(arguments).filter(n=>typeof n===Sn||n instanceof String).shift()||Qi()},e0=(...n)=>[Su(...n)];var ju={mask:{args:e0},clipPath:{args:e0},symbol:{args:e0},marker:{args:e0,methods:{size:et,setViewBox:et}}};const Cu=n=>{const e=n.getAttribute(Pe);return e==null?"":e},Bu=function(){return Array.from(Array(Math.floor(arguments.length/2))).map((n,e)=>`${arguments[e*2+0]},${arguments[e*2+1]}`).join(" ")},lr=(...n)=>[Bu(...Q(...nt(...n)))],ws=(n,...e)=>(n.setAttribute(Pe,lr(...e)[0]),n),As=(n,...e)=>(n.setAttribute(Pe,[Cu(n),lr(...e)[0]].filter(t=>t!=="").join(" ")),n),Ps=function(...n){return n.length===1&&typeof n[0]===Sn?[n[0]]:lr(...n)};var Fu={polyline:{args:Ps,methods:{setPoints:ws,addPoint:As}},polygon:{args:Ps,methods:{setPoints:ws,addPoint:As}}},Lu=Object.assign({},pu,gu,vu,Mu,yu,wu,Au,Pu,Ou,ju,Fu),Ve={presentation:["color","color-interpolation","cursor","direction","display","fill","fill-opacity","fill-rule","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","image-rendering","letter-spacing","opacity","overflow","paint-order","pointer-events","preserveAspectRatio","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","tabindex","transform-origin","user-select","vector-effect","visibility"],animation:["accumulate","additive","attributeName","begin","by","calcMode","dur","end","from","keyPoints","keySplines","keyTimes","max","min","repeatCount","repeatDur","restart","to","values"],effects:["azimuth","baseFrequency","bias","color-interpolation-filters","diffuseConstant","divisor","edgeMode","elevation","exponent","filter","filterRes","filterUnits","flood-color","flood-opacity","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","lighting-color","limitingConeAngle","mode","numOctaves","operator","order","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","primitiveUnits","radius","result","seed","specularConstant","specularExponent","stdDeviation","stitchTiles","surfaceScale","targetX","targetY","type","xChannelSelector","yChannelSelector"],text:["dx","dy","alignment-baseline","baseline-shift","dominant-baseline","lengthAdjust","method","overline-position","overline-thickness","rotate","spacing","startOffset","strikethrough-position","strikethrough-thickness","text-anchor","text-decoration","text-rendering","textLength","underline-position","underline-thickness","word-spacing","writing-mode"],gradient:["gradientTransform","gradientUnits","spreadMethod"]};Object.values(O).reduce((n,e)=>n.concat(e),[]).filter(n=>hn[n]===void 0).forEach(n=>{hn[n]=[]});[[[de,"defs","g"].concat(O.v,O.t),Ve.presentation],[["filter"],Ve.effects],[O.cT.concat("text"),Ve.text],[O.cF,Ve.effects],[O.cG,Ve.gradient]].forEach(n=>n[0].forEach(e=>{hn[e]=hn[e].concat(n[1])}));const Os=n=>{if(n==null)return[];const e=n.getAttribute(Ue);return e==null?[]:e.split(" ").filter(t=>t!=="")};var o3={addClass:(n,e)=>{const t=Os(n).filter(o=>o!==e);t.push(e),n.setAttributeNS(null,Ue,t.join(" "))},removeClass:(n,e)=>{const t=Os(n).filter(o=>o!==e);n.setAttributeNS(null,Ue,t.join(" "))},setClass:(n,e)=>{n.setAttributeNS(null,Ue,e)},setId:(n,e)=>{n.setAttributeNS(null,We,e)}};const zu=n=>{const e=n.getAttribute(rr);return e==null||e===""?void 0:e},ur={clearTransform:n=>(n.removeAttribute(rr),n)};["translate","rotate","scale","matrix"].forEach(n=>{ur[n]=(e,...t)=>e.setAttribute(rr,[zu(e),`${n}(${t.join(" ")})`].filter(o=>o!==void 0).join(" "))});const Iu=function(n){return n==null?"":typeof n===Sn?n.slice(0,3)==="url"?n:`url(#${n})`:n.getAttribute!=null?`url(#${n.getAttribute(We)})`:""},r3={};["clip-path","mask","symbol","marker-end","marker-mid","marker-start"].forEach(n=>{r3[st.toCamel(n)]=(e,t)=>e.setAttribute(n,Iu(t))});const z={};O.v.push(...Object.keys(oe));Object.keys(oe).forEach(n=>{oe[n].attributes=oe[n].attributes===void 0?[...Ve.presentation]:oe[n].attributes.concat(Ve.presentation)});Object.assign(z,Lu,oe);Object.keys(O).forEach(n=>O[n].filter(e=>z[e]===void 0).forEach(e=>{z[e]={}}));const Ss=function(){return Array.from(arguments)};Object.keys(z).forEach(n=>{z[n].nodeName||(z[n].nodeName=n),z[n].init||(z[n].init=Ss),z[n].args||(z[n].args=Ss),z[n].methods||(z[n].methods={}),z[n].attributes||(z[n].attributes=hn[n]||[])});const n1=(n,e)=>{n.forEach(t=>Object.keys(e).forEach(o=>{z[t].methods[o]=function(){return e[o](...arguments),arguments[0]}}))};n1(J(O.t,O.v,O.g,O.s,O.p,O.i,O.h,O.d),o3);n1(J(O.t,O.v,O.g,O.s,O.p,O.i,O.h,O.d),Ui);n1(J(O.v,O.g,O.s),ur);n1(J(O.t,O.v,O.g),r3);const h1={svg:{version:"1.1",xmlns:J0},style:{type:"text/css"}},Tu=(n,e)=>{h1[e]&&Object.keys(h1[e]).forEach(t=>n.setAttribute(t,h1[e][t]))},s3={},zt=(n,e,...t)=>{const o=$().document.createElementNS(J0,z[n].nodeName);return e&&e.appendChild(o),Tu(o,n),z[n].init(o,...t),z[n].args(...t).forEach((r,s)=>{z[n].attributes[s]!=null&&o.setAttribute(z[n].attributes[s],r)}),z[n].attributes.forEach(r=>{Object.defineProperty(o,st.toCamel(r),{value:function(){return o.setAttribute(r,...arguments),o}})}),Object.keys(z[n].methods).forEach(r=>Object.defineProperty(o,r,{value:function(){return z[n].methods[r].call(s3,o,...arguments)}})),re[n]&&re[n].forEach(r=>{const s=function(){return zt(r,o,...arguments)};z[r].static&&Object.keys(z[r].static).forEach(c=>{s[c]=function(){return z[r].static[c](o,...arguments)}}),Object.defineProperty(o,r,{value:s})}),o};s3.Constructor=zt;const c3={};Object.keys(O).forEach(n=>O[n].forEach(e=>{c3[e]=(...t)=>zt(e,null,...t)}));const Nu=(n,e)=>{["segment","circle","ellipse","rect","polygon"].filter(t=>e[t]&&e[t].prototype).forEach(t=>{e[t].prototype.svg=function(){return n.path(this.svgPath())}}),ar.math.vector=e.vector},Ru=(n,e)=>{const t="origami";z[t]={nodeName:"g",init:function(o,...r){return e.graph.svg.drawInto(o,...r)},args:()=>[],methods:z.g.methods,attributes:z.g.attributes,static:{}},Object.keys(e.graph.svg).forEach(o=>{z[t].static[o]=(r,...s)=>{const c=e.graph.svg[o](...s);return r.appendChild(c),c}}),re[t]=[...re.g],re.svg.push(t),re.g.push(t),n[t]=(...o)=>zt(t,null,...o),Object.keys(e.graph.svg).forEach(o=>{n[t][o]=e.graph.svg[o]})},Du=function(n){n.graph&&n.origami&&(n.svg=this,Nu(this,n),Ru(this,n))},js=function(n,...e){e.filter(t=>typeof t===Dn).forEach(t=>t.call(n,n))};ji.init=function(){const n=zt(de,null,...arguments);return $().document.readyState==="loading"?$().document.addEventListener("DOMContentLoaded",()=>js(n,...arguments)):js(n,...arguments),n};Kn.NS=J0;Kn.linker=Du.bind(Kn);Object.assign(Kn,c3);Kn.core=Object.assign(Object.create(null),{load:Xi,save:Zi,coordinates:Q,flatten:J,attributes:hn,children:re,cdata:x0},st,o3,Ui,m9,ur,eu);Object.defineProperty(Kn,"window",{enumerable:!1,set:n=>{d9(n)}});const Cs=(n,e,t)=>{const o=n.createShader(t);if(n.shaderSource(o,e),n.compileShader(o),!n.getShaderParameter(o,n.COMPILE_STATUS))throw new Error(n.getShaderInfoLog(o));return o},$u=(n,e,t)=>{const o=n.createProgram();if(n.attachShader(o,e),n.attachShader(o,t),n.linkProgram(o),!n.getProgramParameter(o,n.LINK_STATUS))throw new Error(n.getProgramInfoLog(o));return n.deleteShader(e),n.deleteShader(t),o},Wu=(n,e,t)=>{const o=Cs(n,e,n.VERTEX_SHADER),r=Cs(n,t,n.FRAGMENT_SHADER);return $u(n,o,r)},Uu=(n,e)=>{const t=[null,"webgl","webgl2"],o=window.devicePixelRatio||1;if(n.width=n.clientWidth*o,n.height=n.clientHeight*o,e)return{gl:n.getContext(t[e]),version:e};const r=n.getContext(t[2]);if(r)return{gl:r,version:2};const s=n.getContext(t[1]);if(s)return{gl:s,version:1};throw new Error("WebGl not Supported")};var qu=Object.assign(Object.create(null),{createProgram:Wu,initialize:Uu});const k=Object.assign(Z,te,{math:u.core,axiom:bn,diagram:ml,layer:t6,singleVertex:i6,text:P6,webgl:qu});Object.keys(u).filter(n=>n!=="core").forEach(n=>{k[n]=u[n]});Object.defineProperty(k,"use",{enumerable:!1,value:O6.bind(k)});w3||(k.use(Ke),k.use(Kn));Object.defineProperty(k,"window",{enumerable:!1,set:n=>{P3(n),Kn.window=n}});const i3=`{
	"frame_classes":["creasePattern"],
	"vertices_coords":[[0.5,0.7928932188134525],[0.5761204674887133,0.7167727513247393],[0.6755766511785422,0.8656194489676547],[1,1],[0.8086582838174552,0.46193976625564337],[0.7928932188134525,0.5],[0.5,0.20710678118654752],[0.5380602337443569,0.1913417161825448],[0.4746265108370956,0.9055909171082464],[0.5,1],[0.46193976625564337,0.8086582838174552],[0.40236892706218264,0.7311456783745411],[0.35355339059327373,0.6464466094067262],[0.2071067811865476,0.5],[0.2832272486752608,0.4238795325112868],[0.5,0.5],[0.09440908289175362,0.5253734891629045],[0.19134171618254492,0.5380602337443567],[0.5976310729378173,0.26885432162545897],[0.6464466094067263,0.35355339059327373],[0.9055909171082465,0.47462651083709556],[1,0.5],[0.731145678374541,0.40236892706218275],[0.4365087311134498,0.18080783652146148],[0,1],[0.33408931895964944,0.5],[0.5,0.6659106810403506],[0.42387953251128685,0.2832272486752607],[0.5,0.33408931895964944],[0.6659106810403506,0.5],[0.7167727513247393,0.5761204674887133],[0.8656194489676547,0.6755766511785422],[0.9701901878404703,0.1498640459224571],[1,0.17557665117854204],[1,0],[0.915108837196079,0.12704860345172225],[0.9328097244838275,0.1622116744107287],[0.8758485593336279,0.1241514406663721],[0.8377883255892713,0.06719027551617254],[0.8729513965482778,0.08489116280392092],[0.824423348821458,0],[0.8501359540775429,0.029809812159529714],[0.26885432162545886,0.5976310729378174],[0.5253734891629046,0.09440908289175354],[0,0],[0,0.41020978644836315],[0,0.5],[0.37301746222689847,0.20710678118654807],[0.18080783652146154,0.4365087311134497],[0.32442334882145774,0.13438055103234525],[0.41020978644836337,0.11731656763491008],[0.13438055103234534,0.3244233488214578],[0.1173165676349102,0.41020978644836315],[0.41020978644836315,0],[0.5,0],[0.20710678118654802,0.3730174622268984]],
	"edges_vertices":[[0,1],[2,3],[4,5],[6,7],[8,9],[10,8],[11,10],[12,11],[13,14],[12,15],[16,17],[9,3],[10,0],[13,17],[18,19],[7,18],[20,21],[4,20],[19,22],[23,6],[16,24],[17,24],[25,15],[15,26],[26,1],[26,0],[0,2],[1,2],[27,28],[6,28],[29,5],[29,30],[15,29],[5,31],[28,18],[20,31],[11,26],[8,2],[32,33],[34,33],[35,36],[19,37],[7,38],[38,39],[18,39],[39,37],[37,35],[35,22],[36,32],[40,34],[41,38],[40,41],[34,32],[41,34],[38,34],[39,34],[37,34],[34,35],[34,36],[21,3],[31,3],[30,31],[30,5],[27,6],[14,25],[25,42],[42,12],[43,41],[43,7],[44,45],[45,46],[47,23],[48,13],[49,50],[50,43],[51,52],[52,16],[44,53],[53,54],[13,25],[17,42],[42,24],[24,12],[24,11],[24,10],[24,8],[24,9],[50,23],[52,48],[54,40],[54,43],[49,23],[49,47],[51,55],[46,24],[46,16],[47,27],[45,52],[33,21],[32,20],[36,4],[22,4],[22,29],[15,19],[28,15],[55,14],[55,48],[51,48],[53,50],[44,49],[44,51],[55,47],[14,27],[1,30]],
	"edges_assignment":["V","M","M","M","M","V","M","V","V","V","V","B","M","M","V","M","M","V","V","M","V","M","M","M","V","M","M","M","V","M","M","V","M","M","M","V","M","V","V","B","V","M","M","V","M","M","M","M","M","B","M","V","V","V","M","M","V","M","M","B","M","M","V","V","V","M","V","V","V","B","B","V","M","V","V","V","V","B","B","M","M","M","M","M","M","V","B","M","M","B","M","M","M","M","B","M","M","V","B","V","M","M","M","V","M","M","V","M","V","M","M","M","V","V"],
	"faces_vertices":[[30,1,26,15,29],[25,14,27,28,15],[29,15,19,22],[19,15,28,18],[26,11,12,15],[15,12,42,25],[2,1,30,31,3],[51,44,49,47,55],[21,3,31,20],[49,44,53,50],[8,2,3,9],[45,44,51,52],[24,8,9],[46,16,24],[10,8,24],[24,16,17],[11,10,24],[24,17,42],[12,11,24],[42,12,24],[21,20,32,33],[54,40,41,43],[20,4,36,32],[38,7,43,41],[36,4,22,35],[18,7,38,39],[22,19,37,35],[19,18,39,37],[2,0,1],[55,48,51],[10,0,2,8],[51,48,52],[26,0,10,11],[17,13,25,42],[1,0,26],[25,13,14],[30,5,31],[49,23,47],[5,4,20,31],[50,23,49],[22,4,5,29],[28,6,7,18],[29,5,30],[27,6,28],[33,32,34],[40,34,41],[34,32,36],[41,34,38],[35,34,36],[38,34,39],[37,34,35],[39,34,37],[27,14,55,47],[14,13,48,55],[23,6,27,47],[48,13,17,16,52],[7,6,23,50,43],[52,16,46,45],[54,43,50,53]]
}`,Gu=`{
	"frame_classes":["creasePattern"],
	"vertices_coords":[[50,79.28932188134526],[57.61204674887133,71.67727513247392],[67.55766511785421,86.56194489676547],[100,100],[80.86582838174552,46.19397662556434],[79.28932188134526,50],[50,20.71067811865475],[53.80602337443568,19.13417161825448],[47.46265108370957,90.55909171082463],[50,100],[46.19397662556434,80.86582838174552],[40.23689270621826,73.11456783745412],[35.35533905932737,64.64466094067261],[20.71067811865476,50],[28.322724867526077,42.38795325112868],[50,50],[9.440908289175363,52.53734891629045],[19.13417161825449,53.806023374435675],[59.76310729378173,26.885432162545897],[64.64466094067262,35.35533905932737],[90.55909171082465,47.46265108370955],[100,50],[73.1145678374541,40.23689270621828],[43.650873111344985,18.08078365214615],[0,100],[33.40893189596495,50],[50,66.59106810403506],[42.387953251128685,28.322724867526073],[50,33.40893189596495],[66.59106810403506,50],[71.67727513247392,57.61204674887133],[86.56194489676547,67.55766511785421],[97.01901878404703,14.986404592245712],[100,17.557665117854203],[100,0],[91.51088371960792,12.704860345172227],[93.28097244838274,16.22116744107287],[87.58485593336279,12.41514406663721],[83.77883255892714,6.719027551617255],[87.29513965482778,8.489116280392093],[82.4423348821458,0],[85.0135954077543,2.9809812159529714],[26.885432162545886,59.76310729378174],[52.53734891629046,9.440908289175354],[0,0],[0,41.02097864483631],[0,50],[37.30174622268985,20.71067811865481],[18.080783652146156,43.650873111344964],[32.44233488214577,13.438055103234525],[41.02097864483634,11.731656763491008],[13.438055103234534,32.44233488214578],[11.731656763491019,41.02097864483631],[41.02097864483631,0],[50,0],[20.7106781186548,37.30174622268984]],
	"edges_vertices":[[0,1],[2,3],[4,5],[6,7],[8,9],[10,8],[11,10],[12,11],[13,14],[12,15],[16,17],[9,3],[10,0],[13,17],[18,19],[7,18],[20,21],[4,20],[19,22],[23,6],[16,24],[17,24],[25,15],[15,26],[26,1],[26,0],[0,2],[1,2],[27,28],[6,28],[29,5],[29,30],[15,29],[5,31],[28,18],[20,31],[11,26],[8,2],[32,33],[34,33],[35,36],[19,37],[7,38],[38,39],[18,39],[39,37],[37,35],[35,22],[36,32],[40,34],[41,38],[40,41],[34,32],[41,34],[38,34],[39,34],[37,34],[34,35],[34,36],[21,3],[31,3],[30,31],[30,5],[27,6],[14,25],[25,42],[42,12],[43,41],[43,7],[44,45],[45,46],[47,23],[48,13],[49,50],[50,43],[51,52],[52,16],[44,53],[53,54],[13,25],[17,42],[42,24],[24,12],[24,11],[24,10],[24,8],[24,9],[50,23],[52,48],[54,40],[54,43],[49,23],[49,47],[51,55],[46,24],[46,16],[47,27],[45,52],[33,21],[32,20],[36,4],[22,4],[22,29],[15,19],[28,15],[55,14],[55,48],[51,48],[53,50],[44,49],[44,51],[55,47],[14,27],[1,30]],
	"edges_assignment":["V","M","M","M","M","V","M","V","V","V","V","B","M","M","V","M","M","V","V","M","V","M","M","M","V","M","M","M","V","M","M","V","M","M","M","V","M","V","V","B","V","M","M","V","M","M","M","M","M","B","M","V","V","V","M","M","V","M","M","B","M","M","V","V","V","M","V","V","V","B","B","V","M","V","V","V","V","B","B","M","M","M","M","M","M","V","B","M","M","B","M","M","M","M","B","M","M","V","B","V","M","M","M","V","M","M","V","M","V","M","M","M","V","V"],
	"faces_vertices":[[30,1,26,15,29],[25,14,27,28,15],[29,15,19,22],[19,15,28,18],[26,11,12,15],[15,12,42,25],[2,1,30,31,3],[51,44,49,47,55],[21,3,31,20],[49,44,53,50],[8,2,3,9],[45,44,51,52],[24,8,9],[46,16,24],[10,8,24],[24,16,17],[11,10,24],[24,17,42],[12,11,24],[42,12,24],[21,20,32,33],[54,40,41,43],[20,4,36,32],[38,7,43,41],[36,4,22,35],[18,7,38,39],[22,19,37,35],[19,18,39,37],[2,0,1],[55,48,51],[10,0,2,8],[51,48,52],[26,0,10,11],[17,13,25,42],[1,0,26],[25,13,14],[30,5,31],[49,23,47],[5,4,20,31],[50,23,49],[22,4,5,29],[28,6,7,18],[29,5,30],[27,6,28],[33,32,34],[40,34,41],[34,32,36],[41,34,38],[35,34,36],[38,34,39],[37,34,35],[39,34,37],[27,14,55,47],[14,13,48,55],[23,6,27,47],[48,13,17,16,52],[7,6,23,50,43],[52,16,46,45],[54,43,50,53]]
}`,Hu='{"frame_classes":["foldedForm"],"vertices_coords":[[0.65,1.030761184457488,0],[0.5510433922646727,0.9318045767221611,0],[0.7445440992004637,0.802511537925384,0],[1.201043392264674,0.8025115379253847,0],[0.6005216961323366,1.0512557689626916,0],[0.65,1.0307611844574884,0],[0.65,1.0307611844574884,0],[0.6005216961323363,1.0512557689626922,0],[0.523079605180838,0.9504893818869038,0],[0.600521696132337,1.0512557689626922,0],[0.6005216961323365,1.0512557689626916,0],[0.5230796051808374,0.9504893818869035,0],[0.6005216961323363,1.051255768962692,0],[0.65,1.0307611844574882,0],[0.5510433922646728,0.9318045767221612,0],[0.8492659271696449,0.9482225349049719,0],[0.5230796051808373,0.9504893818869032,0],[0.6005216961323361,1.0512557689626918,0],[0.6170144640882249,1.1772681922407204,0],[0.6005216961323365,1.0512557689626918,0],[0.6170144640882238,1.1772681922407204,0],[0.6005216961323363,1.0512557689626918,0],[0.617014464088225,1.1772681922407207,0],[0.7325386495525155,1.0649498125221002,0],[0.995435052646582,0.5349773161422662,0],[0.65,0.8656838853524559,0],[0.65,0.8656838853524558,0],[0.65,1.1707069612032226,0],[0.7667272776171286,1.1474884620746169,0],[0.7667272776171288,1.1474884620746166,0],[0.65,1.1707069612032226,0],[0.8782496465321047,1.1253052836579518,0],[1.0465973825458321,1.149765276038216,0],[1.0185800517699262,1.1069385484541017,0],[0.9555601300336027,1.326315827602099,0],[1.0465973825458337,1.1497652760382118,0],[1.0185800517699273,1.1069385484540974,0],[1.018580051769927,1.1069385484540974,0],[1.018580051769927,1.1069385484540961,0],[1.046597382545834,1.1497652760382113,0],[1.0185800517699262,1.1069385484541021,0],[1.0465973825458328,1.1497652760382138,0],[0.5230796051808373,0.9504893818869037,0],[0.6170144640882244,1.1772681922407209,0],[0.21568388535245445,1.2106608095016897,0],[0.7083636388085639,1.0065861737135364,0],[0.6005216961323359,1.0512557689626918,0],[0.7667272776171278,1.147488462074617,0],[0.6841886280646119,0.9482225349049728,0],[0.6721831784166643,1.2106608095016895,0],[0.7667272776171281,1.147488462074617,0],[0.5384776310850227,0.887867063769122,0],[0.65,0.865683885352456,0],[0.7083636388085637,1.0065861737135366,0],[0.6005216961323363,1.0512557689626922,0],[0.65,0.8656838853524562,0]],"edges_vertices":[[0,1],[2,3],[4,5],[6,7],[8,9],[10,8],[11,10],[12,11],[13,14],[12,15],[16,17],[9,3],[10,0],[13,17],[18,19],[7,18],[20,21],[4,20],[19,22],[23,6],[16,24],[17,24],[25,15],[15,26],[26,1],[26,0],[0,2],[1,2],[27,28],[6,28],[29,5],[29,30],[15,29],[5,31],[28,18],[20,31],[11,26],[8,2],[32,33],[34,33],[35,36],[19,37],[7,38],[38,39],[18,39],[39,37],[37,35],[35,22],[36,32],[40,34],[41,38],[40,41],[34,32],[41,34],[38,34],[39,34],[37,34],[34,35],[34,36],[21,3],[31,3],[30,31],[30,5],[27,6],[14,25],[25,42],[42,12],[43,41],[43,7],[44,45],[45,46],[47,23],[48,13],[49,50],[50,43],[51,52],[52,16],[44,53],[53,54],[13,25],[17,42],[42,24],[24,12],[24,11],[24,10],[24,8],[24,9],[50,23],[52,48],[54,40],[54,43],[49,23],[49,47],[51,55],[46,24],[46,16],[47,27],[45,52],[33,21],[32,20],[36,4],[22,4],[22,29],[15,19],[28,15],[55,14],[55,48],[51,48],[53,50],[44,49],[44,51],[55,47],[14,27],[1,30]],"edges_assignment":["V","M","M","M","M","V","M","V","V","V","V","B","M","M","V","M","M","V","V","M","V","M","M","M","V","M","M","M","V","M","M","V","M","M","M","V","M","V","V","B","V","M","M","V","M","M","M","M","M","B","M","V","V","V","M","M","V","M","M","B","M","M","V","V","V","M","V","V","V","B","B","V","M","V","V","V","V","B","B","M","M","M","M","M","M","V","B","M","M","B","M","M","M","M","B","M","M","V","B","V","M","M","M","V","M","M","V","M","V","M","M","M","V","V"],"faces_vertices":[[26,0,10,11],[1,0,26],[2,0,1],[10,0,2,8],[30,1,26,15,29],[2,1,30,31,3],[8,2,3,9],[21,3,31,20],[22,4,5,29],[36,4,22,35],[20,4,36,32],[5,4,20,31],[30,5,31],[29,5,30],[23,6,27,47],[7,6,23,50,43],[28,6,7,18],[27,6,28],[38,7,43,41],[18,7,38,39],[10,8,24],[24,8,9],[11,10,24],[12,11,24],[26,11,12,15],[42,12,24],[15,12,42,25],[48,13,17,16,52],[14,13,48,55],[25,13,14],[17,13,25,42],[27,14,55,47],[25,14,27,28,15],[19,15,28,18],[29,15,19,22],[46,16,24],[52,16,46,45],[24,16,17],[24,17,42],[19,18,39,37],[22,19,37,35],[21,20,32,33],[49,23,47],[50,23,49],[34,32,36],[33,32,34],[35,34,36],[37,34,35],[39,34,37],[38,34,39],[41,34,38],[40,34,41],[54,40,41,43],[54,43,50,53],[49,44,53,50],[51,44,49,47,55],[45,44,51,52],[51,48,52],[55,48,51]],"file_spec":1.1,"file_creator":"Rabbit Ear","vertices_edges":[[26,12,25,0],[27,0,24,113],[1,37,26,27],[11,1,60,59],[17,2,101,100],[33,62,30,2],[29,63,19,3],[15,3,68,42],[4,85,5,37],[11,86,4],[5,84,6,12],[6,83,7,36],[7,82,66,9],[79,13,72,8],[64,8,105,112],[32,23,9,22,104,103],[10,20,95,76],[80,21,10,13],[14,34,15,44],[18,103,14,41],[16,35,17,99],[59,16,98],[101,102,18,47],[19,71,91,87],[86,94,20,21,81,82,83,84,85],[22,65,79,64],[24,25,36,23],[28,112,96,63],[104,28,29,34],[30,31,32,102],[61,113,31,62],[60,61,33,35],[38,99,48,52],[98,38,39],[39,52,58,57,56,55,54,53,49],[40,47,46,57],[100,40,58,48],[46,41,45,56],[43,42,50,54],[45,44,43,55],[49,51,89],[50,67,51,53],[66,81,80,65],[68,74,90,67],[77,109,110,69],[97,70,69],[95,94,70],[96,111,92,71],[72,88,107,106],[91,92,109,73],[87,73,108,74],[93,107,75,110],[88,76,97,75],[78,108,77],[89,90,78],[105,106,93,111]],"vertices_vertices":[[2,10,26,1],[2,0,26,30],[3,8,0,1],[9,2,31,21],[20,5,22,36],[31,30,29,4],[28,27,23,7],[18,6,43,38],[9,24,10,2],[3,24,8],[8,24,11,0],[10,24,12,26],[11,24,42,15],[25,17,48,14],[25,13,55,27],[29,26,12,25,28,19],[17,24,46,52],[42,24,16,13],[19,28,7,39],[22,15,18,37],[21,31,4,32],[3,20,33],[4,29,19,35],[6,47,49,50],[9,46,16,17,42,12,11,10,8],[15,42,13,14],[1,0,11,15],[28,14,47,6],[15,27,6,18],[5,30,15,22],[31,1,29,5],[3,30,5,20],[33,20,36,34],[21,32,34],[33,32,36,35,37,39,38,41,40],[36,22,37,34],[4,35,34,32],[35,19,39,34],[39,7,41,34],[37,18,38,34],[34,41,54],[38,43,40,34],[12,24,17,25],[7,50,54,41],[53,49,51,45],[52,46,44],[16,24,45],[27,55,49,23],[13,52,51,55],[23,47,44,50],[23,49,53,43],[55,48,52,44],[48,16,45,51],[54,50,44],[40,43,53],[14,48,51,47]],"edges_foldAngle":[180,-180,-180,-180,-180,180,-180,180,180,180,180,0,-180,-180,180,-180,-180,180,180,-180,180,-180,-180,-180,180,-180,-180,-180,180,-180,-180,180,-180,-180,-180,180,-180,180,180,0,180,-180,-180,180,-180,-180,-180,-180,-180,0,-180,180,180,180,-180,-180,180,-180,-180,0,-180,-180,180,180,180,-180,180,180,180,0,0,180,-180,180,180,180,180,0,0,-180,-180,-180,-180,-180,-180,180,0,-180,-180,0,-180,-180,-180,-180,0,-180,-180,180,0,180,-180,-180,-180,180,-180,-180,180,-180,180,-180,-180,-180,180,180],"faces_edges":[[25,12,6,36],[0,25,24],[26,0,27],[12,26,37,5],[113,24,23,32,31],[27,113,61,60,1],[37,1,11,4],[59,60,35,16],[101,2,30,102],[100,101,47,40],[17,100,48,99],[2,17,35,33],[62,33,61],[30,62,31],[19,63,96,71],[3,19,87,74,68],[29,3,15,34],[63,29,28],[42,68,67,50],[15,42,43,44],[5,85,84],[85,4,86],[6,84,83],[7,83,82],[36,7,9,23],[66,82,81],[9,66,65,22],[72,13,10,76,88],[8,72,106,105],[79,8,64],[13,79,65,80],[112,105,111,96],[64,112,28,104,22],[103,104,34,14],[32,103,18,102],[95,20,94],[76,95,70,97],[20,10,21],[21,80,81],[14,44,45,41],[18,41,46,47],[16,99,38,98],[91,71,92],[87,91,73],[52,48,58],[38,52,39],[57,58,40],[56,57,46],[55,56,45],[54,55,43],[53,54,50],[49,53,51],[89,51,67,90],[90,74,108,78],[109,77,108,73],[110,109,92,111,93],[69,110,75,97],[107,88,75],[106,107,93]],"vertices_faces":[[3,0,1,2],[2,1,4,5],[6,3,2,5],[6,5,7,null],[11,8,9,10],[12,13,8,11],[17,14,15,16],[16,15,18,19],[21,20,3,6],[null,21,6],[20,22,0,3],[22,23,24,0],[23,25,26,24],[30,27,28,29],[29,28,31,32],[4,24,26,32,33,34],[37,35,36,27],[38,37,27,30],[33,16,19,39],[34,33,39,40],[7,11,10,41],[7,41,null],[8,34,40,9],[14,42,43,15],[null,35,37,38,25,23,22,20,21],[26,30,29,32],[1,0,24,4],[32,31,14,17],[32,17,16,33],[13,4,34,8],[5,4,13,12],[5,12,11,7],[41,10,44,45],[41,45,null],[45,44,46,47,48,49,50,51,null],[9,40,47,46],[9,46,44,10],[40,39,48,47],[19,18,50,49],[39,19,49,48],[51,52,null],[18,52,51,50],[25,38,30,26],[15,53,52,18],[54,55,56,null],[36,null,56],[35,null,36],[31,55,42,14],[27,57,58,28],[42,55,54,43],[43,54,53,15],[58,57,56,55],[27,36,56,57],[53,54,null],[52,53,null],[28,58,55,31]],"edges_faces":[[1,2],[5,6],[8,11],[15,16],[6,21],[3,20],[0,22],[23,24],[28,29],[24,26],[27,37],[6],[0,3],[27,30],[33,39],[16,19],[7,41],[10,11],[34,40],[14,15],[35,37],[37,38],[26,32],[4,24],[1,4],[0,1],[2,3],[2,5],[17,32],[16,17],[8,13],[4,13],[4,34],[11,12],[16,33],[7,11],[0,24],[3,6],[41,45],[45],[9,46],[39,40],[18,19],[19,49],[19,39],[39,48],[40,47],[9,40],[10,44],[51],[18,50],[51,52],[44,45],[50,51],[49,50],[48,49],[47,48],[46,47],[44,46],[7],[5,7],[5,12],[12,13],[14,17],[29,32],[26,30],[25,26],[18,52],[15,18],[56],[36],[14,42],[27,28],[43,54],[15,53],[56,57],[27,36],[54],[53],[29,30],[30,38],[25,38],[23,25],[22,23],[20,22],[20,21],[21],[15,43],[27,57],[52],[52,53],[42,43],[42,55],[55,58],[35],[35,36],[14,31],[36,56],[41],[10,41],[9,10],[8,9],[8,34],[33,34],[32,33],[28,31],[28,58],[57,58],[53,54],[54,55],[55,56],[31,55],[31,32],[4,5]],"faces_faces":[[1,3,22,24],[0,2,4],[1,3,5],[0,2,6,20],[1,5,24,34,13],[2,4,12,7,6],[3,5,21],[5,11,41],[9,11,13,34],[8,10,40,46],[9,11,44,41],[7,8,10,12],[5,11,13],[4,8,12],[15,17,31,42],[14,16,43,53,18],[15,17,19,33],[14,16,32],[15,19,52,50],[16,18,49,39],[3,21,22],[6,20],[0,20,23],[22,24,25],[0,4,23,26],[23,26,38],[24,25,30,32],[28,30,37,36,57],[27,29,58,31],[28,30,32],[26,27,29,38],[14,28,32,55],[17,26,29,31,33],[16,32,34,39],[4,8,33,40],[36,37],[27,35,56],[27,35,38],[25,30,37],[19,33,48,40],[9,34,39,47],[7,10,45],[14,43,55],[15,42,54],[10,45,46],[41,44],[9,44,47],[40,46,48],[39,47,49],[19,48,50],[18,49,51],[50,52],[18,51,53],[15,52,54],[43,53,55],[31,42,54,56,58],[36,55,57],[27,56,58],[28,55,57]],"faces_layer":[53,52,51,50,47,48,49,54,58,37,38,55,56,57,14,15,12,13,27,28,42,43,41,44,46,20,19,7,6,5,4,17,18,24,45,21,8,22,23,25,40,39,11,10,35,34,36,33,32,29,30,31,26,16,9,0,1,2,3],"faceOrders":[[1,2,1],[5,6,-1],[8,11,1],[15,16,1],[6,21,1],[3,20,1],[0,22,1],[23,24,-1],[28,29,1],[24,26,1],[27,37,-1],[0,3,1],[27,30,1],[33,39,-1],[16,19,-1],[7,41,1],[10,11,-1],[34,40,1],[14,15,-1],[35,37,-1],[37,38,-1],[26,32,1],[4,24,1],[1,4,1],[0,1,1],[2,3,1],[2,5,1],[17,32,-1],[16,17,-1],[8,13,1],[4,13,-1],[4,34,1],[11,12,-1],[16,33,-1],[7,11,-1],[0,24,1],[3,6,1],[41,45,1],[9,46,1],[39,40,-1],[18,19,-1],[19,49,-1],[19,39,1],[39,48,-1],[40,47,1],[9,40,-1],[10,44,1],[18,50,-1],[51,52,1],[44,45,1],[50,51,-1],[49,50,-1],[48,49,1],[47,48,1],[46,47,1],[44,46,-1],[5,7,-1],[5,12,-1],[12,13,-1],[14,17,1],[29,32,-1],[26,30,1],[25,26,1],[18,52,1],[15,18,-1],[14,42,1],[27,28,1],[43,54,1],[15,53,-1],[56,57,-1],[27,36,-1],[29,30,1],[30,38,-1],[25,38,-1],[23,25,1],[22,23,-1],[20,22,1],[20,21,-1],[15,43,1],[27,57,1],[52,53,1],[42,43,1],[42,55,1],[55,58,-1],[35,36,1],[14,31,-1],[36,56,1],[10,41,-1],[9,10,-1],[8,9,1],[8,34,1],[33,34,-1],[32,33,-1],[28,31,-1],[28,58,1],[57,58,-1],[53,54,1],[54,55,1],[55,56,-1],[31,55,1],[31,32,-1],[4,5,-1],[8,33,1],[16,34,-1],[3,21,1],[0,20,1],[0,23,1],[24,25,1],[0,26,1],[24,30,1],[30,37,-1],[27,35,-1],[16,39,-1],[34,39,1],[15,19,-1],[7,10,1],[8,10,1],[8,40,1],[35,38,-1],[4,32,1],[2,4,1],[0,4,1],[4,29,1],[3,5,1],[13,17,1],[16,32,-1],[14,32,-1],[8,17,1],[5,13,-1],[4,8,-1],[32,34,-1],[16,53,-1],[8,16,1],[5,11,-1],[7,8,-1],[0,6,1],[0,30,1],[10,45,1],[40,46,1],[10,46,1],[39,49,-1],[18,49,-1],[19,52,1],[40,48,1],[9,41,-1],[18,51,-1],[45,46,-1],[49,51,-1],[47,49,1],[46,49,1],[46,48,1],[26,29,1],[28,32,-1],[30,36,-1],[25,30,1],[15,52,-1],[15,42,1],[31,42,1],[42,54,1],[14,53,-1],[55,57,-1],[28,36,-1],[30,35,-1],[21,22,1],[43,53,-1],[36,57,1],[28,57,1],[27,55,1],[36,58,1],[36,55,1],[31,58,1],[53,55,1],[5,31,1],[0,2,1],[1,3,1],[1,5,1],[5,21,1],[4,11,-1],[15,32,-1],[4,28,1],[26,28,1],[27,29,1],[28,30,1],[29,31,-1],[29,36,-1],[4,26,1],[24,32,1],[37,55,1],[3,4,1],[15,31,-1],[35,55,1],[27,38,-1],[38,55,1],[25,32,1],[2,24,1],[3,24,1],[5,24,1],[4,23,1],[4,25,1],[1,23,1],[1,25,1],[1,20,1],[1,22,1],[1,24,1],[0,25,1],[1,26,1],[2,6,1],[2,20,1],[2,21,1],[5,20,1],[14,16,1],[15,17,1],[17,19,-1],[17,33,-1],[17,34,-1],[17,39,-1],[17,53,-1],[9,13,-1],[10,13,-1],[13,33,1],[13,34,1],[13,40,1],[4,9,1],[4,10,1],[4,40,1],[5,34,1],[9,34,-1],[10,34,-1],[11,34,1],[4,39,1],[4,12,-1],[7,12,-1],[10,12,-1],[12,34,1],[19,33,1],[11,41,1],[20,24,-1],[22,24,-1],[6,20,1],[8,39,1],[16,40,-1],[17,40,-1],[33,40,-1],[16,18,-1],[17,18,-1],[18,33,1],[19,48,-1],[9,47,1],[9,48,1],[5,10,1],[5,41,1],[12,41,1],[7,13,-1],[8,12,1],[9,12,-1],[11,13,-1],[12,33,1],[13,41,1],[8,14,1],[14,18,-1],[14,19,-1],[17,31,-1],[14,33,-1],[14,34,-1],[14,39,-1],[25,29,1],[26,35,-1],[26,37,-1],[26,38,-1],[49,52,1],[50,52,1],[18,42,1],[19,42,1],[32,42,1],[33,42,1],[34,42,1],[39,42,1],[4,27,1],[27,31,-1],[27,32,-1],[28,55,1],[18,53,1],[19,53,1],[42,53,-1],[15,54,1],[15,55,1],[36,37,-1],[36,38,-1],[27,56,1],[4,30,1],[24,29,1],[30,32,-1],[29,35,-1],[29,37,-1],[29,38,-1],[30,55,1],[25,55,1],[23,26,1],[23,29,1],[23,30,1],[23,32,1],[23,55,1],[22,55,1],[2,22,1],[3,22,1],[5,22,1],[6,22,1],[20,55,1],[21,55,1],[18,43,1],[19,43,1],[32,43,1],[43,52,-1],[4,57,1],[32,57,1],[35,57,1],[37,57,1],[38,57,1],[52,54,1],[52,55,1],[14,43,1],[31,43,1],[33,43,1],[34,43,1],[39,43,1],[42,52,-1],[43,55,1],[18,55,1],[19,55,1],[39,55,1],[20,58,1],[21,58,1],[22,58,1],[23,58,1],[25,58,1],[35,58,1],[37,58,1],[38,58,1],[35,56,1],[18,31,1],[19,31,1],[31,39,-1],[14,55,1],[37,56,1],[38,56,1],[41,44,1],[41,46,1],[5,9,1],[7,9,1],[8,42,1],[8,43,1],[4,33,1],[12,32,1],[18,32,1],[19,32,1],[32,39,-1],[31,57,1],[4,58,1],[20,28,1],[21,28,1],[22,28,1],[23,28,1],[25,28,1],[26,58,1],[32,58,1],[28,35,-1],[28,37,-1],[28,38,-1],[20,57,1],[21,57,1],[22,57,1],[23,57,1],[25,57,1],[27,58,1],[56,58,-1],[18,54,1],[19,54,1],[5,55,1],[20,31,1],[21,31,1],[22,31,1],[23,31,1],[25,31,1],[32,55,1],[31,35,-1],[31,37,-1],[31,38,-1],[31,52,-1],[16,31,-1],[20,32,1],[21,32,1],[22,32,1],[26,31,1],[30,31,-1],[31,33,-1],[31,34,-1],[32,35,-1],[32,37,-1],[32,38,-1],[32,52,-1],[4,6,-1],[4,7,-1],[5,8,-1],[4,20,1],[4,21,1],[4,22,1],[5,23,1],[5,25,1],[5,26,1],[5,27,1],[5,30,1],[5,33,1],[5,39,1],[5,40,1],[4,41,1],[4,55,1],[0,32,1],[0,57,1],[0,56,1],[1,32,1],[1,31,1],[1,55,1],[2,23,1],[2,26,1],[3,28,1],[3,31,1],[3,32,1],[3,57,1],[3,58,1],[3,55,1],[3,56,1],[5,28,1],[5,29,1],[5,57,1],[5,58,1],[4,31,1],[4,56,1],[6,26,1],[6,27,1],[6,28,1],[6,29,1],[6,30,1],[6,31,1],[6,55,1],[6,57,1],[6,58,1],[7,31,1],[7,33,1],[7,34,1],[7,55,1],[5,56,1],[6,32,1],[6,56,1],[8,41,1],[8,32,1],[8,55,1],[8,54,1],[10,47,1],[10,48,1],[9,49,1],[10,49,1],[12,31,1],[13,32,1],[14,52,-1],[14,54,1],[16,52,-1],[15,33,-1],[17,52,-1],[18,48,-1],[18,47,-1],[19,47,-1],[21,29,1],[21,30,1],[24,57,1],[24,56,1],[26,27,1],[26,55,1],[26,57,1],[26,56,1],[28,56,1],[29,55,1],[31,54,1],[31,56,1],[32,40,-1],[33,55,1],[32,54,1],[32,56,1],[34,55,1],[33,54,1],[34,54,1],[39,50,-1],[39,51,-1],[40,44,1],[40,49,1],[41,47,1],[48,52,1],[11,33,1],[15,34,-1],[0,21,1],[20,23,-1],[3,26,1],[24,27,1],[25,37,-1],[15,39,-1],[7,40,1],[10,40,-1],[9,11,-1],[25,35,-1],[1,6,1],[1,29,1],[1,30,1],[1,27,1],[1,28,1],[0,29,1],[2,28,1],[0,5,1],[2,29,1],[2,30,1],[2,27,1],[2,31,1],[4,17,1],[12,17,1],[32,53,1],[13,16,1],[4,16,1],[13,14,1],[11,16,1],[12,16,1],[33,53,1],[11,14,1],[6,24,1],[3,29,1],[3,30,1],[3,27,1],[9,45,1],[19,46,-1],[39,46,-1],[9,44,1],[19,40,-1],[10,19,1],[19,50,-1],[19,51,-1],[39,47,-1],[10,39,1],[44,47,1],[18,40,-1],[40,41,1],[45,47,1],[44,48,1],[12,14,1],[32,36,1],[26,36,1],[25,36,1],[31,53,1],[31,36,1],[21,23,-1],[8,31,1],[5,32,1],[2,25,1],[2,32,1],[2,55,1],[6,23,1],[6,25,1],[11,32,1],[21,56,1],[20,56,1],[0,55,1],[22,56,1],[24,55,1],[23,56,1],[20,29,1],[22,29,1],[24,28,1],[29,56,1],[0,31,1],[39,54,1],[16,54,1],[16,55,1],[41,55,1],[40,54,1],[40,55,1],[20,26,1],[21,26,1],[22,26,1],[21,24,-1],[1,56,1],[1,57,1],[1,58,1],[3,23,1],[2,56,1],[2,57,1],[2,58,1],[17,42,1],[17,43,1],[17,54,1],[17,55,1],[13,39,1],[13,42,1],[13,43,1],[13,54,1],[13,55,1],[34,41,1],[11,31,1],[16,42,1],[16,43,1],[33,52,-1],[11,55,1],[14,40,-1],[31,40,-1],[40,42,1],[40,43,1],[10,50,1],[41,48,1],[7,39,1],[12,39,1],[12,55,1],[13,31,1],[29,57,1],[29,58,1],[30,56,1],[30,57,1],[25,56,1],[47,52,1],[20,27,1],[21,27,1],[22,27,1],[23,27,1],[25,27,1],[3,36,1],[4,36,1],[5,36,1],[6,36,1],[24,36,1],[41,49,1],[9,54,1],[9,55,1],[7,32,1],[34,53,1],[0,27,1],[0,36,1],[1,36,1],[2,36,1],[3,25,1],[4,19,1],[11,19,1],[11,39,1],[12,19,1],[4,52,1],[5,54,1],[5,19,1],[11,54,1],[13,19,1],[5,15,1],[5,18,1],[5,43,1],[5,53,1],[5,52,1],[7,54,1],[7,19,1],[12,54,1],[7,15,1],[7,43,1],[7,52,1],[7,53,1],[8,19,1],[8,15,1],[8,18,1],[8,53,1],[8,52,1],[9,18,1],[9,53,1],[9,19,1],[9,52,1],[9,31,1],[9,32,1],[34,52,1],[9,39,1],[41,52,1],[41,53,1],[41,54,1],[9,42,1],[9,43,1],[10,14,1],[10,43,1],[10,54,1],[10,55,1],[10,15,1],[10,42,1],[10,16,1],[10,17,1],[10,18,1],[10,53,1],[10,31,1],[10,32,1],[10,33,1],[19,34,-1],[10,52,1],[11,15,1],[11,43,1],[11,52,1],[11,53,1],[12,15,1],[12,43,1],[12,52,1],[12,53,1],[13,52,1],[14,41,-1],[15,40,-1],[15,41,-1],[16,41,-1],[17,41,-1],[40,53,1],[18,41,-1],[18,44,-1],[18,46,-1],[40,52,1],[19,41,-1],[19,44,-1],[44,52,1],[46,52,1],[20,30,1],[20,36,1],[21,36,1],[22,30,1],[22,36,1],[23,36,1],[39,53,1],[31,41,-1],[32,41,-1],[39,41,-1],[41,42,1],[41,43,1],[44,49,1],[45,49,1],[21,25,1],[20,25,1],[22,25,1],[33,41,-1],[18,39,1],[39,52,-1],[9,33,1],[7,16,1],[9,16,1],[7,18,1],[11,40,1],[11,18,1],[18,34,-1],[11,17,1],[5,17,1],[4,14,1],[5,16,1],[7,14,1],[0,28,1],[19,45,-1],[40,45,1],[39,44,-1],[44,50,1],[45,48,1],[46,50,1],[5,14,1],[9,15,1],[4,15,1],[9,17,1],[13,15,1],[13,18,1],[13,53,1],[4,42,1],[4,43,1],[4,54,1],[41,50,1],[12,18,1],[9,14,1],[24,58,1],[30,58,1],[4,18,1],[4,53,1],[9,50,1],[40,50,1],[7,17,1],[24,31,1],[39,45,-1],[48,50,1],[48,51,1],[47,50,1],[45,50,1],[45,51,1],[18,45,-1],[41,51,1],[44,51,1],[9,51,1],[10,51,1],[40,51,1],[46,51,1],[47,51,1],[45,52,1],[22,35,1],[1,35,1],[24,35,1],[23,35,1],[2,35,1],[4,35,1],[3,35,1],[5,35,1],[6,35,1],[20,35,1],[21,35,1],[0,35,1],[22,37,1],[0,38,1],[1,37,1],[24,37,1],[22,38,1],[23,37,1],[20,38,1],[2,37,1],[1,38,1],[24,38,1],[4,37,1],[3,37,1],[5,37,1],[6,37,1],[21,37,1],[20,37,1],[3,38,1],[23,38,1],[21,38,1],[2,38,1],[4,38,1],[5,38,1],[6,38,1],[0,37,1]]}',Yu=`{
    "file_spec": 1.1,
    "file_creator": "Origami Simulator: http://git.amandaghassaei.com/OrigamiSimulator/",
    "file_author": "",
    "file_classes": [
        "singleModel"
    ],
    "frame_title": "flappingBird : 71PercentFolded",
    "frame_classes": [
        "foldedForm"
    ],
    "frame_attributes": [
        "3D"
    ],
    "frame_unit": "unit",
    "vertices_coords": [
        [
            -0.4093667268753052,
            0.06974729150533676,
            -0.4096444845199585
        ],
        [
            0.2590161859989166,
            0.4270831346511841,
            -0.4809735417366028
        ],
        [
            0.17815256118774414,
            0.4600082039833069,
            0.17788761854171753
        ],
        [
            -0.48071950674057007,
            0.4271260201931,
            0.2587040960788727
        ],
        [
            -0.3564891219139099,
            -0.16049030423164368,
            -0.1885109543800354
        ],
        [
            0.21816769242286682,
            -0.08650567382574081,
            0.06294576078653336
        ],
        [
            -0.18824343383312225,
            -0.16049933433532715,
            -0.3567436635494232
        ],
        [
            0.06317263841629028,
            -0.08649707585573196,
            0.2179289609193802
        ],
        [
            -0.1876789927482605,
            -0.26248741149902344,
            -0.3138970732688904
        ],
        [
            0.0632646381855011,
            -0.1949400156736374,
            -0.21034550666809082
        ],
        [
            -0.3136483430862427,
            -0.2624810039997101,
            -0.18793758749961853
        ],
        [
            -0.2101149559020996,
            -0.19492635130882263,
            0.0630112886428833
        ],
        [
            0.1836349070072174,
            -0.18685635924339294,
            0.09321778267621994
        ],
        [
            0.006164848804473877,
            -0.17239761352539062,
            -0.1261327862739563
        ],
        [
            0.09344123303890228,
            -0.18685108423233032,
            0.18340468406677246
        ],
        [
            -0.1258944422006607,
            -0.17239052057266235,
            0.005916714668273926
        ],
        [
            -0.041722506284713745,
            -0.15707767009735107,
            -0.04196539521217346
        ],
        [
            -0.08575446158647537,
            -0.17879639565944672,
            -0.08600035309791565
        ],
        [
            -0.2843070924282074,
            0.19883164763450623,
            -0.2845846116542816
        ],
        [
            -0.35354551672935486,
            0.202396959066391,
            -0.3321586847305298
        ],
        [
            -0.331875741481781,
            0.2023952305316925,
            -0.35382670164108276
        ],
        [
            -0.2771785259246826,
            0.18015305697917938,
            -0.2792651951313019
        ],
        [
            -0.27898913621902466,
            0.18015246093273163,
            -0.27745455503463745
        ],
        [
            -0.08948487788438797,
            0.11766953766345978,
            -0.08974724262952805
        ]
    ],
    "edges_vertices": [
        [
            22,
            0
        ],
        [
            9,
            22
        ],
        [
            9,
            1
        ],
        [
            13,
            1
        ],
        [
            13,
            2
        ],
        [
            15,
            2
        ],
        [
            15,
            3
        ],
        [
            11,
            21
        ],
        [
            11,
            3
        ],
        [
            21,
            0
        ],
        [
            23,
            4
        ],
        [
            23,
            5
        ],
        [
            23,
            6
        ],
        [
            23,
            7
        ],
        [
            20,
            0
        ],
        [
            8,
            20
        ],
        [
            8,
            6
        ],
        [
            1,
            6
        ],
        [
            1,
            5
        ],
        [
            12,
            2
        ],
        [
            12,
            5
        ],
        [
            14,
            2
        ],
        [
            14,
            7
        ],
        [
            3,
            7
        ],
        [
            3,
            4
        ],
        [
            19,
            0
        ],
        [
            10,
            19
        ],
        [
            10,
            4
        ],
        [
            8,
            9
        ],
        [
            10,
            11
        ],
        [
            12,
            13
        ],
        [
            14,
            15
        ],
        [
            16,
            2
        ],
        [
            17,
            18
        ],
        [
            19,
            18
        ],
        [
            20,
            18
        ],
        [
            6,
            5
        ],
        [
            4,
            7
        ],
        [
            10,
            17
        ],
        [
            8,
            17
        ],
        [
            14,
            16
        ],
        [
            12,
            16
        ],
        [
            23,
            17
        ],
        [
            23,
            16
        ],
        [
            21,
            19
        ],
        [
            22,
            20
        ],
        [
            0,
            18
        ]
    ],
    "edges_assignment": [
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V"
    ],
    "faces_vertices": [
        [
            22,
            0,
            20
        ],
        [
            20,
            0,
            18
        ],
        [
            18,
            0,
            19
        ],
        [
            19,
            0,
            21
        ],
        [
            12,
            13,
            1,
            5
        ],
        [
            5,
            1,
            6
        ],
        [
            8,
            6,
            1,
            9
        ],
        [
            15,
            2,
            14
        ],
        [
            14,
            2,
            16
        ],
        [
            16,
            2,
            12
        ],
        [
            12,
            2,
            13
        ],
        [
            10,
            11,
            3,
            4
        ],
        [
            4,
            3,
            7
        ],
        [
            14,
            7,
            3,
            15
        ],
        [
            17,
            10,
            4,
            23
        ],
        [
            23,
            4,
            7
        ],
        [
            23,
            5,
            6
        ],
        [
            16,
            12,
            5,
            23
        ],
        [
            17,
            23,
            6,
            8
        ],
        [
            16,
            23,
            7,
            14
        ],
        [
            18,
            17,
            8,
            20
        ],
        [
            22,
            20,
            8,
            9
        ],
        [
            21,
            11,
            10,
            19
        ],
        [
            18,
            19,
            10,
            17
        ]
    ],
    "edges_foldAngle": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180
    ]
}`,Xu=`{
    "file_spec": 1.1,
    "file_creator": "Origami Simulator: http://git.amandaghassaei.com/OrigamiSimulator/",
    "file_author": "",
    "file_classes": [
        "singleModel"
    ],
    "frame_title": "MoosersTrainRigid-Gardner : 96PercentFolded",
    "frame_classes": [
        "foldedForm"
    ],
    "frame_attributes": [
        "3D"
    ],
    "frame_unit": "unit",
    "vertices_coords": [
        [
            -0.00004112720489501953,
            -0.034518927335739136,
            0.3875337839126587
        ],
        [
            -0.05947384238243103,
            0.05186906456947327,
            -0.49484485387802124
        ],
        [
            0.0016869306564331055,
            -0.03458531200885773,
            0.38764357566833496
        ],
        [
            0.060286447405815125,
            0.049275822937488556,
            -0.49495500326156616
        ],
        [
            -0.02950318157672882,
            -0.05408007651567459,
            0.4095265865325928
        ],
        [
            -0.029455438256263733,
            -0.034139856696128845,
            0.35502898693084717
        ],
        [
            0.030867189168930054,
            -0.05493051931262016,
            0.4092543125152588
        ],
        [
            0.030648335814476013,
            -0.03498354181647301,
            0.3547499179840088
        ],
        [
            -0.029550492763519287,
            -0.03453413397073746,
            0.3870289921760559
        ],
        [
            0.0001405775547027588,
            -0.035260818898677826,
            0.3855299949645996
        ],
        [
            0.031154796481132507,
            -0.0353446900844574,
            0.3867889642715454
        ],
        [
            0.001433044672012329,
            -0.035375166684389114,
            0.38560014963150024
        ],
        [
            -0.02962145209312439,
            -0.03457611799240112,
            0.38495564460754395
        ],
        [
            0.03116583824157715,
            -0.035419318825006485,
            0.3846795856952667
        ],
        [
            0.00019975006580352783,
            -0.03484566882252693,
            0.3845970332622528
        ],
        [
            -0.05933638662099838,
            -0.033608779311180115,
            0.38287243247032166
        ],
        [
            0.0012960284948349,
            -0.03479484096169472,
            0.38467130064964294
        ],
        [
            0.0607023686170578,
            -0.035585056990385056,
            0.38226932287216187
        ],
        [
            -0.02808459848165512,
            0.053890667855739594,
            0.39910733699798584
        ],
        [
            -0.028889402747154236,
            -0.004449931904673576,
            0.3864036202430725
        ],
        [
            0.032085712999105453,
            0.05308397486805916,
            0.39888307452201843
        ],
        [
            0.03158583864569664,
            -0.00519481161609292,
            0.38598963618278503
        ],
        [
            -0.0403376966714859,
            0.009020560421049595,
            0.38554057478904724
        ],
        [
            0.04356127977371216,
            0.006965279579162598,
            0.38516050577163696
        ],
        [
            -0.02726864442229271,
            0.11278398334980011,
            0.41102516651153564
        ],
        [
            -0.028122927993535995,
            0.020394010469317436,
            0.38826417922973633
        ],
        [
            0.03245997428894043,
            0.11208402365446091,
            0.4106975793838501
        ],
        [
            0.0317741334438324,
            0.019626282155513763,
            0.3881864845752716
        ],
        [
            0.0024386837612837553,
            0.049642179161310196,
            0.38949820399284363
        ],
        [
            -0.059414565563201904,
            -0.03886086493730545,
            0.3839656710624695
        ],
        [
            0.0003405362367630005,
            -0.038699980825185776,
            0.3842966556549072
        ],
        [
            0.060844480991363525,
            -0.040688131004571915,
            0.3832562565803528
        ],
        [
            0.0011267364025115967,
            -0.03874233365058899,
            0.3843998908996582
        ],
        [
            -0.029542848467826843,
            -0.037075355648994446,
            0.3848586082458496
        ],
        [
            0.03104454278945923,
            -0.03792952746152878,
            0.38457536697387695
        ],
        [
            -0.05928856134414673,
            -0.032988399267196655,
            0.3246278762817383
        ],
        [
            0.0004572868347167969,
            -0.03350771963596344,
            0.3248649835586548
        ],
        [
            0.0600866824388504,
            -0.03482324630022049,
            0.32394373416900635
        ],
        [
            0.00037279725074768066,
            -0.033420976251363754,
            0.32496440410614014
        ],
        [
            0.0013524629175662994,
            0.007716089021414518,
            0.3875575363636017
        ],
        [
            -0.028338665142655373,
            0.008344408124685287,
            0.3875298798084259
        ],
        [
            0.00195462629199028,
            0.007144742179661989,
            0.38742417097091675
        ],
        [
            0.03182506933808327,
            0.007606023922562599,
            0.3871331214904785
        ],
        [
            -0.05918732285499573,
            -0.03321195766329765,
            0.3236471116542816
        ],
        [
            0.059970125555992126,
            -0.035098373889923096,
            0.32304513454437256
        ],
        [
            0.00016414374113082886,
            -0.03454964607954025,
            0.38161489367485046
        ],
        [
            0.0010836496949195862,
            -0.03424724191427231,
            0.38164040446281433
        ],
        [
            -0.05940219759941101,
            -0.03280269354581833,
            0.32295820116996765
        ],
        [
            0.0003168433904647827,
            -0.03311435133218765,
            0.3227279782295227
        ],
        [
            0.0602351576089859,
            -0.034567758440971375,
            0.32230642437934875
        ],
        [
            0.0005774497985839844,
            -0.032610878348350525,
            0.3227369785308838
        ],
        [
            0.002928361762315035,
            0.14186042547225952,
            0.41599398851394653
        ],
        [
            0.002116456627845764,
            0.0831000879406929,
            0.40444111824035645
        ],
        [
            0.002388015389442444,
            0.08284230530261993,
            0.4044439196586609
        ],
        [
            0.0012877732515335083,
            0.02410677820444107,
            0.3930153250694275
        ],
        [
            0.002130649983882904,
            0.02418176457285881,
            0.3930918872356415
        ],
        [
            -0.0203462615609169,
            -0.01300920732319355,
            0.38420093059539795
        ],
        [
            -0.011221468448638916,
            -0.0047849672846496105,
            0.3848933279514313
        ],
        [
            0.022595785558223724,
            -0.013793068937957287,
            0.3840429484844208
        ],
        [
            0.013774894177913666,
            -0.004877221770584583,
            0.3849755525588989
        ],
        [
            0.000027418136596679688,
            -0.07346606999635696,
            0.43269872665405273
        ],
        [
            0.0011035948991775513,
            -0.07353842258453369,
            0.4327924847602844
        ],
        [
            -0.01906922273337841,
            0.029183756560087204,
            0.3882702887058258
        ],
        [
            -0.010387053713202477,
            0.02025357447564602,
            0.38695937395095825
        ],
        [
            0.023108523339033127,
            0.02833615057170391,
            0.38835883140563965
        ],
        [
            0.014155354350805283,
            0.02005111053586006,
            0.3869223892688751
        ],
        [
            -0.0146569162607193,
            -0.0360649898648262,
            0.3393290936946869
        ],
        [
            -0.04448637366294861,
            -0.03584390506148338,
            0.33849215507507324
        ],
        [
            0.015569806098937988,
            -0.036525528877973557,
            0.3392275273799896
        ],
        [
            0.04536862671375275,
            -0.03728530928492546,
            0.3380400836467743
        ],
        [
            -0.04447397589683533,
            -0.0332484133541584,
            0.3086744248867035
        ],
        [
            -0.014717966318130493,
            -0.033190395683050156,
            0.3079909384250641
        ],
        [
            0.04509828984737396,
            -0.03440099209547043,
            0.3082495927810669
        ],
        [
            0.015370070934295654,
            -0.033322229981422424,
            0.3078692853450775
        ],
        [
            -0.044656574726104736,
            -0.06551846861839294,
            0.3358440697193146
        ],
        [
            0.04452359676361084,
            -0.06692273169755936,
            0.3351317048072815
        ],
        [
            -0.04459506273269653,
            -0.06289710849523544,
            0.30614519119262695
        ],
        [
            0.04417404532432556,
            -0.06403015553951263,
            0.305456280708313
        ],
        [
            -0.06057215481996536,
            -0.017427217215299606,
            0.20393842458724976
        ],
        [
            0.06082380563020706,
            -0.019559746608138084,
            0.20333343744277954
        ],
        [
            -0.001073405146598816,
            -0.019483396783471107,
            0.20144370198249817
        ],
        [
            0.001296311616897583,
            -0.018927915021777153,
            0.20150774717330933
        ],
        [
            -0.06074567139148712,
            -0.01763683371245861,
            0.20218369364738464
        ],
        [
            -0.0619485080242157,
            -0.015936752781271935,
            0.14240378141403198
        ],
        [
            0.06099361181259155,
            -0.01982475072145462,
            0.20159021019935608
        ],
        [
            0.061565667390823364,
            -0.018406519666314125,
            0.14187535643577576
        ],
        [
            -0.0602354034781456,
            -0.018057366833090782,
            0.2017887979745865
        ],
        [
            -0.061392270028591156,
            -0.01563621126115322,
            0.1421472132205963
        ],
        [
            0.060421332716941833,
            -0.019940746948122978,
            0.20135989785194397
        ],
        [
            0.06107112020254135,
            -0.018170621246099472,
            0.14170271158218384
        ],
        [
            -0.057140327990055084,
            0.04151457920670509,
            0.2039201706647873
        ],
        [
            0.060021381825208664,
            0.039799682796001434,
            0.20301581919193268
        ],
        [
            -0.04133571684360504,
            0.024518731981515884,
            0.20822158455848694
        ],
        [
            0.04372166842222214,
            0.02313465066254139,
            0.20779743790626526
        ],
        [
            -0.05799960717558861,
            0.04242846369743347,
            0.2065623700618744
        ],
        [
            -0.056501951068639755,
            0.10192733258008957,
            0.20567288994789124
        ],
        [
            0.0611981637775898,
            0.04007653892040253,
            0.20649060606956482
        ],
        [
            0.06230771914124489,
            0.099575474858284,
            0.20422831177711487
        ],
        [
            -0.05956866964697838,
            -0.015997884795069695,
            0.14210480451583862
        ],
        [
            0.05926291272044182,
            -0.018451189622282982,
            0.14212948083877563
        ],
        [
            0.0020707384683191776,
            0.06585086137056351,
            0.2115127444267273
        ],
        [
            -0.05998711287975311,
            -0.027134601026773453,
            0.26363831758499146
        ],
        [
            -0.0002774149179458618,
            -0.027759619057178497,
            0.2628783583641052
        ],
        [
            0.060429930686950684,
            -0.029106782749295235,
            0.26297444105148315
        ],
        [
            0.0007184743881225586,
            -0.02727367728948593,
            0.26288437843322754
        ],
        [
            -0.05976969003677368,
            -0.027598872780799866,
            0.2626672089099884
        ],
        [
            0.06024186313152313,
            -0.029464498162269592,
            0.26211199164390564
        ],
        [
            -0.0008766278624534607,
            -0.019177604466676712,
            0.2038702368736267
        ],
        [
            0.0010440871119499207,
            -0.018495185300707817,
            0.2037997841835022
        ],
        [
            -0.05981422960758209,
            -0.026904599741101265,
            0.261907160282135
        ],
        [
            -0.00012195110321044922,
            -0.028431419283151627,
            0.26064467430114746
        ],
        [
            0.06031091511249542,
            -0.02873954363167286,
            0.2613530158996582
        ],
        [
            0.0005986690521240234,
            -0.027606481686234474,
            0.2607721984386444
        ],
        [
            -0.06109389662742615,
            -0.022816427052021027,
            0.2024872601032257
        ],
        [
            -0.0013892203569412231,
            -0.02423962391912937,
            0.2009229063987732
        ],
        [
            0.06107613444328308,
            -0.02496763877570629,
            0.2019142508506775
        ],
        [
            0.0013475269079208374,
            -0.023727504536509514,
            0.20105034112930298
        ],
        [
            -0.060889795422554016,
            -0.02344910427927971,
            0.20154321193695068
        ],
        [
            -0.0572565458714962,
            0.10317930579185486,
            0.14619198441505432
        ],
        [
            0.06086023151874542,
            -0.025491727516055107,
            0.20106783509254456
        ],
        [
            0.062037479132413864,
            0.10085921734571457,
            0.14467409253120422
        ],
        [
            -0.06101544201374054,
            -0.02282083034515381,
            0.200657457113266
        ],
        [
            -0.001272156834602356,
            -0.025461729615926743,
            0.2000565230846405
        ],
        [
            0.06099461019039154,
            -0.024838769808411598,
            0.2002059370279312
        ],
        [
            0.0011881887912750244,
            -0.024725183844566345,
            0.2002744823694229
        ],
        [
            0.001150369644165039,
            0.04023848474025726,
            0.20367097854614258
        ],
        [
            0.001893267035484314,
            0.040831197053194046,
            0.2033340334892273
        ],
        [
            -0.023184195160865784,
            0.04138343408703804,
            0.20726940035820007
        ],
        [
            0.02639181539416313,
            0.041086431592702866,
            0.20701000094413757
        ],
        [
            -0.016574986279010773,
            0.02385156787931919,
            0.2081134021282196
        ],
        [
            -0.04107103496789932,
            0.024562735110521317,
            0.2073834240436554
        ],
        [
            0.01855458877980709,
            0.023528799414634705,
            0.20786195993423462
        ],
        [
            0.04303164780139923,
            0.022761443629860878,
            0.20681625604629517
        ],
        [
            -0.015083611011505127,
            -0.030527526512742043,
            0.2775331437587738
        ],
        [
            -0.04486986994743347,
            -0.030205529183149338,
            0.27724021673202515
        ],
        [
            0.01561117172241211,
            -0.030556723475456238,
            0.2774249315261841
        ],
        [
            0.04539094865322113,
            -0.03156811743974686,
            0.27683037519454956
        ],
        [
            -0.04524751007556915,
            -0.027684519067406654,
            0.24742639064788818
        ],
        [
            -0.015430659055709839,
            -0.02817770466208458,
            0.24618855118751526
        ],
        [
            0.04556091129779816,
            -0.028853226453065872,
            0.2470337450504303
        ],
        [
            0.01573804020881653,
            -0.02804316207766533,
            0.24613940715789795
        ],
        [
            -0.04529677331447601,
            -0.05986805632710457,
            0.27465808391571045
        ],
        [
            0.044476062059402466,
            -0.061184968799352646,
            0.274055153131485
        ],
        [
            -0.045849695801734924,
            -0.0573279969394207,
            0.24495795369148254
        ],
        [
            0.04484279453754425,
            -0.05847626551985741,
            0.24436870217323303
        ],
        [
            -0.01606038212776184,
            -0.02633046545088291,
            0.21592485904693604
        ],
        [
            -0.04587915539741516,
            -0.02569824829697609,
            0.21609215438365936
        ],
        [
            0.016100704669952393,
            -0.02636853978037834,
            0.2159084528684616
        ],
        [
            0.0459132045507431,
            -0.02712807059288025,
            0.21578261256217957
        ],
        [
            -0.04632416367530823,
            -0.024111051112413406,
            0.18631848692893982
        ],
        [
            -0.016485005617141724,
            -0.02512619085609913,
            0.18539512157440186
        ],
        [
            0.046103447675704956,
            -0.02547541819512844,
            0.18600937724113464
        ],
        [
            0.01623690128326416,
            -0.02514241635799408,
            0.1854378581047058
        ],
        [
            -0.04666471481323242,
            -0.0553964339196682,
            0.2144700437784195
        ],
        [
            0.045312002301216125,
            -0.056818969547748566,
            0.21407411992549896
        ],
        [
            -0.04736258089542389,
            -0.053808026015758514,
            0.18471674621105194
        ],
        [
            0.04577818512916565,
            -0.05518171936273575,
            0.1843228042125702
        ],
        [
            -0.05986769497394562,
            0.01278041023761034,
            0.14090777933597565
        ],
        [
            -0.00015504658222198486,
            0.009871616028249264,
            0.13992470502853394
        ],
        [
            0.060838788747787476,
            0.010216833092272282,
            0.1401490718126297
        ],
        [
            0.001045331358909607,
            0.01008617039769888,
            0.13979272544384003
        ],
        [
            -0.05972674489021301,
            0.01412936206907034,
            0.14100612699985504
        ],
        [
            -0.059649474918842316,
            0.01440992671996355,
            0.14095593988895416
        ],
        [
            0.06076309084892273,
            0.01161955762654543,
            0.14027683436870575
        ],
        [
            0.060691989958286285,
            0.011901206336915493,
            0.1402646005153656
        ],
        [
            -0.05923529714345932,
            0.013614514842629433,
            0.14086979627609253
        ],
        [
            0.06024972349405289,
            0.011163956485688686,
            0.14020216464996338
        ],
        [
            -0.0019082129001617432,
            -0.01997070573270321,
            0.14063513278961182
        ],
        [
            -0.05856101214885712,
            0.04385501146316528,
            0.144430473446846
        ],
        [
            0.0014305859804153442,
            -0.01979723758995533,
            0.1407976597547531
        ],
        [
            0.06099693849682808,
            0.04140826314687729,
            0.14346498250961304
        ],
        [
            -0.029564935714006424,
            0.013456664979457855,
            0.1406479924917221
        ],
        [
            0.030603546649217606,
            0.012347495183348656,
            0.14030250906944275
        ],
        [
            -0.06260327994823456,
            -0.012877496890723705,
            0.07804510742425919
        ],
        [
            0.06170447915792465,
            -0.0161263570189476,
            0.07727831602096558
        ],
        [
            -0.06291775405406952,
            -0.0007395597640424967,
            -0.1617778241634369
        ],
        [
            0.06131919473409653,
            -0.0034308310132473707,
            -0.16205580532550812
        ],
        [
            -0.0632520318031311,
            0.0036038202233612537,
            -0.22557950019836426
        ],
        [
            0.061553388833999634,
            0.0002803705574478954,
            -0.22608575224876404
        ],
        [
            -0.059274233877658844,
            0.05351980775594711,
            -0.49468424916267395
        ],
        [
            -0.06210804730653763,
            0.02147379145026207,
            -0.465154767036438
        ],
        [
            0.06016894429922104,
            0.050899896770715714,
            -0.49476438760757446
        ],
        [
            0.061328671872615814,
            0.018821956589818,
            -0.46519580483436584
        ],
        [
            -0.0631532371044159,
            -0.01067154761403799,
            0.018157891929149628
        ],
        [
            0.06183640658855438,
            -0.013805954717099667,
            0.017392851412296295
        ],
        [
            -0.06289160251617432,
            -0.004745309241116047,
            -0.10205018520355225
        ],
        [
            0.061266541481018066,
            -0.00709056481719017,
            -0.10237084329128265
        ],
        [
            -0.0634036511182785,
            0.0072599248960614204,
            -0.28537634015083313
        ],
        [
            0.061708830296993256,
            0.004093407653272152,
            -0.28587210178375244
        ],
        [
            -0.06291179358959198,
            0.016086220741271973,
            -0.4054960012435913
        ],
        [
            0.06172125041484833,
            0.013617373071610928,
            -0.405574768781662
        ],
        [
            -0.06413798779249191,
            -0.013339638710021973,
            0.07742428034543991
        ],
        [
            0.06323552131652832,
            -0.01664128713309765,
            0.07666413486003876
        ],
        [
            -0.06387732177972794,
            -0.0013452977873384953,
            -0.16134068369865417
        ],
        [
            0.06212501972913742,
            -0.003895243862643838,
            -0.1617647111415863
        ],
        [
            -0.06476806849241257,
            0.0031409829389303923,
            -0.2261868119239807
        ],
        [
            0.06306792795658112,
            -0.0002461025433149189,
            -0.22667604684829712
        ],
        [
            -0.06326787173748016,
            0.020891308784484863,
            -0.464663565158844
        ],
        [
            0.062343813478946686,
            0.01831912435591221,
            -0.46482664346694946
        ],
        [
            -0.05913950130343437,
            0.04882397875189781,
            0.02068275958299637
        ],
        [
            0.060757629573345184,
            0.04584405943751335,
            0.020000964403152466
        ],
        [
            -0.05889684334397316,
            0.054681308567523956,
            -0.09842804074287415
        ],
        [
            0.06026799604296684,
            0.0525355339050293,
            -0.09892167150974274
        ],
        [
            -0.05914956331253052,
            0.06664908677339554,
            -0.2813858091831207
        ],
        [
            0.0604744479060173,
            0.06365133076906204,
            -0.2817686200141907
        ],
        [
            -0.0591186098754406,
            0.05483094975352287,
            -0.4946625232696533
        ],
        [
            -0.0590532049536705,
            0.0754101425409317,
            -0.40046244859695435
        ],
        [
            0.06006660684943199,
            0.052138540893793106,
            -0.4947452247142792
        ],
        [
            0.06093091517686844,
            0.07312409579753876,
            -0.4006304442882538
        ],
        [
            -0.0600871667265892,
            -0.013228042051196098,
            0.07796134054660797
        ],
        [
            0.05887018144130707,
            -0.016450263559818268,
            0.07671214640140533
        ],
        [
            -0.06024952977895737,
            -0.0012698333011940122,
            -0.16169388592243195
        ],
        [
            0.058807920664548874,
            -0.003865700913593173,
            -0.1614772230386734
        ],
        [
            -0.06050078943371773,
            0.0031955214217305183,
            -0.22566117346286774
        ],
        [
            0.058502912521362305,
            -0.00007238196121761575,
            -0.22665825486183167
        ],
        [
            -0.05976167693734169,
            0.021081119775772095,
            -0.46513405442237854
        ],
        [
            0.05915900692343712,
            0.018465284258127213,
            -0.46476173400878906
        ],
        [
            -0.06377111375331879,
            -0.015282702632248402,
            0.019102096557617188
        ],
        [
            -0.004019394516944885,
            -0.017214322462677956,
            0.018086783587932587
        ],
        [
            0.06225422024726868,
            -0.018426578491926193,
            0.018347635865211487
        ],
        [
            0.0024735629558563232,
            -0.01753108762204647,
            0.01786132901906967
        ],
        [
            -0.06351707875728607,
            -0.009087368845939636,
            -0.10331255197525024
        ],
        [
            -0.0037847310304641724,
            -0.011337938718497753,
            -0.10298022627830505
        ],
        [
            0.06167080998420715,
            -0.011640089564025402,
            -0.10367318987846375
        ],
        [
            0.0019026994705200195,
            -0.01086069829761982,
            -0.10309122502803802
        ],
        [
            -0.0640413910150528,
            0.0027014226652681828,
            -0.2845674157142639
        ],
        [
            -0.004311785101890564,
            0.00033031232305802405,
            -0.28522050380706787
        ],
        [
            0.06213465332984924,
            -0.000528163043782115,
            -0.2850518226623535
        ],
        [
            0.002360895276069641,
            0.00011857461504405364,
            -0.2855243682861328
        ],
        [
            -0.06353132426738739,
            0.011853348463773727,
            -0.40693336725234985
        ],
        [
            -0.003788381814956665,
            0.009571845643222332,
            -0.40579092502593994
        ],
        [
            0.06211744248867035,
            0.009198900312185287,
            -0.407046914100647
        ],
        [
            0.002337217330932617,
            0.010067571885883808,
            -0.40597549080848694
        ],
        [
            -0.06379248201847076,
            -0.016061117872595787,
            0.01787971332669258
        ],
        [
            -0.0567198172211647,
            0.10582583397626877,
            0.08301082253456116
        ],
        [
            0.062248677015304565,
            -0.019217684864997864,
            0.017154917120933533
        ],
        [
            0.062099289149045944,
            0.10253681987524033,
            0.08258689939975739
        ],
        [
            -0.06359174847602844,
            -0.009932045824825764,
            -0.10236772149801254
        ],
        [
            -0.05753888189792633,
            0.1176474317908287,
            -0.15468233823776245
        ],
        [
            0.06170313060283661,
            -0.012475795112550259,
            -0.10278798639774323
        ],
        [
            0.06167064979672432,
            0.1152590811252594,
            -0.1554502248764038
        ],
        [
            -0.06410276889801025,
            0.0019207058940082788,
            -0.28576382994651794
        ],
        [
            -0.057063840329647064,
            0.12210424989461899,
            -0.2176969051361084
        ],
        [
            0.062170401215553284,
            -0.0013176792999729514,
            -0.28622016310691833
        ],
        [
            0.061766304075717926,
            0.11874381452798843,
            -0.21778595447540283
        ],
        [
            -0.06353375315666199,
            0.010954255238175392,
            -0.40588462352752686
        ],
        [
            -0.057065486907958984,
            0.13974325358867645,
            -0.45508405566215515
        ],
        [
            0.06206996738910675,
            0.00831801351159811,
            -0.4060572385787964
        ],
        [
            0.062153562903404236,
            0.13732601702213287,
            -0.4554808735847473
        ],
        [
            -0.06401227414608002,
            -0.015791257843375206,
            0.0172608382999897
        ],
        [
            -0.0042773038148880005,
            -0.0158613920211792,
            0.017567245289683342
        ],
        [
            0.062493473291397095,
            -0.018847117200493813,
            0.016589181497693062
        ],
        [
            0.002855941653251648,
            -0.015978118404746056,
            0.017301561310887337
        ],
        [
            -0.0638473778963089,
            -0.00945436954498291,
            -0.1016329824924469
        ],
        [
            -0.004125505685806274,
            -0.009830995462834835,
            -0.10182667523622513
        ],
        [
            0.06194278597831726,
            -0.01217117253690958,
            -0.10222616046667099
        ],
        [
            0.002261742949485779,
            -0.009607859887182713,
            -0.10204833745956421
        ],
        [
            -0.06433969736099243,
            0.002189540071412921,
            -0.2863290309906006
        ],
        [
            -0.004604533314704895,
            0.0018978031584993005,
            -0.28577762842178345
        ],
        [
            0.06243184208869934,
            -0.0009471628582105041,
            -0.2867385149002075
        ],
        [
            0.0027889907360076904,
            0.001850760425440967,
            -0.2861076295375824
        ],
        [
            -0.06377850472927094,
            0.011444213800132275,
            -0.4050542116165161
        ],
        [
            -0.004036813974380493,
            0.010897410102188587,
            -0.4049590826034546
        ],
        [
            0.06229446828365326,
            0.008647344075143337,
            -0.4053809940814972
        ],
        [
            0.002597227692604065,
            0.011186951771378517,
            -0.40524035692214966
        ],
        [
            -0.018913954496383667,
            -0.018393535166978836,
            0.033042751252651215
        ],
        [
            -0.04885491728782654,
            -0.01777019537985325,
            0.03276846557855606
        ],
        [
            0.017425745725631714,
            -0.01950579695403576,
            0.03267949819564819
        ],
        [
            0.047362059354782104,
            -0.020299063995480537,
            0.03215495124459267
        ],
        [
            -0.018782705068588257,
            -0.011029312387108803,
            -0.11787177622318268
        ],
        [
            -0.04870517551898956,
            -0.010292022489011288,
            -0.11737096309661865
        ],
        [
            0.016829267144203186,
            -0.011259256862103939,
            -0.11805658042430878
        ],
        [
            0.04675044119358063,
            -0.0120292529463768,
            -0.11772029101848602
        ],
        [
            -0.019316494464874268,
            -0.0011308317771181464,
            -0.27039891481399536
        ],
        [
            -0.04925704002380371,
            -0.00028090568957850337,
            -0.27084341645240784
        ],
        [
            0.017316624522209167,
            -0.0021888641640543938,
            -0.27075624465942383
        ],
        [
            0.04726262390613556,
            -0.0028493660502135754,
            -0.2712768018245697
        ],
        [
            -0.01857978105545044,
            0.010242132470011711,
            -0.42087554931640625
        ],
        [
            -0.048498257994651794,
            0.010967965237796307,
            -0.4207424223423004
        ],
        [
            0.017155706882476807,
            0.01002952829003334,
            -0.4210520088672638
        ],
        [
            0.04706878960132599,
            0.009187649004161358,
            -0.42092233896255493
        ],
        [
            -0.048993706703186035,
            -0.016802536323666573,
            0.002955526113510132
        ],
        [
            -0.01920434832572937,
            -0.01672849804162979,
            0.002659902907907963
        ],
        [
            0.04732820391654968,
            -0.019037269055843353,
            0.002357006072998047
        ],
        [
            0.017576828598976135,
            -0.017598196864128113,
            0.0022893697023391724
        ],
        [
            -0.04883112013339996,
            -0.012030381709337234,
            -0.08756786584854126
        ],
        [
            -0.019054532051086426,
            -0.012198982760310173,
            -0.08715270459651947
        ],
        [
            0.04691556096076965,
            -0.014025512151420116,
            -0.08794493973255157
        ],
        [
            0.017176300287246704,
            -0.012652498669922352,
            -0.08742883801460266
        ],
        [
            -0.049242302775382996,
            0.0015090185916051269,
            -0.30062052607536316
        ],
        [
            -0.019464626908302307,
            0.00146923225838691,
            -0.30076783895492554
        ],
        [
            0.04728347063064575,
            -0.0007644923753105104,
            -0.30103129148483276
        ],
        [
            0.017540335655212402,
            0.0006295367493294179,
            -0.3011201322078705
        ],
        [
            -0.04887776076793671,
            0.008465531282126904,
            -0.39101529121398926
        ],
        [
            -0.01908046007156372,
            0.008219592273235321,
            -0.3904164433479309
        ],
        [
            0.04727491736412048,
            0.006410779897123575,
            -0.39122524857521057
        ],
        [
            0.01751135289669037,
            0.007776315789669752,
            -0.3906799554824829
        ],
        [
            -0.04937086999416351,
            -0.04750441014766693,
            0.03179984167218208
        ],
        [
            0.046462371945381165,
            -0.05001409351825714,
            0.030908629298210144
        ],
        [
            -0.04939413070678711,
            -0.039990924298763275,
            -0.11910005658864975
        ],
        [
            0.04593649506568909,
            -0.04170714318752289,
            -0.1196916326880455
        ],
        [
            -0.049964532256126404,
            -0.029971575364470482,
            -0.2726343870162964
        ],
        [
            0.04647041857242584,
            -0.032520659267902374,
            -0.2733456492424011
        ],
        [
            -0.049171820282936096,
            -0.01867249794304371,
            -0.42324385046958923
        ],
        [
            0.046186819672584534,
            -0.020423443987965584,
            -0.4236760437488556
        ],
        [
            -0.04912616312503815,
            -0.046546030789613724,
            0.0020076632499694824
        ],
        [
            0.04606910049915314,
            -0.04876021295785904,
            0.001125786453485489
        ],
        [
            -0.049158960580825806,
            -0.04173769801855087,
            -0.08933820575475693
        ],
        [
            0.04572242498397827,
            -0.04368336871266365,
            -0.0899486094713211
        ],
        [
            -0.049510374665260315,
            -0.02819475717842579,
            -0.3023871183395386
        ],
        [
            0.046090275049209595,
            -0.03044498711824417,
            -0.30308353900909424
        ],
        [
            -0.04923692345619202,
            -0.02118442952632904,
            -0.3935401439666748
        ],
        [
            0.04605835676193237,
            -0.023183053359389305,
            -0.39399850368499756
        ],
        [
            -0.06077440083026886,
            0.015314193442463875,
            0.08133377134799957
        ],
        [
            -0.0010717809200286865,
            0.011970573104918003,
            0.08036620914936066
        ],
        [
            0.06124396622180939,
            0.012202192097902298,
            0.080558642745018
        ],
        [
            0.0014492571353912354,
            0.011624020524322987,
            0.08018933236598969
        ],
        [
            -0.06105524301528931,
            0.027411188930273056,
            -0.16217318177223206
        ],
        [
            -0.001328781247138977,
            0.02391018345952034,
            -0.16245467960834503
        ],
        [
            0.0608329176902771,
            0.024700267240405083,
            -0.16266417503356934
        ],
        [
            0.0010032355785369873,
            0.024204328656196594,
            -0.16270124912261963
        ],
        [
            -0.06119760870933533,
            0.03168145939707756,
            -0.22162042558193207
        ],
        [
            -0.0015140622854232788,
            0.027741191908717155,
            -0.22200709581375122
        ],
        [
            0.060939788818359375,
            0.028495656326413155,
            -0.22213688492774963
        ],
        [
            0.0011372119188308716,
            0.027534496039152145,
            -0.22229233384132385
        ],
        [
            -0.060173600912094116,
            0.04974076524376869,
            -0.4651014804840088
        ],
        [
            -0.0005082786083221436,
            0.04625032842159271,
            -0.4640805721282959
        ],
        [
            0.0608343780040741,
            0.047138966619968414,
            -0.46521079540252686
        ],
        [
            0.001065090298652649,
            0.046735670417547226,
            -0.4642695486545563
        ],
        [
            -0.06059303879737854,
            0.01668156124651432,
            0.08138813078403473
        ],
        [
            -0.06029778718948364,
            0.01672150008380413,
            0.08136384189128876
        ],
        [
            0.061127811670303345,
            0.01350767444819212,
            0.08061419427394867
        ],
        [
            0.06080016866326332,
            0.013490733690559864,
            0.08063830435276031
        ],
        [
            -0.060779690742492676,
            0.029017968103289604,
            -0.16201940178871155
        ],
        [
            -0.06050673872232437,
            0.029222946614027023,
            -0.16202738881111145
        ],
        [
            0.06065639853477478,
            0.02637772262096405,
            -0.16247789561748505
        ],
        [
            0.060425784438848495,
            0.02657867968082428,
            -0.16244404017925262
        ],
        [
            -0.060989126563072205,
            0.033083245158195496,
            -0.2215285450220108
        ],
        [
            -0.06069464609026909,
            0.033069632947444916,
            -0.22153452038764954
        ],
        [
            0.060793325304985046,
            0.029846739023923874,
            -0.22203904390335083
        ],
        [
            0.06045028567314148,
            0.02977721393108368,
            -0.221999391913414
        ],
        [
            -0.060061924159526825,
            0.05125753581523895,
            -0.4649394750595093
        ],
        [
            -0.05991606414318085,
            0.05137312412261963,
            -0.4650591015815735
        ],
        [
            0.06079950928688049,
            0.048659611493349075,
            -0.4650135338306427
        ],
        [
            0.060688868165016174,
            0.048755258321762085,
            -0.4651251435279846
        ],
        [
            -0.05967394635081291,
            0.016288338229060173,
            0.08147357404232025
        ],
        [
            0.06010132282972336,
            0.012994611635804176,
            0.08078233897686005
        ],
        [
            -0.05988601595163345,
            0.028352726250886917,
            -0.16207946836948395
        ],
        [
            0.05980248749256134,
            0.02578442171216011,
            -0.16249194741249084
        ],
        [
            -0.06005547195672989,
            0.032596975564956665,
            -0.22137810289859772
        ],
        [
            0.05972117930650711,
            0.02924272045493126,
            -0.22181770205497742
        ],
        [
            -0.05942240357398987,
            0.05077797546982765,
            -0.46512749791145325
        ],
        [
            0.06019268557429314,
            0.04819047078490257,
            -0.46520718932151794
        ],
        [
            -0.003124833106994629,
            -0.017749212682247162,
            0.0776786357164383
        ],
        [
            -0.05934092402458191,
            0.04652183875441551,
            0.0802360475063324
        ],
        [
            0.0020812153816223145,
            -0.018158745020627975,
            0.0774775892496109
        ],
        [
            0.06132145971059799,
            0.04328975826501846,
            0.07953117042779922
        ],
        [
            -0.0034666508436203003,
            -0.0059325010515749454,
            -0.1624976545572281
        ],
        [
            -0.05921857804059982,
            0.05857286602258682,
            -0.1578579992055893
        ],
        [
            0.0016538351774215698,
            -0.005701378453522921,
            -0.16262030601501465
        ],
        [
            0.06059439852833748,
            0.055987924337387085,
            -0.15840627253055573
        ],
        [
            -0.003842383623123169,
            -0.0018534031696617603,
            -0.2256164699792862
        ],
        [
            -0.05957529693841934,
            0.062881700694561,
            -0.22190137207508087
        ],
        [
            0.0019607990980148315,
            -0.0021434277296066284,
            -0.22590850293636322
        ],
        [
            0.060882724821567535,
            0.059594836086034775,
            -0.22231796383857727
        ],
        [
            -0.0025895386934280396,
            0.016420627012848854,
            -0.4650082290172577
        ],
        [
            -0.05890807881951332,
            0.08067835122346878,
            -0.4598389267921448
        ],
        [
            0.0016063302755355835,
            0.016846567392349243,
            -0.465200275182724
        ],
        [
            0.061115581542253494,
            0.078096903860569,
            -0.4600280225276947
        ],
        [
            -0.030102673918008804,
            0.01620129868388176,
            0.08110423386096954
        ],
        [
            0.03057783469557762,
            0.014478870667517185,
            0.08072185516357422
        ],
        [
            -0.030288763344287872,
            0.028159556910395622,
            -0.16214750707149506
        ],
        [
            0.030224759131669998,
            0.026971012353897095,
            -0.16236406564712524
        ],
        [
            -0.030475657433271408,
            0.03243786096572876,
            -0.22160221636295319
        ],
        [
            0.030198916792869568,
            0.030709173530340195,
            -0.22186477482318878
        ],
        [
            -0.029330093413591385,
            0.053171366453170776,
            -0.49441543221473694
        ],
        [
            -0.029780201613903046,
            0.05060044303536415,
            -0.4646362066268921
        ],
        [
            0.030221380293369293,
            0.05184931308031082,
            -0.4944760501384735
        ],
        [
            0.03057687357068062,
            0.04940799996256828,
            -0.46469008922576904
        ],
        [
            0.0004267096519470215,
            -0.0347011424601078,
            0.38742703199386597
        ],
        [
            0.0011873990297317505,
            -0.0347900316119194,
            0.38750946521759033
        ],
        [
            -0.05933824181556702,
            -0.03576137125492096,
            0.33933961391448975
        ],
        [
            0.060236766934394836,
            -0.037695035338401794,
            0.3386383652687073
        ],
        [
            -0.0594296008348465,
            -0.033060360699892044,
            0.3079739511013031
        ],
        [
            0.060071274638175964,
            -0.03475900739431381,
            0.30732086300849915
        ],
        [
            -0.059570685029029846,
            -0.06539412587881088,
            0.3358246982097626
        ],
        [
            0.0594324916601181,
            -0.06729619204998016,
            0.3349184989929199
        ],
        [
            -0.05950614809989929,
            -0.06287869811058044,
            0.30611562728881836
        ],
        [
            0.05907398462295532,
            -0.06453608721494675,
            0.305232435464859
        ],
        [
            -0.059777408838272095,
            -0.030021848157048225,
            0.27833881974220276
        ],
        [
            0.06028047204017639,
            -0.03199925273656845,
            0.27767622470855713
        ],
        [
            -0.060111984610557556,
            -0.027223912999033928,
            0.2469324767589569
        ],
        [
            0.06042413413524628,
            -0.02903374843299389,
            0.2463732361793518
        ],
        [
            -0.06021222472190857,
            -0.059664055705070496,
            0.27494457364082336
        ],
        [
            0.059390366077423096,
            -0.061627164483070374,
            0.2741873264312744
        ],
        [
            -0.06074877083301544,
            -0.05706202983856201,
            0.24524912238121033
        ],
        [
            0.05974031984806061,
            -0.05886160209774971,
            0.24450591206550598
        ],
        [
            -0.060730308294296265,
            -0.025243354961276054,
            0.2172706127166748
        ],
        [
            0.060782745480537415,
            -0.02734137699007988,
            0.21670997142791748
        ],
        [
            -0.061171755194664,
            -0.023446746170520782,
            0.185698464512825
        ],
        [
            0.06095588207244873,
            -0.025478489696979523,
            0.18524403870105743
        ],
        [
            -0.061575040221214294,
            -0.05497961863875389,
            0.21483661234378815
        ],
        [
            0.0602298229932785,
            -0.05708771571516991,
            0.21428555250167847
        ],
        [
            -0.062252968549728394,
            -0.05331481248140335,
            0.18506962060928345
        ],
        [
            0.06067731976509094,
            -0.05536455288529396,
            0.18452057242393494
        ],
        [
            -0.06140616536140442,
            -0.017050154507160187,
            0.14120730757713318
        ],
        [
            0.060996949672698975,
            -0.019646083936095238,
            0.14071035385131836
        ],
        [
            -0.03004118800163269,
            0.01283955480903387,
            0.14064455032348633
        ],
        [
            0.031044580042362213,
            0.011704743839800358,
            0.14024287462234497
        ],
        [
            0.00011812150478363037,
            0.04845176637172699,
            -0.49382108449935913
        ],
        [
            0.0005983710289001465,
            0.04892609268426895,
            -0.4940122663974762
        ],
        [
            -0.05919453129172325,
            0.05260731279850006,
            -0.4948478639125824
        ],
        [
            0.06001802161335945,
            0.04993244633078575,
            -0.49490928649902344
        ],
        [
            -0.06355798244476318,
            -0.017334576696157455,
            0.03392203152179718
        ],
        [
            0.06207635998725891,
            -0.020568598061800003,
            0.03315585106611252
        ],
        [
            -0.06343258917331696,
            -0.009695068933069706,
            -0.11826863139867783
        ],
        [
            0.06149253249168396,
            -0.012163457460701466,
            -0.11863667517900467
        ],
        [
            -0.06395283341407776,
            0.00023629020142834634,
            -0.26980772614479065
        ],
        [
            0.06196780502796173,
            -0.0030821203254163265,
            -0.27030736207962036
        ],
        [
            -0.063224196434021,
            0.011600375175476074,
            -0.4218935966491699
        ],
        [
            0.06181533634662628,
            0.00905513297766447,
            -0.42201298475265503
        ],
        [
            -0.06392741203308105,
            -0.016651572659611702,
            0.0022994615137577057
        ],
        [
            0.062264323234558105,
            -0.019608469679951668,
            0.0016199899837374687
        ],
        [
            -0.0637868195772171,
            -0.011853051371872425,
            -0.08683537691831589
        ],
        [
            0.061865538358688354,
            -0.014583819545805454,
            -0.08742652833461761
        ],
        [
            -0.06419123709201813,
            0.0017424661200493574,
            -0.3013111650943756
        ],
        [
            0.062239423394203186,
            -0.0012950890231877565,
            -0.30172619223594666
        ],
        [
            -0.0638069361448288,
            0.008661136962473392,
            -0.3903283178806305
        ],
        [
            0.062196001410484314,
            0.005836751777678728,
            -0.39065656065940857
        ],
        [
            -0.0642770379781723,
            -0.04713203012943268,
            0.03172076493501663
        ],
        [
            0.061369121074676514,
            -0.050346773117780685,
            0.030725356191396713
        ],
        [
            -0.06430020928382874,
            -0.03955455869436264,
            -0.11897702515125275
        ],
        [
            0.06084594130516052,
            -0.042024094611406326,
            -0.11962861567735672
        ],
        [
            -0.06486669182777405,
            -0.029490791261196136,
            -0.2728012204170227
        ],
        [
            0.06137837469577789,
            -0.03279109299182892,
            -0.2735275626182556
        ],
        [
            -0.06407816708087921,
            -0.018236346542835236,
            -0.4232642948627472
        ],
        [
            0.06109519302845001,
            -0.020773667842149734,
            -0.4236721098423004
        ],
        [
            -0.06405071914196014,
            -0.04649396613240242,
            0.0018961317837238312
        ],
        [
            0.060976237058639526,
            -0.04941292479634285,
            0.0009107962250709534
        ],
        [
            -0.06407979130744934,
            -0.0416092649102211,
            -0.08922082930803299
        ],
        [
            0.06063297390937805,
            -0.04431317374110222,
            -0.08989334106445312
        ],
        [
            -0.0644349455833435,
            -0.028071431443095207,
            -0.3025953769683838
        ],
        [
            0.060999587178230286,
            -0.031065233051776886,
            -0.30330589413642883
        ],
        [
            -0.06415796279907227,
            -0.02101772464811802,
            -0.3935629725456238
        ],
        [
            0.060969457030296326,
            -0.023810088634490967,
            -0.39399904012680054
        ],
        [
            -0.06258800625801086,
            -0.014436498284339905,
            0.07884499430656433
        ],
        [
            0.061650022864341736,
            -0.017603429034352303,
            0.07808898389339447
        ],
        [
            -0.06293033063411713,
            -0.0024236103054136038,
            -0.16265831887722015
        ],
        [
            0.06120559573173523,
            -0.005192307289689779,
            -0.16303321719169617
        ],
        [
            -0.06328384578227997,
            0.00201702443882823,
            -0.22484090924263
        ],
        [
            0.06153032183647156,
            -0.001239035977050662,
            -0.22533290088176727
        ],
        [
            -0.062022119760513306,
            0.019912589341402054,
            -0.4661417603492737
        ],
        [
            0.06113557517528534,
            0.017254414036870003,
            -0.4662546217441559
        ],
        [
            -0.03083081543445587,
            0.015202573500573635,
            0.08081167936325073
        ],
        [
            0.03131861239671707,
            0.013422221876680851,
            0.08037818968296051
        ],
        [
            -0.0310482457280159,
            0.02731889672577381,
            -0.16213418543338776
        ],
        [
            0.030889518558979034,
            0.02615022473037243,
            -0.1624206155538559
        ],
        [
            -0.03125391900539398,
            0.03134609013795853,
            -0.22188758850097656
        ],
        [
            0.03099045157432556,
            0.02957942895591259,
            -0.2222142219543457
        ],
        [
            -0.029425449669361115,
            0.05248992145061493,
            -0.4938385486602783
        ],
        [
            -0.030399732291698456,
            0.04965440183877945,
            -0.4641452431678772
        ],
        [
            0.03029785305261612,
            0.05133478716015816,
            -0.4939481317996979
        ],
        [
            0.031099192798137665,
            0.0485384427011013,
            -0.464245468378067
        ]
    ],
    "edges_vertices": [
        [
            257,
            261
        ],
        [
            257,
            425
        ],
        [
            261,
            427
        ],
        [
            425,
            441
        ],
        [
            427,
            443
        ],
        [
            433,
            441
        ],
        [
            417,
            433
        ],
        [
            225,
            417
        ],
        [
            225,
            449
        ],
        [
            435,
            443
        ],
        [
            419,
            435
        ],
        [
            229,
            419
        ],
        [
            229,
            451
        ],
        [
            317,
            321
        ],
        [
            317,
            447
        ],
        [
            321,
            449
        ],
        [
            249,
            253
        ],
        [
            249,
            421
        ],
        [
            253,
            423
        ],
        [
            421,
            437
        ],
        [
            423,
            439
        ],
        [
            429,
            437
        ],
        [
            413,
            429
        ],
        [
            217,
            413
        ],
        [
            217,
            445
        ],
        [
            431,
            439
        ],
        [
            415,
            431
        ],
        [
            221,
            415
        ],
        [
            221,
            447
        ],
        [
            157,
            313
        ],
        [
            157,
            405
        ],
        [
            313,
            445
        ],
        [
            399,
            403
        ],
        [
            121,
            399
        ],
        [
            121,
            405
        ],
        [
            401,
            403
        ],
        [
            397,
            401
        ],
        [
            391,
            395
        ],
        [
            109,
            113
        ],
        [
            109,
            391
        ],
        [
            113,
            397
        ],
        [
            393,
            395
        ],
        [
            389,
            393
        ],
        [
            383,
            387
        ],
        [
            47,
            101
        ],
        [
            47,
            383
        ],
        [
            101,
            389
        ],
        [
            385,
            387
        ],
        [
            381,
            385
        ],
        [
            35,
            29
        ],
        [
            35,
            381
        ],
        [
            29,
            0
        ],
        [
            325,
            451
        ],
        [
            325,
            1
        ],
        [
            259,
            263
        ],
        [
            259,
            426
        ],
        [
            263,
            428
        ],
        [
            426,
            442
        ],
        [
            428,
            444
        ],
        [
            434,
            442
        ],
        [
            418,
            434
        ],
        [
            227,
            418
        ],
        [
            227,
            450
        ],
        [
            436,
            444
        ],
        [
            420,
            436
        ],
        [
            231,
            420
        ],
        [
            231,
            452
        ],
        [
            319,
            323
        ],
        [
            319,
            448
        ],
        [
            323,
            450
        ],
        [
            251,
            255
        ],
        [
            251,
            422
        ],
        [
            255,
            424
        ],
        [
            422,
            438
        ],
        [
            424,
            440
        ],
        [
            430,
            438
        ],
        [
            414,
            430
        ],
        [
            219,
            414
        ],
        [
            219,
            446
        ],
        [
            432,
            440
        ],
        [
            416,
            432
        ],
        [
            223,
            416
        ],
        [
            223,
            448
        ],
        [
            159,
            315
        ],
        [
            159,
            406
        ],
        [
            315,
            446
        ],
        [
            400,
            404
        ],
        [
            123,
            400
        ],
        [
            123,
            406
        ],
        [
            402,
            404
        ],
        [
            398,
            402
        ],
        [
            392,
            396
        ],
        [
            111,
            115
        ],
        [
            111,
            392
        ],
        [
            115,
            398
        ],
        [
            394,
            396
        ],
        [
            390,
            394
        ],
        [
            384,
            388
        ],
        [
            49,
            103
        ],
        [
            49,
            384
        ],
        [
            103,
            390
        ],
        [
            386,
            388
        ],
        [
            382,
            386
        ],
        [
            37,
            31
        ],
        [
            37,
            382
        ],
        [
            31,
            2
        ],
        [
            327,
            452
        ],
        [
            327,
            3
        ],
        [
            51,
            379
        ],
        [
            51,
            380
        ],
        [
            379,
            60
        ],
        [
            380,
            61
        ],
        [
            60,
            0
        ],
        [
            61,
            2
        ],
        [
            411,
            412
        ],
        [
            375,
            411
        ],
        [
            205,
            375
        ],
        [
            205,
            459
        ],
        [
            377,
            412
        ],
        [
            207,
            377
        ],
        [
            207,
            461
        ],
        [
            179,
            409
        ],
        [
            179,
            459
        ],
        [
            409,
            1
        ],
        [
            181,
            410
        ],
        [
            181,
            461
        ],
        [
            410,
            3
        ],
        [
            33,
            4
        ],
        [
            33,
            5
        ],
        [
            34,
            6
        ],
        [
            34,
            7
        ],
        [
            8,
            9
        ],
        [
            10,
            11
        ],
        [
            9,
            12
        ],
        [
            11,
            13
        ],
        [
            14,
            15
        ],
        [
            16,
            17
        ],
        [
            18,
            19
        ],
        [
            20,
            21
        ],
        [
            40,
            24
        ],
        [
            40,
            25
        ],
        [
            42,
            26
        ],
        [
            42,
            27
        ],
        [
            8,
            4
        ],
        [
            8,
            24
        ],
        [
            10,
            6
        ],
        [
            10,
            26
        ],
        [
            29,
            30
        ],
        [
            31,
            32
        ],
        [
            33,
            9
        ],
        [
            34,
            11
        ],
        [
            12,
            5
        ],
        [
            12,
            18
        ],
        [
            13,
            7
        ],
        [
            13,
            20
        ],
        [
            35,
            36
        ],
        [
            37,
            38
        ],
        [
            39,
            40
        ],
        [
            41,
            42
        ],
        [
            43,
            15
        ],
        [
            44,
            17
        ],
        [
            22,
            45
        ],
        [
            22,
            28
        ],
        [
            23,
            46
        ],
        [
            23,
            28
        ],
        [
            47,
            48
        ],
        [
            49,
            50
        ],
        [
            5,
            36
        ],
        [
            7,
            38
        ],
        [
            51,
            24
        ],
        [
            51,
            26
        ],
        [
            52,
            18
        ],
        [
            53,
            20
        ],
        [
            54,
            15
        ],
        [
            55,
            17
        ],
        [
            19,
            45
        ],
        [
            21,
            46
        ],
        [
            62,
            25
        ],
        [
            62,
            22
        ],
        [
            64,
            27
        ],
        [
            64,
            23
        ],
        [
            56,
            57
        ],
        [
            58,
            59
        ],
        [
            60,
            4
        ],
        [
            61,
            6
        ],
        [
            56,
            19
        ],
        [
            56,
            22
        ],
        [
            58,
            21
        ],
        [
            58,
            23
        ],
        [
            25,
            28
        ],
        [
            27,
            28
        ],
        [
            62,
            63
        ],
        [
            64,
            65
        ],
        [
            66,
            67
        ],
        [
            68,
            69
        ],
        [
            70,
            71
        ],
        [
            72,
            73
        ],
        [
            74,
            67
        ],
        [
            75,
            69
        ],
        [
            76,
            70
        ],
        [
            77,
            72
        ],
        [
            67,
            43
        ],
        [
            69,
            44
        ],
        [
            70,
            43
        ],
        [
            72,
            44
        ],
        [
            78,
            80
        ],
        [
            79,
            81
        ],
        [
            82,
            83
        ],
        [
            84,
            85
        ],
        [
            86,
            87
        ],
        [
            88,
            89
        ],
        [
            161,
            87
        ],
        [
            163,
            89
        ],
        [
            168,
            90
        ],
        [
            162,
            168
        ],
        [
            170,
            91
        ],
        [
            164,
            170
        ],
        [
            94,
            95
        ],
        [
            96,
            97
        ],
        [
            118,
            95
        ],
        [
            118,
            98
        ],
        [
            120,
            97
        ],
        [
            120,
            99
        ],
        [
            101,
            102
        ],
        [
            103,
            104
        ],
        [
            105,
            78
        ],
        [
            106,
            79
        ],
        [
            92,
            107
        ],
        [
            92,
            100
        ],
        [
            93,
            108
        ],
        [
            93,
            100
        ],
        [
            109,
            110
        ],
        [
            111,
            112
        ],
        [
            113,
            114
        ],
        [
            115,
            116
        ],
        [
            95,
            82
        ],
        [
            97,
            84
        ],
        [
            83,
            117
        ],
        [
            83,
            118
        ],
        [
            85,
            119
        ],
        [
            85,
            120
        ],
        [
            121,
            122
        ],
        [
            123,
            124
        ],
        [
            130,
            100
        ],
        [
            130,
            94
        ],
        [
            132,
            100
        ],
        [
            132,
            96
        ],
        [
            122,
            83
        ],
        [
            124,
            85
        ],
        [
            78,
            125
        ],
        [
            79,
            126
        ],
        [
            107,
            94
        ],
        [
            108,
            96
        ],
        [
            110,
            82
        ],
        [
            112,
            84
        ],
        [
            92,
            127
        ],
        [
            93,
            128
        ],
        [
            129,
            130
        ],
        [
            131,
            132
        ],
        [
            133,
            134
        ],
        [
            135,
            136
        ],
        [
            137,
            138
        ],
        [
            139,
            140
        ],
        [
            141,
            134
        ],
        [
            142,
            136
        ],
        [
            143,
            137
        ],
        [
            144,
            139
        ],
        [
            134,
            105
        ],
        [
            136,
            106
        ],
        [
            137,
            105
        ],
        [
            139,
            106
        ],
        [
            145,
            146
        ],
        [
            147,
            148
        ],
        [
            149,
            150
        ],
        [
            151,
            152
        ],
        [
            153,
            146
        ],
        [
            154,
            148
        ],
        [
            155,
            149
        ],
        [
            156,
            151
        ],
        [
            146,
            117
        ],
        [
            148,
            119
        ],
        [
            149,
            117
        ],
        [
            151,
            119
        ],
        [
            157,
            158
        ],
        [
            159,
            160
        ],
        [
            407,
            161
        ],
        [
            407,
            162
        ],
        [
            408,
            163
        ],
        [
            408,
            164
        ],
        [
            87,
            167
        ],
        [
            87,
            168
        ],
        [
            89,
            169
        ],
        [
            89,
            170
        ],
        [
            171,
            168
        ],
        [
            172,
            170
        ],
        [
            171,
            98
        ],
        [
            172,
            99
        ],
        [
            329,
            173
        ],
        [
            331,
            174
        ],
        [
            333,
            175
        ],
        [
            335,
            176
        ],
        [
            337,
            177
        ],
        [
            339,
            178
        ],
        [
            341,
            179
        ],
        [
            341,
            180
        ],
        [
            343,
            181
        ],
        [
            343,
            182
        ],
        [
            173,
            183
        ],
        [
            174,
            184
        ],
        [
            175,
            185
        ],
        [
            176,
            186
        ],
        [
            177,
            187
        ],
        [
            178,
            188
        ],
        [
            180,
            189
        ],
        [
            182,
            190
        ],
        [
            330,
            354
        ],
        [
            354,
            199
        ],
        [
            332,
            356
        ],
        [
            356,
            200
        ],
        [
            334,
            358
        ],
        [
            358,
            201
        ],
        [
            336,
            360
        ],
        [
            360,
            202
        ],
        [
            338,
            362
        ],
        [
            362,
            203
        ],
        [
            340,
            364
        ],
        [
            364,
            204
        ],
        [
            342,
            366
        ],
        [
            342,
            205
        ],
        [
            366,
            206
        ],
        [
            344,
            368
        ],
        [
            344,
            207
        ],
        [
            368,
            208
        ],
        [
            234,
            209
        ],
        [
            236,
            210
        ],
        [
            238,
            211
        ],
        [
            240,
            212
        ],
        [
            242,
            213
        ],
        [
            244,
            214
        ],
        [
            246,
            215
        ],
        [
            248,
            216
        ],
        [
            217,
            218
        ],
        [
            219,
            220
        ],
        [
            221,
            222
        ],
        [
            223,
            224
        ],
        [
            225,
            226
        ],
        [
            227,
            228
        ],
        [
            229,
            230
        ],
        [
            231,
            232
        ],
        [
            191,
            233
        ],
        [
            191,
            234
        ],
        [
            192,
            235
        ],
        [
            192,
            236
        ],
        [
            193,
            237
        ],
        [
            193,
            238
        ],
        [
            194,
            239
        ],
        [
            194,
            240
        ],
        [
            195,
            241
        ],
        [
            195,
            242
        ],
        [
            196,
            243
        ],
        [
            196,
            244
        ],
        [
            197,
            245
        ],
        [
            197,
            246
        ],
        [
            198,
            247
        ],
        [
            198,
            248
        ],
        [
            249,
            250
        ],
        [
            251,
            252
        ],
        [
            253,
            254
        ],
        [
            255,
            256
        ],
        [
            257,
            258
        ],
        [
            259,
            260
        ],
        [
            261,
            262
        ],
        [
            263,
            264
        ],
        [
            218,
            191
        ],
        [
            220,
            192
        ],
        [
            222,
            193
        ],
        [
            224,
            194
        ],
        [
            226,
            195
        ],
        [
            228,
            196
        ],
        [
            230,
            197
        ],
        [
            232,
            198
        ],
        [
            265,
            266
        ],
        [
            267,
            268
        ],
        [
            269,
            270
        ],
        [
            271,
            272
        ],
        [
            273,
            274
        ],
        [
            275,
            276
        ],
        [
            277,
            278
        ],
        [
            279,
            280
        ],
        [
            281,
            282
        ],
        [
            283,
            284
        ],
        [
            285,
            286
        ],
        [
            287,
            288
        ],
        [
            289,
            290
        ],
        [
            291,
            292
        ],
        [
            293,
            294
        ],
        [
            295,
            296
        ],
        [
            297,
            266
        ],
        [
            298,
            268
        ],
        [
            299,
            270
        ],
        [
            300,
            272
        ],
        [
            301,
            274
        ],
        [
            302,
            276
        ],
        [
            303,
            278
        ],
        [
            304,
            280
        ],
        [
            305,
            281
        ],
        [
            306,
            283
        ],
        [
            307,
            285
        ],
        [
            308,
            287
        ],
        [
            309,
            289
        ],
        [
            310,
            291
        ],
        [
            311,
            293
        ],
        [
            312,
            295
        ],
        [
            266,
            233
        ],
        [
            268,
            235
        ],
        [
            270,
            237
        ],
        [
            272,
            239
        ],
        [
            274,
            241
        ],
        [
            276,
            243
        ],
        [
            278,
            245
        ],
        [
            280,
            247
        ],
        [
            281,
            233
        ],
        [
            283,
            235
        ],
        [
            285,
            237
        ],
        [
            287,
            239
        ],
        [
            289,
            241
        ],
        [
            291,
            243
        ],
        [
            293,
            245
        ],
        [
            295,
            247
        ],
        [
            313,
            314
        ],
        [
            315,
            316
        ],
        [
            317,
            318
        ],
        [
            319,
            320
        ],
        [
            321,
            322
        ],
        [
            323,
            324
        ],
        [
            325,
            326
        ],
        [
            327,
            328
        ],
        [
            453,
            329
        ],
        [
            453,
            330
        ],
        [
            454,
            331
        ],
        [
            454,
            332
        ],
        [
            455,
            333
        ],
        [
            455,
            334
        ],
        [
            456,
            335
        ],
        [
            456,
            336
        ],
        [
            457,
            337
        ],
        [
            457,
            338
        ],
        [
            458,
            339
        ],
        [
            458,
            340
        ],
        [
            460,
            341
        ],
        [
            460,
            342
        ],
        [
            462,
            343
        ],
        [
            462,
            344
        ],
        [
            173,
            353
        ],
        [
            173,
            354
        ],
        [
            174,
            355
        ],
        [
            174,
            356
        ],
        [
            175,
            357
        ],
        [
            175,
            358
        ],
        [
            176,
            359
        ],
        [
            176,
            360
        ],
        [
            177,
            361
        ],
        [
            177,
            362
        ],
        [
            178,
            363
        ],
        [
            178,
            364
        ],
        [
            180,
            365
        ],
        [
            180,
            366
        ],
        [
            182,
            367
        ],
        [
            182,
            368
        ],
        [
            375,
            376
        ],
        [
            377,
            378
        ],
        [
            369,
            354
        ],
        [
            370,
            356
        ],
        [
            371,
            358
        ],
        [
            372,
            360
        ],
        [
            373,
            362
        ],
        [
            374,
            364
        ],
        [
            376,
            366
        ],
        [
            378,
            368
        ],
        [
            369,
            209
        ],
        [
            370,
            210
        ],
        [
            371,
            211
        ],
        [
            372,
            212
        ],
        [
            373,
            213
        ],
        [
            374,
            214
        ],
        [
            376,
            215
        ],
        [
            378,
            216
        ],
        [
            30,
            60
        ],
        [
            30,
            36
        ],
        [
            32,
            61
        ],
        [
            32,
            38
        ],
        [
            379,
            8
        ],
        [
            380,
            10
        ],
        [
            52,
            39
        ],
        [
            53,
            41
        ],
        [
            12,
            14
        ],
        [
            13,
            16
        ],
        [
            36,
            43
        ],
        [
            38,
            44
        ],
        [
            54,
            45
        ],
        [
            55,
            46
        ],
        [
            57,
            19
        ],
        [
            59,
            21
        ],
        [
            63,
            25
        ],
        [
            65,
            27
        ],
        [
            30,
            33
        ],
        [
            32,
            34
        ],
        [
            9,
            52
        ],
        [
            11,
            53
        ],
        [
            14,
            36
        ],
        [
            14,
            54
        ],
        [
            16,
            38
        ],
        [
            16,
            55
        ],
        [
            15,
            45
        ],
        [
            17,
            46
        ],
        [
            60,
            29
        ],
        [
            61,
            31
        ],
        [
            9,
            5
        ],
        [
            11,
            7
        ],
        [
            18,
            54
        ],
        [
            20,
            55
        ],
        [
            24,
            52
        ],
        [
            26,
            53
        ],
        [
            15,
            48
        ],
        [
            17,
            50
        ],
        [
            39,
            56
        ],
        [
            41,
            58
        ],
        [
            4,
            9
        ],
        [
            6,
            11
        ],
        [
            39,
            62
        ],
        [
            41,
            64
        ],
        [
            57,
            45
        ],
        [
            59,
            46
        ],
        [
            57,
            22
        ],
        [
            59,
            23
        ],
        [
            63,
            22
        ],
        [
            65,
            23
        ],
        [
            63,
            28
        ],
        [
            65,
            28
        ],
        [
            74,
            76
        ],
        [
            75,
            77
        ],
        [
            67,
            70
        ],
        [
            69,
            72
        ],
        [
            381,
            66
        ],
        [
            382,
            68
        ],
        [
            383,
            71
        ],
        [
            384,
            73
        ],
        [
            385,
            74
        ],
        [
            386,
            75
        ],
        [
            387,
            76
        ],
        [
            388,
            77
        ],
        [
            66,
            74
        ],
        [
            66,
            36
        ],
        [
            68,
            75
        ],
        [
            68,
            38
        ],
        [
            71,
            76
        ],
        [
            71,
            48
        ],
        [
            73,
            77
        ],
        [
            73,
            50
        ],
        [
            105,
            110
        ],
        [
            106,
            112
        ],
        [
            110,
            114
        ],
        [
            112,
            116
        ],
        [
            117,
            122
        ],
        [
            119,
            124
        ],
        [
            167,
            158
        ],
        [
            167,
            122
        ],
        [
            169,
            160
        ],
        [
            169,
            124
        ],
        [
            80,
            82
        ],
        [
            81,
            84
        ],
        [
            83,
            86
        ],
        [
            85,
            88
        ],
        [
            107,
            125
        ],
        [
            108,
            126
        ],
        [
            165,
            98
        ],
        [
            166,
            99
        ],
        [
            80,
            110
        ],
        [
            80,
            125
        ],
        [
            81,
            112
        ],
        [
            81,
            126
        ],
        [
            86,
            122
        ],
        [
            86,
            90
        ],
        [
            88,
            124
        ],
        [
            88,
            91
        ],
        [
            78,
            107
        ],
        [
            79,
            108
        ],
        [
            118,
            90
        ],
        [
            120,
            91
        ],
        [
            102,
            78
        ],
        [
            104,
            79
        ],
        [
            125,
            95
        ],
        [
            126,
            97
        ],
        [
            114,
            83
        ],
        [
            116,
            85
        ],
        [
            90,
            98
        ],
        [
            91,
            99
        ],
        [
            107,
            127
        ],
        [
            108,
            128
        ],
        [
            129,
            100
        ],
        [
            129,
            127
        ],
        [
            131,
            100
        ],
        [
            131,
            128
        ],
        [
            94,
            127
        ],
        [
            96,
            128
        ],
        [
            92,
            129
        ],
        [
            93,
            131
        ],
        [
            141,
            143
        ],
        [
            142,
            144
        ],
        [
            134,
            137
        ],
        [
            136,
            139
        ],
        [
            389,
            133
        ],
        [
            390,
            135
        ],
        [
            391,
            138
        ],
        [
            392,
            140
        ],
        [
            393,
            141
        ],
        [
            394,
            142
        ],
        [
            395,
            143
        ],
        [
            396,
            144
        ],
        [
            133,
            141
        ],
        [
            133,
            102
        ],
        [
            135,
            142
        ],
        [
            135,
            104
        ],
        [
            138,
            143
        ],
        [
            138,
            110
        ],
        [
            140,
            144
        ],
        [
            140,
            112
        ],
        [
            153,
            155
        ],
        [
            154,
            156
        ],
        [
            146,
            149
        ],
        [
            148,
            151
        ],
        [
            397,
            145
        ],
        [
            398,
            147
        ],
        [
            399,
            150
        ],
        [
            400,
            152
        ],
        [
            401,
            153
        ],
        [
            402,
            154
        ],
        [
            403,
            155
        ],
        [
            404,
            156
        ],
        [
            145,
            153
        ],
        [
            145,
            114
        ],
        [
            147,
            154
        ],
        [
            147,
            116
        ],
        [
            150,
            155
        ],
        [
            150,
            122
        ],
        [
            152,
            156
        ],
        [
            152,
            124
        ],
        [
            405,
            167
        ],
        [
            406,
            169
        ],
        [
            168,
            98
        ],
        [
            170,
            99
        ],
        [
            158,
            161
        ],
        [
            160,
            163
        ],
        [
            171,
            162
        ],
        [
            171,
            165
        ],
        [
            172,
            164
        ],
        [
            172,
            166
        ],
        [
            407,
            87
        ],
        [
            408,
            89
        ],
        [
            407,
            168
        ],
        [
            408,
            170
        ],
        [
            353,
            314
        ],
        [
            353,
            218
        ],
        [
            355,
            316
        ],
        [
            355,
            220
        ],
        [
            357,
            318
        ],
        [
            357,
            222
        ],
        [
            359,
            320
        ],
        [
            359,
            224
        ],
        [
            361,
            322
        ],
        [
            361,
            226
        ],
        [
            363,
            324
        ],
        [
            363,
            228
        ],
        [
            326,
            409
        ],
        [
            365,
            326
        ],
        [
            365,
            230
        ],
        [
            328,
            410
        ],
        [
            367,
            328
        ],
        [
            367,
            232
        ],
        [
            218,
            233
        ],
        [
            220,
            235
        ],
        [
            222,
            237
        ],
        [
            224,
            239
        ],
        [
            226,
            241
        ],
        [
            228,
            243
        ],
        [
            230,
            245
        ],
        [
            232,
            247
        ],
        [
            183,
            191
        ],
        [
            184,
            192
        ],
        [
            185,
            193
        ],
        [
            186,
            194
        ],
        [
            187,
            195
        ],
        [
            188,
            196
        ],
        [
            189,
            197
        ],
        [
            190,
            198
        ],
        [
            345,
            209
        ],
        [
            346,
            210
        ],
        [
            347,
            211
        ],
        [
            348,
            212
        ],
        [
            349,
            213
        ],
        [
            350,
            214
        ],
        [
            351,
            411
        ],
        [
            351,
            215
        ],
        [
            352,
            412
        ],
        [
            352,
            216
        ],
        [
            183,
            218
        ],
        [
            183,
            199
        ],
        [
            184,
            220
        ],
        [
            184,
            200
        ],
        [
            185,
            222
        ],
        [
            185,
            201
        ],
        [
            186,
            224
        ],
        [
            186,
            202
        ],
        [
            187,
            226
        ],
        [
            187,
            203
        ],
        [
            188,
            228
        ],
        [
            188,
            204
        ],
        [
            189,
            230
        ],
        [
            189,
            206
        ],
        [
            190,
            232
        ],
        [
            190,
            208
        ],
        [
            209,
            199
        ],
        [
            210,
            200
        ],
        [
            211,
            201
        ],
        [
            212,
            202
        ],
        [
            213,
            203
        ],
        [
            214,
            204
        ],
        [
            215,
            206
        ],
        [
            216,
            208
        ],
        [
            191,
            250
        ],
        [
            192,
            252
        ],
        [
            193,
            254
        ],
        [
            194,
            256
        ],
        [
            195,
            258
        ],
        [
            196,
            260
        ],
        [
            197,
            262
        ],
        [
            198,
            264
        ],
        [
            199,
            234
        ],
        [
            200,
            236
        ],
        [
            201,
            238
        ],
        [
            202,
            240
        ],
        [
            203,
            242
        ],
        [
            204,
            244
        ],
        [
            206,
            246
        ],
        [
            208,
            248
        ],
        [
            297,
            305
        ],
        [
            298,
            306
        ],
        [
            299,
            307
        ],
        [
            300,
            308
        ],
        [
            301,
            309
        ],
        [
            302,
            310
        ],
        [
            303,
            311
        ],
        [
            304,
            312
        ],
        [
            266,
            281
        ],
        [
            268,
            283
        ],
        [
            270,
            285
        ],
        [
            272,
            287
        ],
        [
            274,
            289
        ],
        [
            276,
            291
        ],
        [
            278,
            293
        ],
        [
            280,
            295
        ],
        [
            413,
            265
        ],
        [
            414,
            267
        ],
        [
            415,
            269
        ],
        [
            416,
            271
        ],
        [
            417,
            273
        ],
        [
            418,
            275
        ],
        [
            419,
            277
        ],
        [
            420,
            279
        ],
        [
            421,
            282
        ],
        [
            422,
            284
        ],
        [
            423,
            286
        ],
        [
            424,
            288
        ],
        [
            425,
            290
        ],
        [
            426,
            292
        ],
        [
            427,
            294
        ],
        [
            428,
            296
        ],
        [
            429,
            297
        ],
        [
            430,
            298
        ],
        [
            431,
            299
        ],
        [
            432,
            300
        ],
        [
            433,
            301
        ],
        [
            434,
            302
        ],
        [
            435,
            303
        ],
        [
            436,
            304
        ],
        [
            437,
            305
        ],
        [
            438,
            306
        ],
        [
            439,
            307
        ],
        [
            440,
            308
        ],
        [
            441,
            309
        ],
        [
            442,
            310
        ],
        [
            443,
            311
        ],
        [
            444,
            312
        ],
        [
            265,
            297
        ],
        [
            265,
            218
        ],
        [
            267,
            298
        ],
        [
            267,
            220
        ],
        [
            269,
            299
        ],
        [
            269,
            222
        ],
        [
            271,
            300
        ],
        [
            271,
            224
        ],
        [
            273,
            301
        ],
        [
            273,
            226
        ],
        [
            275,
            302
        ],
        [
            275,
            228
        ],
        [
            277,
            303
        ],
        [
            277,
            230
        ],
        [
            279,
            304
        ],
        [
            279,
            232
        ],
        [
            282,
            305
        ],
        [
            282,
            250
        ],
        [
            284,
            306
        ],
        [
            284,
            252
        ],
        [
            286,
            307
        ],
        [
            286,
            254
        ],
        [
            288,
            308
        ],
        [
            288,
            256
        ],
        [
            290,
            309
        ],
        [
            290,
            258
        ],
        [
            292,
            310
        ],
        [
            292,
            260
        ],
        [
            294,
            311
        ],
        [
            294,
            262
        ],
        [
            296,
            312
        ],
        [
            296,
            264
        ],
        [
            445,
            353
        ],
        [
            446,
            355
        ],
        [
            447,
            357
        ],
        [
            448,
            359
        ],
        [
            449,
            361
        ],
        [
            450,
            363
        ],
        [
            451,
            365
        ],
        [
            452,
            367
        ],
        [
            354,
            209
        ],
        [
            356,
            210
        ],
        [
            358,
            211
        ],
        [
            360,
            212
        ],
        [
            362,
            213
        ],
        [
            364,
            214
        ],
        [
            366,
            215
        ],
        [
            368,
            216
        ],
        [
            314,
            329
        ],
        [
            316,
            331
        ],
        [
            318,
            333
        ],
        [
            320,
            335
        ],
        [
            322,
            337
        ],
        [
            324,
            339
        ],
        [
            326,
            341
        ],
        [
            328,
            343
        ],
        [
            369,
            330
        ],
        [
            369,
            345
        ],
        [
            370,
            332
        ],
        [
            370,
            346
        ],
        [
            371,
            334
        ],
        [
            371,
            347
        ],
        [
            372,
            336
        ],
        [
            372,
            348
        ],
        [
            373,
            338
        ],
        [
            373,
            349
        ],
        [
            374,
            340
        ],
        [
            374,
            350
        ],
        [
            376,
            342
        ],
        [
            376,
            351
        ],
        [
            378,
            344
        ],
        [
            378,
            352
        ],
        [
            459,
            460
        ],
        [
            461,
            462
        ],
        [
            453,
            173
        ],
        [
            454,
            174
        ],
        [
            455,
            175
        ],
        [
            456,
            176
        ],
        [
            457,
            177
        ],
        [
            458,
            178
        ],
        [
            460,
            180
        ],
        [
            462,
            182
        ],
        [
            453,
            354
        ],
        [
            454,
            356
        ],
        [
            455,
            358
        ],
        [
            456,
            360
        ],
        [
            457,
            362
        ],
        [
            458,
            364
        ],
        [
            460,
            366
        ],
        [
            462,
            368
        ],
        [
            15,
            78
        ],
        [
            17,
            79
        ],
        [
            22,
            92
        ],
        [
            23,
            93
        ],
        [
            28,
            100
        ],
        [
            161,
            329
        ],
        [
            163,
            331
        ],
        [
            162,
            330
        ],
        [
            164,
            332
        ],
        [
            95,
            97
        ],
        [
            118,
            120
        ],
        [
            165,
            166
        ],
        [
            171,
            369
        ],
        [
            172,
            370
        ],
        [
            333,
            337
        ],
        [
            335,
            339
        ],
        [
            191,
            193
        ],
        [
            192,
            194
        ],
        [
            195,
            197
        ],
        [
            196,
            198
        ],
        [
            334,
            338
        ],
        [
            336,
            340
        ],
        [
            234,
            238
        ],
        [
            236,
            240
        ],
        [
            242,
            246
        ],
        [
            244,
            248
        ],
        [
            234,
            236
        ],
        [
            238,
            240
        ],
        [
            242,
            244
        ],
        [
            246,
            248
        ],
        [
            345,
            346
        ],
        [
            347,
            348
        ],
        [
            349,
            350
        ],
        [
            351,
            352
        ],
        [
            371,
            373
        ],
        [
            372,
            374
        ],
        [
            48,
            102
        ],
        [
            50,
            104
        ],
        [
            45,
            107
        ],
        [
            46,
            108
        ],
        [
            40,
            42
        ],
        [
            158,
            314
        ],
        [
            160,
            316
        ],
        [
            165,
            345
        ],
        [
            166,
            346
        ],
        [
            98,
            99
        ],
        [
            130,
            132
        ],
        [
            407,
            453
        ],
        [
            408,
            454
        ],
        [
            318,
            322
        ],
        [
            320,
            324
        ],
        [
            250,
            254
        ],
        [
            252,
            256
        ],
        [
            258,
            262
        ],
        [
            260,
            264
        ],
        [
            347,
            349
        ],
        [
            348,
            350
        ],
        [
            209,
            210
        ],
        [
            211,
            212
        ],
        [
            213,
            214
        ],
        [
            215,
            216
        ],
        [
            455,
            457
        ],
        [
            456,
            458
        ]
    ],
    "edges_assignment": [
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "B",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "M",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V",
        "V"
    ],
    "faces_vertices": [
        [
            29,
            0,
            60
        ],
        [
            326,
            409,
            1,
            325
        ],
        [
            61,
            2,
            31
        ],
        [
            328,
            327,
            3,
            410
        ],
        [
            30,
            60,
            4,
            33
        ],
        [
            33,
            4,
            9
        ],
        [
            9,
            4,
            8
        ],
        [
            379,
            8,
            4,
            60
        ],
        [
            30,
            33,
            5,
            36
        ],
        [
            14,
            36,
            5,
            12
        ],
        [
            12,
            5,
            9
        ],
        [
            9,
            5,
            33
        ],
        [
            10,
            6,
            11
        ],
        [
            11,
            6,
            34
        ],
        [
            32,
            34,
            6,
            61
        ],
        [
            380,
            61,
            6,
            10
        ],
        [
            16,
            13,
            7,
            38
        ],
        [
            32,
            38,
            7,
            34
        ],
        [
            34,
            7,
            11
        ],
        [
            11,
            7,
            13
        ],
        [
            52,
            9,
            8,
            24
        ],
        [
            51,
            24,
            8,
            379
        ],
        [
            18,
            12,
            9,
            52
        ],
        [
            53,
            26,
            10,
            11
        ],
        [
            51,
            380,
            10,
            26
        ],
        [
            20,
            53,
            11,
            13
        ],
        [
            54,
            14,
            12,
            18
        ],
        [
            55,
            20,
            13,
            16
        ],
        [
            43,
            36,
            14,
            15
        ],
        [
            15,
            14,
            54
        ],
        [
            71,
            70,
            43,
            15,
            48
        ],
        [
            102,
            48,
            15,
            78
        ],
        [
            107,
            78,
            15,
            45
        ],
        [
            45,
            15,
            54
        ],
        [
            55,
            16,
            17
        ],
        [
            44,
            17,
            16,
            38
        ],
        [
            108,
            46,
            17,
            79
        ],
        [
            104,
            79,
            17,
            50
        ],
        [
            72,
            73,
            50,
            17,
            44
        ],
        [
            55,
            17,
            46
        ],
        [
            45,
            54,
            18,
            19
        ],
        [
            39,
            56,
            19,
            18,
            52
        ],
        [
            45,
            19,
            57
        ],
        [
            57,
            19,
            56
        ],
        [
            58,
            41,
            53,
            20,
            21
        ],
        [
            46,
            21,
            20,
            55
        ],
        [
            58,
            21,
            59
        ],
        [
            59,
            21,
            46
        ],
        [
            107,
            45,
            22,
            92
        ],
        [
            100,
            92,
            22,
            28
        ],
        [
            28,
            22,
            63
        ],
        [
            63,
            22,
            62
        ],
        [
            39,
            62,
            22,
            56
        ],
        [
            56,
            22,
            57
        ],
        [
            57,
            22,
            45
        ],
        [
            100,
            28,
            23,
            93
        ],
        [
            108,
            93,
            23,
            46
        ],
        [
            46,
            23,
            59
        ],
        [
            59,
            23,
            58
        ],
        [
            41,
            58,
            23,
            64
        ],
        [
            64,
            23,
            65
        ],
        [
            65,
            23,
            28
        ],
        [
            39,
            52,
            24,
            40
        ],
        [
            26,
            42,
            40,
            24,
            51
        ],
        [
            39,
            40,
            25,
            62
        ],
        [
            62,
            25,
            63
        ],
        [
            63,
            25,
            28
        ],
        [
            42,
            27,
            28,
            25,
            40
        ],
        [
            41,
            42,
            26,
            53
        ],
        [
            28,
            27,
            65
        ],
        [
            65,
            27,
            64
        ],
        [
            41,
            64,
            27,
            42
        ],
        [
            36,
            35,
            29,
            30
        ],
        [
            30,
            29,
            60
        ],
        [
            38,
            32,
            31,
            37
        ],
        [
            61,
            31,
            32
        ],
        [
            66,
            381,
            35,
            36
        ],
        [
            67,
            66,
            36,
            43
        ],
        [
            68,
            38,
            37,
            382
        ],
        [
            69,
            44,
            38,
            68
        ],
        [
            67,
            43,
            70
        ],
        [
            72,
            44,
            69
        ],
        [
            102,
            101,
            47,
            48
        ],
        [
            71,
            48,
            47,
            383
        ],
        [
            104,
            50,
            49,
            103
        ],
        [
            73,
            384,
            49,
            50
        ],
        [
            385,
            381,
            66,
            74
        ],
        [
            74,
            66,
            67
        ],
        [
            76,
            74,
            67,
            70
        ],
        [
            69,
            68,
            75
        ],
        [
            386,
            75,
            68,
            382
        ],
        [
            77,
            72,
            69,
            75
        ],
        [
            76,
            70,
            71
        ],
        [
            387,
            76,
            71,
            383
        ],
        [
            73,
            72,
            77
        ],
        [
            388,
            384,
            73,
            77
        ],
        [
            387,
            385,
            74,
            76
        ],
        [
            388,
            77,
            75,
            386
        ],
        [
            110,
            105,
            78,
            80
        ],
        [
            80,
            78,
            125
        ],
        [
            125,
            78,
            107
        ],
        [
            134,
            133,
            102,
            78,
            105
        ],
        [
            108,
            79,
            126
        ],
        [
            126,
            79,
            81
        ],
        [
            112,
            81,
            79,
            106
        ],
        [
            135,
            136,
            106,
            79,
            104
        ],
        [
            110,
            80,
            82
        ],
        [
            95,
            82,
            80,
            125
        ],
        [
            97,
            126,
            81,
            84
        ],
        [
            84,
            81,
            112
        ],
        [
            114,
            110,
            82,
            83
        ],
        [
            118,
            83,
            82,
            95
        ],
        [
            117,
            83,
            122
        ],
        [
            122,
            83,
            86
        ],
        [
            90,
            86,
            83,
            118
        ],
        [
            146,
            145,
            114,
            83,
            117
        ],
        [
            120,
            97,
            84,
            85
        ],
        [
            116,
            85,
            84,
            112
        ],
        [
            91,
            120,
            85,
            88
        ],
        [
            88,
            85,
            124
        ],
        [
            124,
            85,
            119
        ],
        [
            147,
            148,
            119,
            85,
            116
        ],
        [
            167,
            122,
            86,
            87
        ],
        [
            168,
            87,
            86,
            90
        ],
        [
            158,
            167,
            87,
            161
        ],
        [
            161,
            87,
            407
        ],
        [
            407,
            87,
            168
        ],
        [
            170,
            91,
            88,
            89
        ],
        [
            169,
            89,
            88,
            124
        ],
        [
            170,
            89,
            408
        ],
        [
            408,
            89,
            163
        ],
        [
            160,
            163,
            89,
            169
        ],
        [
            168,
            90,
            98
        ],
        [
            98,
            90,
            118
        ],
        [
            120,
            91,
            99
        ],
        [
            99,
            91,
            170
        ],
        [
            107,
            92,
            127
        ],
        [
            127,
            92,
            129
        ],
        [
            129,
            92,
            100
        ],
        [
            100,
            93,
            131
        ],
        [
            131,
            93,
            128
        ],
        [
            128,
            93,
            108
        ],
        [
            125,
            107,
            94,
            95
        ],
        [
            132,
            96,
            97,
            95,
            94,
            130
        ],
        [
            129,
            130,
            94,
            127
        ],
        [
            127,
            94,
            107
        ],
        [
            120,
            118,
            95,
            97
        ],
        [
            126,
            97,
            96,
            108
        ],
        [
            108,
            96,
            128
        ],
        [
            131,
            128,
            96,
            132
        ],
        [
            168,
            98,
            171
        ],
        [
            171,
            98,
            165
        ],
        [
            166,
            165,
            98,
            99
        ],
        [
            120,
            99,
            98,
            118
        ],
        [
            166,
            99,
            172
        ],
        [
            172,
            99,
            170
        ],
        [
            129,
            100,
            130
        ],
        [
            130,
            100,
            132
        ],
        [
            132,
            100,
            131
        ],
        [
            133,
            389,
            101,
            102
        ],
        [
            135,
            104,
            103,
            390
        ],
        [
            134,
            105,
            137
        ],
        [
            138,
            137,
            105,
            110
        ],
        [
            140,
            112,
            106,
            139
        ],
        [
            139,
            106,
            136
        ],
        [
            114,
            113,
            109,
            110
        ],
        [
            138,
            110,
            109,
            391
        ],
        [
            116,
            112,
            111,
            115
        ],
        [
            140,
            392,
            111,
            112
        ],
        [
            145,
            397,
            113,
            114
        ],
        [
            147,
            116,
            115,
            398
        ],
        [
            146,
            117,
            149
        ],
        [
            150,
            149,
            117,
            122
        ],
        [
            152,
            124,
            119,
            151
        ],
        [
            151,
            119,
            148
        ],
        [
            167,
            405,
            121,
            122
        ],
        [
            150,
            122,
            121,
            399
        ],
        [
            169,
            124,
            123,
            406
        ],
        [
            152,
            400,
            123,
            124
        ],
        [
            393,
            389,
            133,
            141
        ],
        [
            141,
            133,
            134
        ],
        [
            143,
            141,
            134,
            137
        ],
        [
            136,
            135,
            142
        ],
        [
            394,
            142,
            135,
            390
        ],
        [
            144,
            139,
            136,
            142
        ],
        [
            143,
            137,
            138
        ],
        [
            395,
            143,
            138,
            391
        ],
        [
            140,
            139,
            144
        ],
        [
            396,
            392,
            140,
            144
        ],
        [
            395,
            393,
            141,
            143
        ],
        [
            396,
            144,
            142,
            394
        ],
        [
            401,
            397,
            145,
            153
        ],
        [
            153,
            145,
            146
        ],
        [
            155,
            153,
            146,
            149
        ],
        [
            148,
            147,
            154
        ],
        [
            402,
            154,
            147,
            398
        ],
        [
            156,
            151,
            148,
            154
        ],
        [
            155,
            149,
            150
        ],
        [
            403,
            155,
            150,
            399
        ],
        [
            152,
            151,
            156
        ],
        [
            404,
            400,
            152,
            156
        ],
        [
            403,
            401,
            153,
            155
        ],
        [
            404,
            156,
            154,
            402
        ],
        [
            314,
            313,
            157,
            158
        ],
        [
            167,
            158,
            157,
            405
        ],
        [
            329,
            314,
            158,
            161
        ],
        [
            316,
            160,
            159,
            315
        ],
        [
            169,
            406,
            159,
            160
        ],
        [
            331,
            163,
            160,
            316
        ],
        [
            453,
            329,
            161,
            407
        ],
        [
            453,
            407,
            162,
            330
        ],
        [
            369,
            330,
            162,
            171
        ],
        [
            171,
            162,
            168
        ],
        [
            168,
            162,
            407
        ],
        [
            454,
            408,
            163,
            331
        ],
        [
            370,
            172,
            164,
            332
        ],
        [
            454,
            332,
            164,
            408
        ],
        [
            408,
            164,
            170
        ],
        [
            170,
            164,
            172
        ],
        [
            369,
            171,
            165,
            345
        ],
        [
            346,
            345,
            165,
            166
        ],
        [
            370,
            346,
            166,
            172
        ],
        [
            218,
            353,
            173,
            183
        ],
        [
            199,
            183,
            173,
            354
        ],
        [
            354,
            173,
            453
        ],
        [
            453,
            173,
            329
        ],
        [
            314,
            329,
            173,
            353
        ],
        [
            200,
            356,
            174,
            184
        ],
        [
            220,
            184,
            174,
            355
        ],
        [
            316,
            355,
            174,
            331
        ],
        [
            331,
            174,
            454
        ],
        [
            454,
            174,
            356
        ],
        [
            318,
            357,
            175,
            333
        ],
        [
            333,
            175,
            455
        ],
        [
            455,
            175,
            358
        ],
        [
            201,
            358,
            175,
            185
        ],
        [
            222,
            185,
            175,
            357
        ],
        [
            360,
            176,
            456
        ],
        [
            456,
            176,
            335
        ],
        [
            320,
            335,
            176,
            359
        ],
        [
            224,
            359,
            176,
            186
        ],
        [
            202,
            186,
            176,
            360
        ],
        [
            226,
            361,
            177,
            187
        ],
        [
            203,
            187,
            177,
            362
        ],
        [
            362,
            177,
            457
        ],
        [
            457,
            177,
            337
        ],
        [
            322,
            337,
            177,
            361
        ],
        [
            204,
            364,
            178,
            188
        ],
        [
            228,
            188,
            178,
            363
        ],
        [
            324,
            363,
            178,
            339
        ],
        [
            339,
            178,
            458
        ],
        [
            458,
            178,
            364
        ],
        [
            460,
            459,
            179,
            341
        ],
        [
            326,
            341,
            179,
            409
        ],
        [
            326,
            365,
            180,
            341
        ],
        [
            341,
            180,
            460
        ],
        [
            460,
            180,
            366
        ],
        [
            206,
            366,
            180,
            189
        ],
        [
            230,
            189,
            180,
            365
        ],
        [
            328,
            410,
            181,
            343
        ],
        [
            462,
            343,
            181,
            461
        ],
        [
            368,
            182,
            462
        ],
        [
            462,
            182,
            343
        ],
        [
            328,
            343,
            182,
            367
        ],
        [
            232,
            367,
            182,
            190
        ],
        [
            208,
            190,
            182,
            368
        ],
        [
            218,
            183,
            191
        ],
        [
            234,
            191,
            183,
            199
        ],
        [
            236,
            200,
            184,
            192
        ],
        [
            192,
            184,
            220
        ],
        [
            238,
            201,
            185,
            193
        ],
        [
            193,
            185,
            222
        ],
        [
            224,
            186,
            194
        ],
        [
            240,
            194,
            186,
            202
        ],
        [
            226,
            187,
            195
        ],
        [
            242,
            195,
            187,
            203
        ],
        [
            244,
            204,
            188,
            196
        ],
        [
            196,
            188,
            228
        ],
        [
            246,
            206,
            189,
            197
        ],
        [
            197,
            189,
            230
        ],
        [
            232,
            190,
            198
        ],
        [
            248,
            198,
            190,
            208
        ],
        [
            282,
            281,
            233,
            191,
            250
        ],
        [
            254,
            250,
            191,
            193
        ],
        [
            238,
            193,
            191,
            234
        ],
        [
            218,
            191,
            233
        ],
        [
            240,
            236,
            192,
            194
        ],
        [
            256,
            194,
            192,
            252
        ],
        [
            283,
            284,
            252,
            192,
            235
        ],
        [
            235,
            192,
            220
        ],
        [
            237,
            193,
            222
        ],
        [
            285,
            286,
            254,
            193,
            237
        ],
        [
            224,
            194,
            239
        ],
        [
            288,
            287,
            239,
            194,
            256
        ],
        [
            290,
            289,
            241,
            195,
            258
        ],
        [
            262,
            258,
            195,
            197
        ],
        [
            246,
            197,
            195,
            242
        ],
        [
            226,
            195,
            241
        ],
        [
            248,
            244,
            196,
            198
        ],
        [
            264,
            198,
            196,
            260
        ],
        [
            291,
            292,
            260,
            196,
            243
        ],
        [
            243,
            196,
            228
        ],
        [
            245,
            197,
            230
        ],
        [
            293,
            294,
            262,
            197,
            245
        ],
        [
            232,
            198,
            247
        ],
        [
            296,
            295,
            247,
            198,
            264
        ],
        [
            234,
            199,
            209
        ],
        [
            209,
            199,
            354
        ],
        [
            210,
            200,
            236
        ],
        [
            356,
            200,
            210
        ],
        [
            358,
            201,
            211
        ],
        [
            211,
            201,
            238
        ],
        [
            240,
            202,
            212
        ],
        [
            212,
            202,
            360
        ],
        [
            242,
            203,
            213
        ],
        [
            213,
            203,
            362
        ],
        [
            214,
            204,
            244
        ],
        [
            364,
            204,
            214
        ],
        [
            376,
            375,
            205,
            342
        ],
        [
            460,
            342,
            205,
            459
        ],
        [
            366,
            206,
            215
        ],
        [
            215,
            206,
            246
        ],
        [
            462,
            461,
            207,
            344
        ],
        [
            378,
            344,
            207,
            377
        ],
        [
            248,
            208,
            216
        ],
        [
            216,
            208,
            368
        ],
        [
            236,
            234,
            209,
            210
        ],
        [
            346,
            210,
            209,
            345
        ],
        [
            345,
            209,
            369
        ],
        [
            369,
            209,
            354
        ],
        [
            356,
            210,
            370
        ],
        [
            370,
            210,
            346
        ],
        [
            358,
            211,
            371
        ],
        [
            371,
            211,
            347
        ],
        [
            348,
            347,
            211,
            212
        ],
        [
            240,
            212,
            211,
            238
        ],
        [
            348,
            212,
            372
        ],
        [
            372,
            212,
            360
        ],
        [
            244,
            242,
            213,
            214
        ],
        [
            350,
            214,
            213,
            349
        ],
        [
            349,
            213,
            373
        ],
        [
            373,
            213,
            362
        ],
        [
            364,
            214,
            374
        ],
        [
            374,
            214,
            350
        ],
        [
            366,
            215,
            376
        ],
        [
            376,
            215,
            351
        ],
        [
            352,
            351,
            215,
            216
        ],
        [
            248,
            216,
            215,
            246
        ],
        [
            352,
            216,
            378
        ],
        [
            378,
            216,
            368
        ],
        [
            265,
            413,
            217,
            218
        ],
        [
            353,
            218,
            217,
            445
        ],
        [
            266,
            265,
            218,
            233
        ],
        [
            267,
            220,
            219,
            414
        ],
        [
            355,
            446,
            219,
            220
        ],
        [
            268,
            235,
            220,
            267
        ],
        [
            357,
            447,
            221,
            222
        ],
        [
            269,
            222,
            221,
            415
        ],
        [
            270,
            237,
            222,
            269
        ],
        [
            359,
            224,
            223,
            448
        ],
        [
            271,
            416,
            223,
            224
        ],
        [
            272,
            271,
            224,
            239
        ],
        [
            273,
            417,
            225,
            226
        ],
        [
            361,
            226,
            225,
            449
        ],
        [
            274,
            273,
            226,
            241
        ],
        [
            275,
            228,
            227,
            418
        ],
        [
            363,
            450,
            227,
            228
        ],
        [
            276,
            243,
            228,
            275
        ],
        [
            365,
            451,
            229,
            230
        ],
        [
            277,
            230,
            229,
            419
        ],
        [
            278,
            245,
            230,
            277
        ],
        [
            367,
            232,
            231,
            452
        ],
        [
            279,
            420,
            231,
            232
        ],
        [
            280,
            279,
            232,
            247
        ],
        [
            266,
            233,
            281
        ],
        [
            240,
            238,
            234,
            236
        ],
        [
            283,
            235,
            268
        ],
        [
            285,
            237,
            270
        ],
        [
            272,
            239,
            287
        ],
        [
            274,
            241,
            289
        ],
        [
            248,
            246,
            242,
            244
        ],
        [
            291,
            243,
            276
        ],
        [
            293,
            245,
            278
        ],
        [
            280,
            247,
            295
        ],
        [
            254,
            253,
            249,
            250
        ],
        [
            282,
            250,
            249,
            421
        ],
        [
            256,
            252,
            251,
            255
        ],
        [
            284,
            422,
            251,
            252
        ],
        [
            286,
            423,
            253,
            254
        ],
        [
            288,
            256,
            255,
            424
        ],
        [
            262,
            261,
            257,
            258
        ],
        [
            290,
            258,
            257,
            425
        ],
        [
            264,
            260,
            259,
            263
        ],
        [
            292,
            426,
            259,
            260
        ],
        [
            294,
            427,
            261,
            262
        ],
        [
            296,
            264,
            263,
            428
        ],
        [
            429,
            413,
            265,
            297
        ],
        [
            297,
            265,
            266
        ],
        [
            305,
            297,
            266,
            281
        ],
        [
            268,
            267,
            298
        ],
        [
            430,
            298,
            267,
            414
        ],
        [
            306,
            283,
            268,
            298
        ],
        [
            270,
            269,
            299
        ],
        [
            431,
            299,
            269,
            415
        ],
        [
            307,
            285,
            270,
            299
        ],
        [
            432,
            416,
            271,
            300
        ],
        [
            300,
            271,
            272
        ],
        [
            308,
            300,
            272,
            287
        ],
        [
            433,
            417,
            273,
            301
        ],
        [
            301,
            273,
            274
        ],
        [
            309,
            301,
            274,
            289
        ],
        [
            276,
            275,
            302
        ],
        [
            434,
            302,
            275,
            418
        ],
        [
            310,
            291,
            276,
            302
        ],
        [
            278,
            277,
            303
        ],
        [
            435,
            303,
            277,
            419
        ],
        [
            311,
            293,
            278,
            303
        ],
        [
            436,
            420,
            279,
            304
        ],
        [
            304,
            279,
            280
        ],
        [
            312,
            304,
            280,
            295
        ],
        [
            305,
            281,
            282
        ],
        [
            437,
            305,
            282,
            421
        ],
        [
            284,
            283,
            306
        ],
        [
            438,
            422,
            284,
            306
        ],
        [
            286,
            285,
            307
        ],
        [
            439,
            423,
            286,
            307
        ],
        [
            308,
            287,
            288
        ],
        [
            440,
            308,
            288,
            424
        ],
        [
            309,
            289,
            290
        ],
        [
            441,
            309,
            290,
            425
        ],
        [
            292,
            291,
            310
        ],
        [
            442,
            426,
            292,
            310
        ],
        [
            294,
            293,
            311
        ],
        [
            443,
            427,
            294,
            311
        ],
        [
            312,
            295,
            296
        ],
        [
            444,
            312,
            296,
            428
        ],
        [
            437,
            429,
            297,
            305
        ],
        [
            438,
            306,
            298,
            430
        ],
        [
            439,
            307,
            299,
            431
        ],
        [
            440,
            432,
            300,
            308
        ],
        [
            441,
            433,
            301,
            309
        ],
        [
            442,
            310,
            302,
            434
        ],
        [
            443,
            311,
            303,
            435
        ],
        [
            444,
            436,
            304,
            312
        ],
        [
            353,
            445,
            313,
            314
        ],
        [
            355,
            316,
            315,
            446
        ],
        [
            322,
            321,
            317,
            318
        ],
        [
            357,
            318,
            317,
            447
        ],
        [
            337,
            322,
            318,
            333
        ],
        [
            324,
            320,
            319,
            323
        ],
        [
            359,
            448,
            319,
            320
        ],
        [
            339,
            335,
            320,
            324
        ],
        [
            361,
            449,
            321,
            322
        ],
        [
            363,
            324,
            323,
            450
        ],
        [
            365,
            326,
            325,
            451
        ],
        [
            367,
            452,
            327,
            328
        ],
        [
            453,
            330,
            354
        ],
        [
            354,
            330,
            369
        ],
        [
            370,
            332,
            356
        ],
        [
            356,
            332,
            454
        ],
        [
            457,
            337,
            333,
            455
        ],
        [
            457,
            455,
            334,
            338
        ],
        [
            373,
            338,
            334,
            371
        ],
        [
            371,
            334,
            358
        ],
        [
            358,
            334,
            455
        ],
        [
            458,
            456,
            335,
            339
        ],
        [
            374,
            372,
            336,
            340
        ],
        [
            458,
            340,
            336,
            456
        ],
        [
            456,
            336,
            360
        ],
        [
            360,
            336,
            372
        ],
        [
            457,
            338,
            362
        ],
        [
            362,
            338,
            373
        ],
        [
            374,
            340,
            364
        ],
        [
            364,
            340,
            458
        ],
        [
            376,
            342,
            366
        ],
        [
            366,
            342,
            460
        ],
        [
            462,
            344,
            368
        ],
        [
            368,
            344,
            378
        ],
        [
            373,
            371,
            347,
            349
        ],
        [
            350,
            349,
            347,
            348
        ],
        [
            374,
            350,
            348,
            372
        ],
        [
            375,
            376,
            351,
            411
        ],
        [
            412,
            411,
            351,
            352
        ],
        [
            377,
            412,
            352,
            378
        ]
    ],
    "edges_foldAngle": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        -180,
        -180,
        -180,
        -180,
        -59.4,
        -59.4,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -30.6,
        -30.6,
        -30.6,
        -30.6,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        -180,
        180,
        180,
        180,
        180,
        59.4,
        59.4,
        180,
        180,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        30.6,
        30.6,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        90,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -180,
        -180,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -90,
        -180,
        -180,
        180,
        180,
        135,
        135,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180,
        180
    ]
}`;function Bs(n){let e,t,o,r,s,c;return{c(){e=S("span"),e.textContent="field of view:",t=S("input"),o=B(),r=S("br"),F(t,"type","text"),F(t,"placeholder","field of view"),F(t,"class","svelte-w1yhsm")},m(i,a){kn(i,e,a),kn(i,t,a),Ge(t,n[4]),kn(i,o,a),kn(i,r,a),s||(c=K(t,"input",n[10]),s=!0)},p(i,a){a&16&&t.value!==i[4]&&Ge(t,i[4])},d(i){i&&_n(e),i&&_n(t),i&&_n(o),i&&_n(r),s=!1,c()}}}function Fs(n){let e,t,o,r;return{c(){e=S("span"),e.textContent="stroke width",t=S("input"),F(t,"type","range"),F(t,"min","0.001"),F(t,"max","0.2"),F(t,"step","0.001")},m(s,c){kn(s,e,c),kn(s,t,c),Ge(t,n[2]),o||(r=[K(t,"change",n[13]),K(t,"input",n[13])],o=!0)},p(s,c){c&4&&Ge(t,s[2])},d(s){s&&_n(e),s&&_n(t),o=!1,Se(r)}}}function Ls(n){let e,t,o,r;return{c(){e=S("span"),e.textContent="opacity",t=S("input"),F(t,"type","range"),F(t,"min","0"),F(t,"max","1"),F(t,"step","0.01")},m(s,c){kn(s,e,c),kn(s,t,c),Ge(t,n[3]),o||(r=[K(t,"change",n[14]),K(t,"input",n[14])],o=!0)},p(s,c){c&8&&Ge(t,s[3])},d(s){s&&_n(e),s&&_n(t),o=!1,Se(r)}}}function Zu(n){let e,t,o,r,s,c,i,a,l,f,d,m,_,v,p,h,g,b,M,x,L,W,E,P,I,nn,Un,qn,ee,it,at,It,Gn,ze,lt,Tt,pe,Nt,y,w,H,N=k.graph.count.vertices(n[5])+"",j,sn,jn,Vn=k.graph.count.edges(n[5])+"",Hn,e1,Ie,Rt=k.graph.count.faces(n[5])+"",t1,fr,dr,mr,Dt,hr,$t,pr,gr,_r,Wt,vr,Mr,br,Ut,yr,Vr,xr,qt,Er,kr,wr,Gt,Ar,Pr,Or,Ht,Sr,Yt,o1,jr,cn=n[0]==="perspective"&&Bs(n),an=n[1]==="creasePattern"&&Fs(n),ln=n[1]==="foldedForm"&&Ls(n);return{c(){e=S("div"),t=S("h3"),t.textContent="viewport",o=B(),r=S("input"),c=B(),i=S("label"),i.textContent="orthographic",a=B(),l=S("input"),d=B(),m=S("label"),m.textContent="perspective",_=B(),v=S("br"),p=B(),cn&&cn.c(),h=B(),g=S("hr"),b=B(),M=S("h3"),M.textContent="style",x=B(),L=S("input"),E=B(),P=S("label"),P.textContent="crease pattern",I=B(),nn=S("input"),qn=B(),ee=S("label"),ee.textContent="folded form",it=B(),at=S("br"),It=B(),an&&an.c(),Gn=B(),ln&&ln.c(),ze=B(),lt=S("hr"),Tt=B(),pe=S("h3"),pe.textContent="current FOLD",Nt=B(),y=S("p"),w=ve("V: "),H=S("b"),j=ve(N),sn=ve(", E: "),jn=S("b"),Hn=ve(Vn),e1=ve(", F: "),Ie=S("b"),t1=ve(Rt),fr=B(),dr=S("hr"),mr=B(),Dt=S("h3"),Dt.textContent="example:",hr=B(),$t=S("button"),$t.textContent="cp: crane 1x1",pr=B(),gr=S("br"),_r=B(),Wt=S("button"),Wt.textContent="cp: crane 100x100",vr=B(),Mr=S("br"),br=B(),Ut=S("button"),Ut.textContent="folded: 2D crane",yr=B(),Vr=S("br"),xr=B(),qt=S("button"),qt.textContent="folded: 3D bird",Er=B(),kr=S("br"),wr=B(),Gt=S("button"),Gt.textContent="folded: 3D moser's train",Ar=B(),Pr=S("hr"),Or=B(),Ht=S("h3"),Ht.textContent="load FOLD",Sr=B(),Yt=S("input"),F(t,"class","svelte-w1yhsm"),F(r,"type","radio"),F(r,"name","radio-webgl-perspective"),r.value="radio-webgl-perspective-orthographic",r.checked=s=n[0]==="orthographic",F(i,"for","radio-webgl-perspective-orthographic"),F(l,"type","radio"),F(l,"name","radio-webgl-perspective"),l.value="radio-webgl-perspective-perspective",l.checked=f=n[0]==="perspective",F(m,"for","radio-webgl-perspective-perspective"),F(M,"class","svelte-w1yhsm"),F(L,"type","radio"),F(L,"name","radio-view-class"),L.value="radio-view-class-crease-pattern",L.checked=W=n[1]==="creasePattern",F(P,"for","radio-view-class-crease-pattern"),F(nn,"type","radio"),F(nn,"name","radio-view-class"),nn.value="radio-view-class-folded-form",nn.checked=Un=n[1]==="foldedForm",F(ee,"for","radio-view-class-folded-form"),F(pe,"class","svelte-w1yhsm"),F(Dt,"class","svelte-w1yhsm"),F(Ht,"class","svelte-w1yhsm"),F(Yt,"type","file"),F(e,"class","settings svelte-w1yhsm")},m(q,pn){kn(q,e,pn),V(e,t),V(e,o),V(e,r),V(e,c),V(e,i),V(e,a),V(e,l),V(e,d),V(e,m),V(e,_),V(e,v),V(e,p),cn&&cn.m(e,null),V(e,h),V(e,g),V(e,b),V(e,M),V(e,x),V(e,L),V(e,E),V(e,P),V(e,I),V(e,nn),V(e,qn),V(e,ee),V(e,it),V(e,at),V(e,It),an&&an.m(e,null),V(e,Gn),ln&&ln.m(e,null),V(e,ze),V(e,lt),V(e,Tt),V(e,pe),V(e,Nt),V(e,y),V(y,w),V(y,H),V(H,j),V(y,sn),V(y,jn),V(jn,Hn),V(y,e1),V(y,Ie),V(Ie,t1),V(e,fr),V(e,dr),V(e,mr),V(e,Dt),V(e,hr),V(e,$t),V(e,pr),V(e,gr),V(e,_r),V(e,Wt),V(e,vr),V(e,Mr),V(e,br),V(e,Ut),V(e,yr),V(e,Vr),V(e,xr),V(e,qt),V(e,Er),V(e,kr),V(e,wr),V(e,Gt),V(e,Ar),V(e,Pr),V(e,Or),V(e,Ht),V(e,Sr),V(e,Yt),o1||(jr=[K(r,"click",n[8]),K(l,"click",n[9]),K(L,"click",n[11]),K(nn,"click",n[12]),K($t,"click",n[15]),K(Wt,"click",n[16]),K(Ut,"click",n[17]),K(qt,"click",n[18]),K(Gt,"click",n[19]),K(Yt,"change",n[20])],o1=!0)},p(q,[pn]){pn&1&&s!==(s=q[0]==="orthographic")&&(r.checked=s),pn&1&&f!==(f=q[0]==="perspective")&&(l.checked=f),q[0]==="perspective"?cn?cn.p(q,pn):(cn=Bs(q),cn.c(),cn.m(e,h)):cn&&(cn.d(1),cn=null),pn&2&&W!==(W=q[1]==="creasePattern")&&(L.checked=W),pn&2&&Un!==(Un=q[1]==="foldedForm")&&(nn.checked=Un),q[1]==="creasePattern"?an?an.p(q,pn):(an=Fs(q),an.c(),an.m(e,Gn)):an&&(an.d(1),an=null),q[1]==="foldedForm"?ln?ln.p(q,pn):(ln=Ls(q),ln.c(),ln.m(e,ze)):ln&&(ln.d(1),ln=null),pn&32&&N!==(N=k.graph.count.vertices(q[5])+"")&&r1(j,N),pn&32&&Vn!==(Vn=k.graph.count.edges(q[5])+"")&&r1(Hn,Vn),pn&32&&Rt!==(Rt=k.graph.count.faces(q[5])+"")&&r1(t1,Rt)},i:xe,o:xe,d(q){q&&_n(e),cn&&cn.d(),an&&an.d(),ln&&ln.d(),o1=!1,Se(jr)}}}function Ju(n,e,t){let{origami:o={}}=e,{perspective:r="orthographic"}=e,{viewClass:s="creasePattern"}=e,{strokeWidth:c=.0025}=e,{opacity:i=1}=e,{fov:a=Math.PI/4}=e,{loadFOLD:l=()=>{}}=e;const f=(I,nn,Un)=>{try{l(JSON.parse(I))}catch(qn){window.alert(qn)}};let d;const m=()=>t(0,r="orthographic"),_=()=>t(0,r="perspective");function v(){a=this.value,t(4,a)}const p=()=>t(1,s="creasePattern"),h=()=>t(1,s="foldedForm");function g(){c=Br(this.value),t(2,c)}function b(){i=Br(this.value),t(3,i)}const M=()=>l(JSON.parse(i3)),x=()=>l(JSON.parse(Gu)),L=()=>l(JSON.parse(Hu)),W=()=>l(JSON.parse(Yu)),E=()=>l(JSON.parse(Xu));function P(){d=this.files,t(7,d)}return n.$$set=I=>{"origami"in I&&t(5,o=I.origami),"perspective"in I&&t(0,r=I.perspective),"viewClass"in I&&t(1,s=I.viewClass),"strokeWidth"in I&&t(2,c=I.strokeWidth),"opacity"in I&&t(3,i=I.opacity),"fov"in I&&t(4,a=I.fov),"loadFOLD"in I&&t(6,l=I.loadFOLD)},n.$$.update=()=>{if(n.$$.dirty&128&&d){d[0];const I=new FileReader;I.onload=nn=>f(nn.target.result),d.length&&(d[0].type,d[0].name,I.readAsText(d[0]))}},[r,s,c,i,a,o,l,d,m,_,v,p,h,g,b,M,x,L,W,E,P]}class Ku extends U1{constructor(e){super(),W1(this,e,Ju,Zu,$1,{origami:5,perspective:0,viewClass:1,strokeWidth:2,opacity:3,fov:4,loadFOLD:6})}}const Qu=`#version 100

uniform mat4 u_matrix;

attribute vec2 v_position;
attribute vec3 v_color;
varying vec3 blend_color;

void main () {
	gl_Position = u_matrix * vec4(v_position, 0, 1);
	blend_color = v_color;
}
`,n7=`#version 100

attribute vec2 v_position;
attribute vec3 v_color;
attribute vec2 edge_vector;
attribute vec2 vertex_vector;

uniform mat4 u_matrix;
uniform mat4 u_projection;
uniform mat4 u_modelView;
uniform float u_strokeWidth;
varying vec3 blend_color;

void main () {
	// dot(normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),
	// this one works
	float sign = vertex_vector[0];
	vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;
	gl_Position = u_matrix * vec4(side + v_position, 0, 1);

	// vec3 forward = (u_modelView * vec4(0, 0, 1, 0)).xyz;
	// float sign = vertex_vector[0];
	// vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign));
	// vec3 side3d = (u_modelView * vec4(side, 0, 1)).xyz;
	// vec3 c = normalize(cross(side3d, forward)) * u_strokeWidth;
	// // gl_Position = u_matrix * vec4(v_position.x + c.x, v_position.y + c.y, c.z, 1);
	// gl_Position = u_matrix * vec4(v_position, 0, 1) + u_projection * vec4(c, 1);
	
	// vec3 forward = (u_modelView * vec4(0, 0, 1, 0)).xyz;
	// vec3 edgeVec3d = (u_modelView * vec4(edge_vector, 0, 0)).xyz;
	// vec3 thick = normalize(cross(edgeVec3d, forward)) * sign * u_strokeWidth;
	// vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;
	// vec4 projected_vector = u_matrix * vec4(normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)), 0, 1);
	// gl_Position = u_matrix * vec4(v_position, 0, 1) + vec4(thick.xyz, 0);
	// gl_Position = u_matrix * vec4(v_position, 0, 1) + vec4(0, u_strokeWidth * sign, 0, 0);
	blend_color = v_color;
}
`,a3=`#version 100

precision mediump float;
varying vec3 blend_color;

void main () {
	gl_FragColor = vec4(blend_color.rgb, 1);
}
`,e7=`#version 300 es

uniform mat4 u_matrix;

in vec2 v_position;
in vec3 v_color;
out vec3 blend_color;
// flat out vec3 blend_color;

void main () {
	gl_Position = u_matrix * vec4(v_position, 0, 1);
	blend_color = v_color;
}
`,t7=`#version 300 es

uniform mat4 u_matrix;
uniform mat4 u_projection;
uniform mat4 u_modelView;
uniform float u_strokeWidth;

in vec2 v_position;
in vec3 v_color;
in vec2 edge_vector;
in vec2 vertex_vector;
out vec3 blend_color;

void main () {
	// dot(normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),
	// this one works
	float sign = vertex_vector[0];
	vec2 side = normalize(vec2(edge_vector.y * sign, -edge_vector.x * sign)) * u_strokeWidth;
	gl_Position = u_matrix * vec4(side + v_position, 0, 1);
	blend_color = v_color;
}
`,l3=`#version 300 es
precision mediump float;
// precision highp float;

// flat in vec4 blend_color;
in vec3 blend_color;
out vec4 outColor;
 
void main() {
	outColor = vec4(blend_color.rgb, 1);
}
`,t0={B:[.33,.33,.33],b:[.33,.33,.33],V:[.21,.39,.59],v:[.21,.39,.59],M:[.73,.25,.14],m:[.73,.25,.14],F:[.2,.2,.2],f:[.2,.2,.2],U:[.2,.2,.2],u:[.2,.2,.2]},l0=n=>n.map(e=>[0,1].map(t=>e[t]||0)),u3=(n,e,t)=>{if(!e||!e.vertices_coords||!e.edges_vertices)return[];const o=l0(e.edges_vertices.flatMap(a=>a.map(l=>e.vertices_coords[l])).flatMap(a=>[a,a])),r=l0(k.graph.makeEdgesVector(e));l0(e.edges_vertices.map(a=>e.vertices_coords[a[0]]));const s=e.edges_assignment.flatMap(a=>[t0[a],t0[a],t0[a],t0[a]]),c=r.flatMap(a=>[a,a,a,a]),i=e.edges_vertices.flatMap(()=>[[1,0],[-1,0],[-1,0],[1,0]]);return[{location:n.getAttribLocation(t,"v_position"),buffer:n.createBuffer(),length:2,data:new Float32Array(o.flat())},{location:n.getAttribLocation(t,"v_color"),buffer:n.createBuffer(),length:s[0].length,data:new Float32Array(s.flat())},{location:n.getAttribLocation(t,"edge_vector"),buffer:n.createBuffer(),length:c[0].length,data:new Float32Array(c.flat())},{location:n.getAttribLocation(t,"vertex_vector"),buffer:n.createBuffer(),length:i[0].length,data:new Float32Array(i.flat())}]},f3=(n,e)=>{if(!e||!e.edges_vertices)return[];const t=e.edges_vertices.map((o,r)=>r*4).flatMap(o=>[o+0,o+1,o+2,o+2,o+3,o+0]);return[{mode:n.TRIANGLES,buffer:n.createBuffer(),data:new Uint32Array(t)}]},d3=(n,e,t)=>{if(!e||!e.vertices_coords)return[];const o=e.vertices_coords.map(()=>[.11,.11,.11]);return[{location:n.getAttribLocation(t,"v_position"),buffer:n.createBuffer(),length:2,data:new Float32Array(l0(e.vertices_coords).flat())},{location:n.getAttribLocation(t,"v_color"),buffer:n.createBuffer(),length:o[0].length,data:new Float32Array(o.flat())}]},m3=(n,e)=>!e||!e.vertices_coords||!e.faces_vertices?[]:[{mode:n.TRIANGLES,buffer:n.createBuffer(),data:new Uint32Array(k.graph.triangulateConvexFacesVertices(e).flat())}],o7=(n,e)=>{const t=k.webgl.createProgram(n,Qu,a3);return{program:t,vertexArrays:d3(n,e,t),elementArrays:m3(n,e),flags:[]}},r7=(n,e)=>{const t=k.webgl.createProgram(n,n7,a3);return{program:t,vertexArrays:u3(n,e,t),elementArrays:f3(n,e),flags:[]}},s7=(n,e)=>{const t=k.webgl.createProgram(n,e7,l3);return{program:t,vertexArrays:d3(n,e,t),elementArrays:m3(n,e),flags:[]}},c7=(n,e)=>{const t=k.webgl.createProgram(n,t7,l3);return{program:t,vertexArrays:u3(n,e,t),elementArrays:f3(n,e),flags:[]}},i7=(n,e=1,t={})=>{switch(e){case 1:return[o7(n,t),r7(n,t)];case 2:return[s7(n,t),c7(n,t)]}},a7=`#version 100

attribute vec3 v_position;
attribute vec3 v_normal;

uniform mat4 u_projection;
uniform mat4 u_modelView;
uniform mat4 u_matrix;
varying vec3 blend_color;
varying vec3 normal_color;

void main () {
	gl_Position = u_matrix * vec4(v_position, 1);

	normal_color = vec3(
		dot(v_normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),
		dot(v_normal, (u_modelView * vec4(0, 1, 0, 0)).xyz),
		dot(v_normal, (u_modelView * vec4(0, 0, 1, 0)).xyz)
	);
	// normal_color = vec3(
	// 	dot(v_normal, vec4(1, 0, 0, 0).xyz),
	// 	dot(v_normal, vec4(0, 1, 0, 0).xyz),
	// 	dot(v_normal, vec4(0, 0, 1, 0).xyz)
	// );

	float grayX = abs(normal_color.x);
	float grayY = abs(normal_color.y);
	float grayZ = abs(normal_color.z);
	float gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;
	float c = clamp(gray, 0.0, 1.0);
	blend_color = vec3(c, c, c);
}
`,l7=`#version 100

precision mediump float;
uniform float u_opacity;
varying vec3 blend_color;

void main () {
	gl_FragColor = vec4(blend_color.rgb, u_opacity);
	// gl_FragDepth = 0.5;
}
`,u7=`#version 300 es

// uniform mat4 u_projection;
uniform mat4 u_modelView;
uniform mat4 u_matrix;

in vec3 v_position;
in vec3 v_normal;
out vec3 front_color;
out vec3 back_color;
flat out int provokedVertex;

void main () {
	gl_Position = u_matrix * vec4(v_position, 1);
	provokedVertex = gl_VertexID;

	vec3 normal_color = vec3(
		dot(v_normal, (u_modelView * vec4(1, 0, 0, 0)).xyz),
		dot(v_normal, (u_modelView * vec4(0, 1, 0, 0)).xyz),
		dot(v_normal, (u_modelView * vec4(0, 0, 1, 0)).xyz)
	);
	// normal_color = vec3(
	// 	dot(v_normal, vec4(1, 0, 0, 0).xyz),
	// 	dot(v_normal, vec4(0, 1, 0, 0).xyz),
	// 	dot(v_normal, vec4(0, 0, 1, 0).xyz)
	// );

	float grayX = abs(normal_color.x);
	float grayY = abs(normal_color.y);
	float grayZ = abs(normal_color.z);
	float gray = 0.25 + clamp(grayY, 1.0, 0.25) * 0.5 + grayX * 0.25 + grayZ * 0.25;
	float c = clamp(gray, 0.0, 1.0);
	front_color = vec3(c * 0.333, c * 0.5, c);
	back_color = vec3(c, c, c);
}
`,f7=`#version 300 es
// precision mediump float;
precision highp float;

uniform float u_opacity;

uniform vec2 u_touch;
uniform vec2 u_resolution;

// in highp vec4 gl_FragCoord;
// in mediump vec2 gl_PointCoord; // 0.0 to 1.0, location on the screen
// in bool gl_FrontFacing;
// out highp float gl_FragDepth;

flat in int provokedVertex;

in vec3 front_color;
in vec3 back_color;
out vec4 outColor;

void main () {
	gl_FragDepth = gl_FragCoord.z;
	vec3 color = gl_FrontFacing ? front_color : back_color;
	outColor = vec4(color, u_opacity);

	// if (provokedVertex == 8) {
	// 	outColor = vec4(1, 1, 0, 1);
	// }

	// vec2 fragScale = vec2(gl_FragCoord.x / u_resolution.x, gl_FragCoord.y / u_resolution.y);
	// vec2 touchScale = vec2(u_touch.x / u_resolution.x, u_touch.y / u_resolution.y);
	// // fix. invert.
	// touchScale.y = 1.0 - touchScale.y;
	// float dist = distance(touchScale, fragScale);
	// if (dist < 0.1) {
	// 	float t = dist / 0.1;
	// 	outColor.r = outColor.r * t + 1.0 * (1.0 - t);
	// }
}
`,d7=(n,e,t)=>{if(!e||!e.vertices_coords||!e.faces_vertices)return[];const o=e.vertices_coords.map(i=>[...i].concat(Array(3-i.length).fill(0))),r=k.graph.makeFacesNormal(e),c=(e.vertices_faces?e.vertices_faces:k.graph.makeVerticesFacesUnsorted(e)).map(i=>i.filter(a=>a!=null).map(a=>r[a]).reduce((a,l)=>[a[0]+l[0],a[1]+l[1],a[2]+l[2]],[0,0,0])).map(i=>k.math.normalize3(i));return[{location:n.getAttribLocation(t,"v_position"),buffer:n.createBuffer(),length:o[0].length,data:new Float32Array(o.flat())},{location:n.getAttribLocation(t,"v_normal"),buffer:n.createBuffer(),length:c[0].length,data:new Float32Array(c.flat())}]},m7=(n,e)=>!e||!e.vertices_coords||!e.faces_vertices?[]:[{mode:n.TRIANGLES,buffer:n.createBuffer(),data:new Uint32Array(k.graph.triangulateConvexFacesVertices(e).flat())}],h7=(n,e=1,t={})=>{const o=e==2?k.webgl.createProgram(n,u7,f7):k.webgl.createProgram(n,a7,l7);return[{program:o,vertexArrays:d7(n,t,o),elementArrays:m7(n,t),flags:[n.DEPTH_TEST]}]},p7=`#version 100

attribute vec2 v_position;

void main () {
	gl_Position = vec4(v_position, 0, 1);
}
`,g7=`#version 100

precision mediump float;

// uniform vec2 u_touch;
uniform vec3 u_projectedTouch;
uniform vec2 u_resolution;
uniform mat4 u_projection;
uniform mat4 u_view;

// visualize the 2D touch in screen coordinates
// void main () {
// 	vec2 tp = vec2(u_touch.x, u_resolution.y - u_touch.y);
// 	float d = distance(gl_FragCoord.xy, tp);// / uf_resolution);
// 	float alpha = 1.0 - step(20.0, d);
// 	gl_FragColor = vec4(1.0, 0.8, 0.28, alpha);
// }

// visualize the 3D touch in world coordinates
// by converting back into screen coordinates.
// M = (0.5 scale) * (1,1,0 translate) * (-1 scale)
mat4 M = mat4(-0.5,0,0,0,0,-0.5,0,0,0,0,-0.5,0,0.5,0.5,0,1);

void main () {
	vec2 touchPoint = ((u_projection * u_view) * vec4(u_projectedTouch, 1)).xy;
	vec2 touchPointNormalized = (M * vec4(touchPoint,0,1)).xy;
	// vec2 touchPointNormalized = (-1.0 * touchPoint + 1.0) / 2.0;
	vec2 tp = touchPointNormalized * u_resolution;
	float d = distance(gl_FragCoord.xy, tp);
	float alpha = 1.0 - step(10.0, d);
	gl_FragColor = vec4(1.0, 0.8, 0.28, alpha);
}
`,_7=(n,e)=>[{location:n.getAttribLocation(e,"v_position"),buffer:n.createBuffer(),length:2,data:new Float32Array([-1,-1,1,-1,-1,1,1,1])}],v7=n=>[{mode:n.TRIANGLE_STRIP,buffer:n.createBuffer(),data:new Uint32Array([0,1,2,3])}],zs=n=>{const e=k.webgl.createProgram(n,p7,g7);return{program:e,vertexArrays:_7(n,e),elementArrays:v7(n),flags:[]}},M7=(n,e=1)=>{switch(e){case 1:return[zs(n)];case 2:return[zs(n)]}};const{window:D1}=V3;function b7(n){let e,t,o;return u0(n[8]),{c(){e=S("canvas"),F(e,"class","svelte-5tod0y")},m(r,s){kn(r,e,s),t||(o=K(D1,"resize",n[8]),t=!0)},p:xe,i:xe,o:xe,d(r){r&&_n(e),t=!1,o()}}}let Is=3;function y7(n,e,t){let{origami:o={}}=e,{perspective:r="orthographic"}=e,{viewClass:s="creasePattern"}=e,{fov:c=45}=e,{strokeWidth:i=.0025}=e,{opacity:a=1}=e,{innerWidth:l,innerHeight:f}=window,d,m,_=[],v,p=k.math.identity4x4,h=k.math.identity4x4,g=k.math.identity4x4,b,M,x=[0,0],L=[0,0,0];const W=(y,w,H)=>{y.useProgram(w.program),w.flags.forEach(j=>y.enable(j));const N=y.getProgramParameter(w.program,y.ACTIVE_UNIFORMS);for(let j=0;j<N;j+=1){const sn=y.getActiveUniform(w.program,j).name,jn=H[sn];jn&&jn.set(y.getUniformLocation(w.program,sn),jn.value)}w.vertexArrays.forEach(j=>{y.bindBuffer(y.ARRAY_BUFFER,j.buffer),y.bufferData(y.ARRAY_BUFFER,j.data,y.STATIC_DRAW),y.vertexAttribPointer(j.location,j.length,y.FLOAT,!1,0,0),y.enableVertexAttribArray(j.location)}),w.elementArrays.forEach(j=>{y.bindBuffer(y.ELEMENT_ARRAY_BUFFER,j.buffer),y.bufferData(y.ELEMENT_ARRAY_BUFFER,j.data,y.STATIC_DRAW),y.drawElements(j.mode,j.data.length,y.UNSIGNED_INT,j.buffer)}),w.flags.forEach(j=>y.disable(j))},E=()=>({u_matrix:{set:(y,w)=>d.uniformMatrix4fv(y,!1,w),value:k.math.multiplyMatrices4(k.math.multiplyMatrices4(p,h),g)},u_inverseMatrix:{set:(y,w)=>d.uniformMatrix4fv(y,!1,w),value:k.math.invertMatrix4(k.math.multiplyMatrices4(k.math.multiplyMatrices4(p,h),g))},u_projection:{set:(y,w)=>d.uniformMatrix4fv(y,!1,w),value:p},u_view:{set:(y,w)=>d.uniformMatrix4fv(y,!1,w),value:h},u_modelView:{set:(y,w)=>d.uniformMatrix4fv(y,!1,w),value:k.math.multiplyMatrices4(h,g)},u_strokeWidth:{set:(y,w)=>d.uniform1f(y,w),value:i/2},u_opacity:{set:(y,w)=>d.uniform1f(y,w),value:a},u_touch:{set:(y,w)=>d.uniform2fv(y,w),value:x},u_resolution:{set:(y,w)=>d.uniform2fv(y,w),value:[v.clientWidth,v.clientHeight].map(y=>y*window.devicePixelRatio||1)},u_projectedTouch:{set:(y,w)=>d.uniform3fv(y,w),value:L}}),P=()=>{if(!d)return;d.clear(d.COLOR_BUFFER_BIT|d.DEPTH_BUFFER_BIT);const y=E();_.forEach(w=>W(d,w,y))},I=()=>{if(!v)return k.math.identity4x4;const y=.01,w=25,H=-100,N=100,j=[v.clientWidth,v.clientHeight],sn=Math.min(...j),Vn=[0,1].map(Hn=>(j[Hn]-sn)/sn/2).map(Hn=>Hn+.5);return r==="orthographic"?k.math.makeOrthographicMatrix4(Vn[1],Vn[0],-Vn[1],-Vn[0],H,N):k.math.makePerspectiveMatrix4(c*Math.PI/180,j[0]/j[1],y,w)},nn=()=>[1,0,0,0,0,1,0,0,0,0,1,0,0,0,-1,1],Un=()=>{if(!o)return k.math.identity4x4;const y=k.graph.getBoundingBox(o);if(!y)return k.math.identity4x4;const w=Math.max(...y.span),H=k.math.resize(3,k.math.midpoint(y.min,y.max)),N=[w,0,0,0,0,w,0,0,0,0,w,0,...H,1];return k.math.invertMatrix4(N)},qn=()=>{if(!d)return;const y=window.devicePixelRatio||1,w=[v.clientWidth,v.clientHeight].map(H=>H*y);(v.width!==w[0]||v.height!==w[1])&&(v.width=w[0],v.height=w[1]),d.viewport(0,0,d.canvas.width,d.canvas.height)},ee=y=>{if(!!d){switch(it(),_=[],s){case"creasePattern":_.push(...i7(d,m,y));break;case"foldedForm":_.push(...h7(d,m,y));break}_.push(...M7(d,m))}},it=()=>{for(_.forEach(y=>{y.vertexArrays.forEach(w=>d.disableVertexAttribArray(w.location)),y.vertexArrays.forEach(w=>d.deleteBuffer(w.buffer)),y.elementArrays.forEach(w=>d.deleteBuffer(w.buffer))}),_.forEach(y=>d.deleteProgram(y.program));_.length;)_.pop()},at=()=>{qn(),ee(o),p=I(),h=nn(),g=Un(),P()},It=()=>{qn(),p=I(),P()};Rs(()=>{if(v=document.querySelector("canvas"),!v)throw new Error("canvas not found");v.addEventListener("mousedown",ze,!1),v.addEventListener("mousemove",lt,!1),v.addEventListener("mouseup",pe,!1),v.addEventListener("wheel",Tt,!1),v.addEventListener("ontouchstart",ze,!1),v.addEventListener("ontouchmove",lt,!1),v.addEventListener("ontouchend",pe,!1);const y=k.webgl.initialize(v,2);if(d=y.gl,m=y.version,!d)throw new Error("WebGL could not initialize");d.enable(d.BLEND),d.blendFunc(d.SRC_ALPHA,d.ONE_MINUS_SRC_ALPHA),at()}),_3(()=>{v=null,it()});const Gn=(y,w,H=h,N=1)=>{const j=k.math.multiplyMatrices4(p,H),sn=k.math.invertMatrix4(j),jn=[0,1].map(Ie=>y[Ie]/w[Ie]),Vn=[-2,0,0,0,0,2,0,0,0,0,1,0,1,-1,0,1],Hn=k.math.multiplyMatrix4Vector3(k.math.makeMatrix4Scale([N,N,1]),k.math.multiplyMatrix4Vector3(Vn,[...jn,1]));return k.math.multiplyMatrix4Vector3(sn,Hn)},ze=y=>{M=[...h],b=Gn([y.offsetX,y.offsetY],[v.clientWidth,v.clientHeight],M,r==="perspective"?Is:1)},lt=y=>{const w=window.devicePixelRatio||1;if(!b){x=[y.offsetX,y.offsetY].map(N=>N*w),L=Gn([y.offsetX,y.offsetY],[v.clientWidth,v.clientHeight],h),P();return}const H=Gn([y.offsetX,y.offsetY],[v.clientWidth,v.clientHeight],M,r==="perspective"?Is:1);switch(r){case"perspective":{const N=k.math.quaternionFromTwoVectors(b,H),j=k.math.matrix4FromQuaternion(N);h=k.math.multiplyMatrices4(M,j)}break;case"orthographic":{const N=k.math.subtract(H,b),j=k.math.makeMatrix4Translate(...N),sn=k.math.invertMatrix4(j);h=k.math.multiplyMatrices4(M,sn)}break}x=[y.offsetX,y.offsetY].map(N=>N*w),L=Gn([y.offsetX,y.offsetY],[v.clientWidth,v.clientHeight],h),P()},Tt=y=>{const w=window.devicePixelRatio||1,H=1/100,N=-y.deltaY*H;if(Math.abs(N)<.001)return!1;switch(r){case"perspective":{const j=k.math.makeMatrix4Translate(0,0,N);h=k.math.multiplyMatrices4(j,h)}break;case"orthographic":{const j=1+N,sn=k.math.makeMatrix4Scale([j,j,j]);h=k.math.multiplyMatrices4(sn,h)}break}return x=[y.offsetX,y.offsetY].map(j=>j*w),L=Gn([y.offsetX,y.offsetY],[v.clientWidth,v.clientHeight],h),P(),!1},pe=()=>{b=void 0,M=void 0};function Nt(){t(0,l=D1.innerWidth),t(1,f=D1.innerHeight)}return n.$$set=y=>{"origami"in y&&t(2,o=y.origami),"perspective"in y&&t(3,r=y.perspective),"viewClass"in y&&t(4,s=y.viewClass),"fov"in y&&t(5,c=y.fov),"strokeWidth"in y&&t(6,i=y.strokeWidth),"opacity"in y&&t(7,a=y.opacity)},n.$$.update=()=>{n.$$.dirty[0]&35&&It(),n.$$.dirty[0]&28&&at(),n.$$.dirty[0]&192&&P()},[l,f,o,r,s,c,i,a,Nt]}class V7 extends U1{constructor(e){super(),W1(this,e,y7,b7,$1,{origami:2,perspective:3,viewClass:4,fov:5,strokeWidth:6,opacity:7},null,[-1,-1])}}function x7(n){let e,t,o,r,s,c,i,a,l,f;t=new V7({props:{origami:n[0],viewClass:n[2],perspective:n[1],strokeWidth:n[3],opacity:n[4],fov:n[5]}});function d(g){n[7](g)}function m(g){n[8](g)}function _(g){n[9](g)}function v(g){n[10](g)}function p(g){n[11](g)}let h={loadFOLD:n[6],origami:n[0]};return n[1]!==void 0&&(h.perspective=n[1]),n[2]!==void 0&&(h.viewClass=n[2]),n[3]!==void 0&&(h.strokeWidth=n[3]),n[4]!==void 0&&(h.opacity=n[4]),n[5]!==void 0&&(h.fov=n[5]),r=new Ku({props:h}),ye.push(()=>ft(r,"perspective",d)),ye.push(()=>ft(r,"viewClass",m)),ye.push(()=>ft(r,"strokeWidth",_)),ye.push(()=>ft(r,"opacity",v)),ye.push(()=>ft(r,"fov",p)),{c(){e=S("main"),Lr(t.$$.fragment),o=B(),Lr(r.$$.fragment),F(e,"class","svelte-gq8377")},m(g,b){kn(g,e,b),v1(t,e,null),V(e,o),v1(r,e,null),f=!0},p(g,[b]){const M={};b&1&&(M.origami=g[0]),b&4&&(M.viewClass=g[2]),b&2&&(M.perspective=g[1]),b&8&&(M.strokeWidth=g[3]),b&16&&(M.opacity=g[4]),b&32&&(M.fov=g[5]),t.$set(M);const x={};b&1&&(x.origami=g[0]),!s&&b&2&&(s=!0,x.perspective=g[1],ut(()=>s=!1)),!c&&b&4&&(c=!0,x.viewClass=g[2],ut(()=>c=!1)),!i&&b&8&&(i=!0,x.strokeWidth=g[3],ut(()=>i=!1)),!a&&b&16&&(a=!0,x.opacity=g[4],ut(()=>a=!1)),!l&&b&32&&(l=!0,x.fov=g[5],ut(()=>l=!1)),r.$set(x)},i(g){f||(_1(t.$$.fragment,g),_1(r.$$.fragment,g),f=!0)},o(g){Fr(t.$$.fragment,g),Fr(r.$$.fragment,g),f=!1},d(g){g&&_n(e),M1(t),M1(r)}}}function E7(n,e,t){let o={},r="orthographic",s="creasePattern",c=.0025,i=1,a=45;const l=p=>{t(0,o=p),o.frame_classes&&(o.frame_classes.includes("creasePattern")?(t(1,r="orthographic"),t(2,s="creasePattern")):o.frame_classes.includes("foldedForm")&&(t(1,r="perspective"),t(2,s="foldedForm")))};Rs(()=>l(JSON.parse(i3)));function f(p){r=p,t(1,r)}function d(p){s=p,t(2,s)}function m(p){c=p,t(3,c)}function _(p){i=p,t(4,i)}function v(p){a=p,t(5,a)}return[o,r,s,c,i,a,l,f,d,m,_,v]}class k7 extends U1{constructor(e){super(),W1(this,e,E7,x7,$1,{})}}new k7({target:document.getElementById("app")});
